{
  "hash": "5b8187ef2399c5f8edb7af97d0fafd3a",
  "result": {
    "markdown": "---\ntitle: One Function or Many Functions\nauthor: \"Shu Fai Cheung\"\ndate: '2022-09-14'\ncategories: [\"R\", \"gui\"]\naliases:\n  - post/2022-09-14-one-function-or-many-functions/index.html\n---\n\n\n\nI am thinking about the differences\nbetween R and SPSS in doing analysis:\none function for one analysis, and\nseveral functions for one analysis.\n\nThough not always the case, in R, it is\ncommon to do an analysis using several\nfunctions. One of them is the \"main\"\nfunction that do the main analysis.\nOther functions are used to extract\ninformation or compute other statistics.\n\nFor example, to do multiple regression,\nthis is what we may do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a Test Dataset\nset.seed(586045)\nn <- 100\ndat <- data.frame(x1 = rnorm(n, 5, 1),\n                  x2 = rnorm(n, 10, 2))\ndat$y <- 2 * dat$x1 + 1 * dat$x2 + rnorm(n, 0, 15)\n# Do regression\nlm_out <- lm(y ~ x1 + x2, dat)\n```\n:::\n\n\nThe main analysis is done by `lm()`.\n\nWe then use other functions on the\noutput of `lm()`. For example, we can use\n`summary()` to print commonly requested\nresults:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x1 + x2, data = dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-36.807 -10.733   0.153   9.472  37.611 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept) -20.7634    12.0270  -1.726  0.08746 . \nx1            2.8688     1.6483   1.740  0.08495 . \nx2            2.5771     0.8555   3.012  0.00331 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.69 on 97 degrees of freedom\nMultiple R-squared:  0.1113,\tAdjusted R-squared:  0.09295 \nF-statistic: 6.072 on 2 and 97 DF,  p-value: 0.003276\n```\n:::\n:::\n\n\nConfidence intervals and variance-covariance\nmatrix of the estimates can be obtained\nby `confint()` and `vcov()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(lm_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  2.5 %   97.5 %\n(Intercept) -44.6335974 3.106785\nx1           -0.4025881 6.140222\nx2            0.8791251 4.275063\n```\n:::\n\n```{.r .cell-code}\nvcov(lm_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            (Intercept)            x1           x2\n(Intercept)  144.647827 -13.347713331 -7.460851584\nx1           -13.347713   2.716868988 -0.005532551\nx2            -7.460852  -0.005532551  0.731913160\n```\n:::\n:::\n\n\nThere are many functions for other statistics,\nsuch as influential statistics and model\ncomparison.\n\nIn SPSS, to do analysis, we usually use a\ndialog box from the pull down menu,\nselect variables, check some checkboxes,\nuse some buttons to open other dialog\nboxes and set other options, click OK,\nand all the requested results are in\nthe output.\n\nI used to think that this approach is\ndue to the graphical user interface (GUI),\nwhich is the strength of SPSS. I forgot\nthat (a) the GUI is a \"syntax generator,\"\nand (b) the format of SPSS syntax we have\nnowadays is very similar to that in SPSS\nbefore it has a GUI. Actually, when I\nfirst learned SPSS in 90's, I did not even have\naccess to a PC version with text menu.\nSyntax command was the only way to do analysis\nin SPSS. For example, `REGRESSION` is\nthe command, and all the checkboxes\nand options are values for subcommands,\nlike arguments in R functions.\n\nSo, the common way we do analysis in\nSPSS, with one command for one analysis,\nis not due to the GUI. It has always been\nthis way, at least in the version I used\nin early 90's, before systems like Windows\nbecame popular.\n\nSo, for an analysis, such as multiple\nregression, one function, or many functions?\n\nWhen I write functions or develop packages,\nI generally adopt the\ndo-one-thing-and-do-it-well principle,\nthough what constitutes \"one thing\"\nis not always clear. This principle make\nit easy for me to write, debug, and\nmaintain a function or package.\n\nHowever, for users who are used to using\nGUI, using one function to do many things\nin an analysis is conceptually similar\nto using a dialog box, thought without\nthe dialog box.\nThe many-function approach does not fit\nwell with the experience in using a dialog box.\n\nIn R, we certainly can write a function\nthat calls other functions, simulating\ncommands like `REGRESSION` in SPSS.\n\nSo, I think this is not a debate\nof which approach is better. In R, we\ncan do both, and let the users do analysis\nin whatever approach they like. For\ndevelopment, the do-one-thing-and-do-it-well\napproach is a better approach. However,\nfor users, especially when developing\nGUI, the one-function approach may be\nmore convenient to the users. The function\nin the one-function approach, like\n`REGRESSION`, is like a wrapper of\na collection of functions: an interface\nto them.\n\nFor example, we can write an R function\nsimilar to `REGRESSION` in SPSS. In SPSS,\nif all the default options are what we need,\nthis command is sufficient:\n\n```\nREGRESSION\n /DEPENDENT y\n /ENTER x1 x2.\n```\n\nTo request confidence intervals\n(`confint()` in R) and the variance-covariance\nmatrix of the estimates (`vcov()` in R),\nthis will do:\n\n```\nREGRESSION\n /STATISTICS DEFAULT BCOV CI(95)\n /DEPENDENT y\n /ENTER x1 x2.\n```\n\nA similar function can be written in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregression(data = dat,\n           dep = \"y\",\n           ivs = c(\"x1\", \"x2\"))\n```\n:::\n\n\nWe can write it in a more \"R-way\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregression(data = dat,\n           model = y ~ x1 + x2)\n```\n:::\n\n\nThe default printout is something similar to\nSPSS. It can be a list of tables (data frames)\nand a print method for printing the output.\n\nActually, we can still say\nthat we are adopting the do-one-thing-and-do-it-well\napproach, although the \"one thing\" is\n\"an interface to a set of functions.\"\n\nI am not trying to argue that we should\nuse this or that approach. They are not\nmutually exclusive. I am just\nwondering how\nto make using R by writing scripts more\naccessible to users who are used to GUI,\nwhile still keeping the\ndo-one-thing-and-do-it-well principle.\nWriting these kinds of wrappers may also\nmake it easier to create GUIs for them.\nFor example, as long as `...` is not\nused, a generic function can be developed\nto check the arguments of a function\nusing its definition and then\nautomatically generate a dialog\nbox for it. For a wrapper with\na lot of arguments, a configuration\nfile can be used to customize the\ndialog box.\n\nP.S.: jamovi is already doing something\nsimilar. Behind the dialog boxes are\nkind of wrapper functions. However,\nthough can be used in console, the\nmodules are, naturally, supposed to be\nused inside jamovi.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}