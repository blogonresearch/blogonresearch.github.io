{
  "hash": "36212b64f103c8404b33113fc1c5f221",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simple Mediation in R: A Tutorial\"\nauthor: \"Shu Fai Cheung\"\ndate: '2024-09-08'\ncategories: [\"R\", \"mediation\", \"manymome\", \"bootstrapping\"]\nformat:\n  html:\n    toc: true\nbibliography: references.bib\ncsl: apa.csl\n---\n\n::: {.cell}\n\n:::\n\n\n\nThis tutorial shows how to use the R\npackage [`manymome`](https://sfcheung.github.io/manymome)\n[@cheung_manymome_2024], a flexible\npackage for mediation analysis,\nto test an indirect effect in a simple\nmediation model fitted by multiple\nregression.\n\n# Pre-Requisite\n\nReaders are expected to have basic R\nskills and know how to fit a linear\nregression model using `lm()`.\n\nThe package `manymome` can be installed\nfrom CRAN:\n\n```r\ninstall.packages(\"manymome\")\n```\n\n# Data\n\nThis is the data file for illustration,\nfrom `manymome`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(manymome)\nhead(data_med, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        m        y       c1       c2\n1  9.931992 17.89644 20.73893 1.426513 6.103290\n2  8.331493 17.92150 22.91594 2.940388 3.832698\n3 10.327471 17.83178 22.14201 3.012678 5.770532\n```\n\n\n:::\n:::\n\n\n\n# A Simple Mediation Model\n\nFirst we fit a simple mediation\nmodel using\nonly `x`, `m`, and `y`.\n\n\n\n::: {.cell layout-align=\"center\" fig-heigh='2'}\n::: {.cell-output-display}\n![A Simple Mediation Model](index_files/figure-html/fig-full-model-1.png){#fig-full-model fig-align='center' width=576}\n:::\n:::\n\n\n\nIn this model:\n\n- `x` is the predictor\n(independent variable).\n\n- `y` is the\noutcome variable (dependent variable).\n\n- `m` is the mediator.\n\nThe goal is to compute and test the\nindirect effect\nfrom `x` to `y`  through `m`.\n\n# Fit the Models by `lm()`\n\nTo estimate all the regression coefficients,\njust fit two regression\nmodels:\n\n- Predict `m` by `x` (@fig-m-model).\n\n- Predict `y` by `m` and `x` (@fig-y-model).\n\n\n\n::: {.cell layout-align=\"center\" fig-heigh='2'}\n::: {.cell-output-display}\n![The Model Predicting `m`](index_files/figure-html/fig-m-model-1.png){#fig-m-model fig-align='center' width=576}\n:::\n:::\n\n::: {.cell layout-align=\"center\" fig-heigh='2'}\n::: {.cell-output-display}\n![The Model Predicting `y`](index_files/figure-html/fig-y-model-1.png){#fig-y-model fig-align='center' width=576}\n:::\n:::\n\n\n\nThis can be easily done by `lm()` in R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict m\nmodel_m <- lm(m ~ x,\n              data = data_med)\n# Predict y\nmodel_y <- lm(y ~ m + x,\n              data = data_med)\n```\n:::\n\n\n\nThese are the regression results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model_m)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nlm(formula = m ~ x, data = data_med)\n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  9.39332    0.83320   11.27   <2e-16 ***\nx            0.92400    0.08358   11.06   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8774 on 98 degrees of freedom\nMultiple R-squared:  0.555,\tAdjusted R-squared:  0.5505 \nF-statistic: 122.2 on 1 and 98 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model_y)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nlm(formula = y ~ m + x, data = data_med)\n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   3.3618     2.9480   1.140 0.256930    \nm             0.8596     0.2358   3.645 0.000432 ***\nx             0.4277     0.2925   1.462 0.146862    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.048 on 97 degrees of freedom\nMultiple R-squared:  0.3512,\tAdjusted R-squared:  0.3378 \nF-statistic: 26.26 on 2 and 97 DF,  p-value: 7.704e-10\n```\n\n\n:::\n:::\n\n\n\nThe direct effect is the\ncoefficient of `x` in the\nmodel predicting `y`, which\nis 0.428, and\nnot significant.\n\n# The Indirect Effect\n\nThe indirect effect is the product of\nthe `a`-path and the `b`-path. To test\nthis indirect effect, one common method\nis nonparametric bootstrapping [@cheung_comparison_2009\n@mackinnon_comparison_2002].\nThis can be done easily by `indirect_effect()`\nfrom the package `manymome`.\n\n## Combine the Regression Results\n\nWe first combine the regression models\nby [`lm2list()`](https://sfcheung.github.io/manymome/reference/lm2list.html)\ninto one object to represent the whole model\n(@fig-full-model):[^order]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_model <- lm2list(model_m,\n                      model_y)\nfull_model\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe models:\nm ~ x\ny ~ m + x\n```\n\n\n:::\n:::\n\n\n\n[^order]: The order does not matter when using\n`lm2list`.\n\n## Compute and Test the Indirect Effect\n\nFor this simple model, we can simply use\n[`indirect_effect()`](https://sfcheung.github.io/manymome/reference/cond_indirect.html)\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- indirect_effect(x = \"x\",\n                       y = \"y\",\n                       m = \"m\",\n                       fit = full_model,\n                       boot_ci = TRUE,\n                       R = 5000,\n                       seed = 3456)\n```\n:::\n\n\n\nThese are the main arguments:\n\n- `x`: The name of the `x` variable,\n  the start of the indirect path.\n\n- `y`: The name of the `y` variable,\n  the end of the indirect path.\n\n- `m`: The name of the mediator.\n\n- `fit`: The regression models combined\n  by `lm2list()`.\n\n- `boot_ci`: If `TRUE`, bootstrap\n  confidence interval will be formed.\n\n- `R`, the number of bootstrap samples.\n  It is fast for regression models and\n  I recommend using at least 5000\n  bootstrap samples or even 10000, because\n  the results may not be stable enough\n  if indirect effect is close to zero\n  [an example can be found in @cheung_semlbci_2023].\n\n- `seed`: The seed for the random number\n  generator, to make the resampling\n  reproducible. This argument should\n  always be set when doing bootstrapping.\n\nBy default, parallel processing will\nbe used and a progress bar will be\ndisplayed.\n\nJust typing the name of the output can\nprint the major results\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n== Indirect Effect  ==\n                                     \n Path:               x -> m -> y     \n Indirect Effect:    0.794           \n 95.0% Bootstrap CI: [0.393 to 1.250]\n\nComputation Formula:\n  (b.m~x)*(b.y~m)\nComputation:\n  (0.92400)*(0.85957)\n\nPercentile confidence interval formed by nonparametric bootstrapping\nwith 5000 bootstrap samples.\n\nCoefficients of Component Paths:\n Path Coefficient\n  m~x       0.924\n  y~m       0.860\n```\n\n\n:::\n:::\n\n\n\nAs shown above, the indirect effect\nis\n0.794.\nThe 95% bootstrap confidence interval is\n[0.393; 1.250]. The indirect effect\nis positive and significant.\n\nFor transparency, the output also shows\nhow the indirect effect was computed.\n\n## Standardized Indirect Effect\n\nTo compute and test the standardized\nindirect effect, with both the `x`-variable\nand `y`-variable standardized, add\n`standardized_x = TRUE` and\n`standardized_y = TRUE`:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nind_stdxy <- indirect_effect(x = \"x\",\n                             y = \"y\",\n                             m = \"m\",\n                             fit = full_model,\n                             boot_ci = TRUE,\n                             R = 5000,\n                             seed = 3456,,\n                             standardized_x = TRUE,\n                             standardized_y = TRUE)\n```\n:::\n\n\n\nThe results can be printed as usual:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind_stdxy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n== Indirect Effect (Both 'x' and 'y' Standardized) ==\n                                     \n Path:               x -> m -> y     \n Indirect Effect:    0.333           \n 95.0% Bootstrap CI: [0.170 to 0.512]\n\nComputation Formula:\n  (b.m~x)*(b.y~m)*sd_x/sd_y\nComputation:\n  (0.92400)*(0.85957)*(1.05515)/(2.51729)\n\nPercentile confidence interval formed by nonparametric bootstrapping\nwith 5000 bootstrap samples.\n\nCoefficients of Component Paths:\n Path Coefficient\n  m~x       0.924\n  y~m       0.860\n\nNOTE:\n- The effects of the component paths are from the model, not\n  standardized.\n```\n\n\n:::\n:::\n\n\n\nThe standardized indirect effect\nis\n0.333.\nThe 95% bootstrap confidence interval is\n[0.170; 0.512], significant.\n\n# A Simple Mediation Model With Some Control Variables\n\nSuppose we want to fit a more complicated\nmodel, with some other variables included,\nsuch as control variables `c1` and `c2`\nin the dataset (@fig-full-model2).\n\n\n\n::: {.cell layout-align=\"center\" fig-caption='A Simple Mediation Model With Control Variables' fig-heigh='4'}\n::: {.cell-output-display}\n![](index_files/figure-html/fig-full-model2-1.png){#fig-full-model2 fig-align='center' width=576}\n:::\n:::\n\n\nAlthough there are more predictors (`c1`\nand `c2`) and more direct and indirect\npaths (e.g., `c1` to `y` through `m`),\nthere are still only just two regression\nmodels. We can fit them as usual by\n`lm()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2_m <- lm(m ~ x + c1 + c2,\n               data = data_med)\nmodel2_y <- lm(y ~ m + x + c1 + c2,\n               data = data_med)\n```\n:::\n\n\n\nThese are the regression results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model2_m)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nlm(formula = m ~ x + c1 + c2, data = data_med)\n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  9.68941    0.91979  10.534   <2e-16 ***\nx            0.93469    0.08083  11.563   <2e-16 ***\nc1           0.19778    0.07678   2.576   0.0115 *  \nc2          -0.16841    0.10305  -1.634   0.1055    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8425 on 96 degrees of freedom\nMultiple R-squared:  0.5981,\tAdjusted R-squared:  0.5855 \nF-statistic: 47.62 on 3 and 96 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model2_y)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nlm(formula = y ~ m + x + c1 + c2, data = data_med)\n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   4.4152     3.3016   1.337  0.18432   \nm             0.7847     0.2495   3.145  0.00222 **\nx             0.5077     0.3057   1.661  0.10004   \nc1            0.1405     0.1941   0.724  0.47093   \nc2           -0.1544     0.2554  -0.604  0.54695   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.06 on 95 degrees of freedom\nMultiple R-squared:  0.3576,\tAdjusted R-squared:  0.3305 \n```\n\n\n:::\n:::\n\n\n\nWe then just combine them by `lm2list()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_model2 <- lm2list(model2_m,\n                       model2_y)\nfull_model2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe models:\nm ~ x + c1 + c2\ny ~ m + x + c1 + c2\n```\n\n\n:::\n:::\n\n\n\nThe indirect effect can be computed\nand tested in exactly the same way:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nind2 <- indirect_effect(x = \"x\",\n                        y = \"y\",\n                        m = \"m\",\n                        fit = full_model2,\n                        boot_ci = TRUE,\n                        R = 5000,\n                        seed = 3456)\n```\n:::\n\n\n\nThis is the result:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n== Indirect Effect  ==\n                                     \n Path:               x -> m -> y     \n Indirect Effect:    0.733           \n 95.0% Bootstrap CI: [0.288 to 1.203]\n\nComputation Formula:\n  (b.m~x)*(b.y~m)\nComputation:\n  (0.93469)*(0.78469)\n\nPercentile confidence interval formed by nonparametric bootstrapping\nwith 5000 bootstrap samples.\n\nCoefficients of Component Paths:\n Path Coefficient\n  m~x       0.935\n  y~m       0.785\n```\n\n\n:::\n:::\n\n\n\nThe indirect effect\nis\n0.733.\nThe 95% bootstrap confidence interval is\n[0.288; 1.203], decreased after the\ncontrol variables are included, but\nstill significant.\n\nStandardized indirect effect can also\nbe computed and tested just by adding\n`standardized_x = TRUE` and\n`standardized_y = TRUE`.\n\n# Advanced Topics\n\n## Customize the Printout\n\nThe printout can be customized in\nseveral ways. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(ind,\n      digits = 2,\n      pvalue = TRUE,\n      pvalue_digits = 3,\n      se = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n== Indirect Effect  ==\n                                   \n Path:               x -> m -> y   \n Indirect Effect:    0.79          \n 95.0% Bootstrap CI: [0.39 to 1.25]\n Bootstrap p-value:  0.000         \n Bootstrap SE:       0.22          \n\nComputation Formula:\n  (b.m~x)*(b.y~m)\nComputation:\n  (0.92400)*(0.85957)\n\nPercentile confidence interval formed by nonparametric bootstrapping\nwith 5000 bootstrap samples.\nStandard error (SE) based on nonparametric bootstrapping with 5000\nbootstrap samples.\n\nCoefficients of Component Paths:\n Path Coefficient\n  m~x        0.92\n  y~m        0.86\n```\n\n\n:::\n:::\n\n\n\n- `digits`: The number of digits after\n  the decimal point for major output.\n  Default is 3.\n\n- `pvalue`: Whether bootstrapping\n  *p*-value is printed. The method\n  by @asparouhov_bootstrap_2021 is used.\n\n- `pvalue_digits`: The number of digits\n  after the decimal point for the\n  *p*-value. Default is 3.\n\n- `se`: The standard error based on\n  bootstrapping (i.e., the standard\n  deviation of the bootstrap estimates).\n\n## Missing Data\n\nCare needs to be taken if missing data\nis present. Let's remove some data\npoints from the data file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_med_missing <- data_med\ndata_med_missing[1:3, \"x\"] <- NA\ndata_med_missing[2:4, \"m\"] <- NA\ndata_med_missing[3:6, \"y\"] <- NA\nhead(data_med_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        m        y       c1       c2\n1        NA 17.89644 20.73893 1.426513 6.103290\n2        NA       NA 22.91594 2.940388 3.832698\n3        NA       NA       NA 3.012678 5.770532\n4 11.196969       NA       NA 3.120056 4.654931\n5 11.887811 22.08645       NA 4.440018 3.959033\n6  8.198297 16.95198       NA 2.495083 3.763712\n```\n\n\n:::\n:::\n\n\n\nIf we do the regression separately,\nthe cases used in the two models will\nbe different:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict m\nmodel_m_missing <- lm(m ~ x,\n                      data = data_med_missing)\n# Predict y\nmodel_y_missing <- lm(y ~ m + x,\n                      data = data_med_missing)\n```\n:::\n\n\n\nThe sample sizes are not the same:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobs(model_m_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 96\n```\n\n\n:::\n\n```{.r .cell-code}\nnobs(model_y_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 94\n```\n\n\n:::\n:::\n\n\n\nIf they are combined by `lm2list()`,\nan error will occur. The function `lm2list()`\nwill compare the data to see if the cases\nused are likely to be different.[^compare]\n\n[^compare]: The function `lm2list()` checks\nnot only sample sizes. Even if the sample\nsizes are the same, an error will still\nbe raised if there is evidence suggesting\nthat the samples are not the same, such\nas different values of `x` in the two\nmodels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm2list(model_m_missing,\n        model_y_missing)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in check_lm_consistency(...): The data sets used in the lm models do not have identical sample size. All lm models must be fitted to the same sample.\n```\n\n\n:::\n:::\n\n\n\nA simple (though not ideal) solution is\nto use listwise deletion, keeping only\ncases with complete data. This can be done\nby `na.omit()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_med_listwise <- na.omit(data_med_missing)\nhead(data_med_listwise)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        m        y         c1       c2\n7  10.091769 19.42649 26.14005  2.5023227 6.196603\n8   9.307707 18.29251 24.24033  1.3108621 4.892843\n9   6.904119 15.91634 23.97662  1.3010467 3.796913\n10 10.706891 18.00798 26.55098  1.9488566 5.835160\n11  9.524557 17.80304 24.14855 -0.4604918 3.663987\n12  9.307470 17.21214 23.17019  4.2970431 5.538241\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(data_med_listwise)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 94\n```\n\n\n:::\n:::\n\n\n\nThe number of cases using listwise deletion\nis 94, less than\nthe full sample with missing data\n(100).\n\nThe steps above can then be proceed as\nusual.\n\n# Functions Used In This Example\n\nThese are the main functions used:\n\n- [`lm2list()`](https://sfcheung.github.io/manymome/reference/lm2list.html): Combining the results of\n  several one-outcome regression models.\n\n- [`indirect_effect()`](https://sfcheung.github.io/manymome/reference/cond_indirect.html): Compute\n  and test an indirect effect.\n\n# Further Information\n\nThe package `manymome` has no inherent\nlimitations on the number of variables and\nthe form of the mediation models. An\nillustration using a more complicated\nmodels with both parallel and serial\nmediation paths can be found in\n[this online article](https://sfcheung.github.io/manymome/articles/med_lm.html).\n\nOther features of `manymome` can be\nfound in [the website](https://sfcheung.github.io/manymome/)\nfor it.\n\n# Disclaimer: Similarity Across Tutorials\n\nTo keep each tutorial self-contained,\nsome sections are intentionally repeated\nnearly verbatim (\"recycled\")\nto reduce the hassle to read several articles\nto learn how to do one task.\n\n# Revision History and Issues\n\nThe revision history of this post can\nbe find in the [GitHub history of\nthe source file](https://github.com/blogonresearch/blogonresearch.github.io/commits/main/posts/manymome_simple_mediation/index.qmd).\n\nFor issues on this post, such as corrections\nand mistakes, please [open an issue](https://github.com/blogonresearch/blogonresearch.github.io/issues)\nfor the GitHub repository for this blog.\nThanks.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}