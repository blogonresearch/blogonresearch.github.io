{
  "hash": "e30deaeb058e2b57d7f0978575729e33",
  "result": {
    "markdown": "---\ntitle: My Own Style in R\nauthor: \"Shu Fai Cheung\"\ndate: '2022-09-24'\ncategories: [\"R\", \"code-style\"]\naliases:\n  - ../../post/2022-09-24-my-own-style-in-r/index.html\n---\n\n\n\n\nAlthough I have written programs\nsince I were a high school student,\nwhen computer monitor could only display\none color, I have no formal training in\nprogramming, and I rarely worked with\nothers in developing a solution until\nrecently. The problem: I\ndid not write with a consistent\nand professional style. I am pretty sure\nthat my code will look \"ugly\" to\nprofessional programmers.\n\nThat said, I do have a loose style, one\nthat suits my own situation:\n\n- I work on small screen frequently, sometimes\neven on my mobile phone. I wrote the\ndocumentation of some packages on my mobile\nphone, and even this post was largely drafted\non my phone.\n\n- My main tasks are research and teaching,\namong other tasks. I can easily forget\nsome style rules I set for coding. I need\nsomething simple and easy to remember.\n\n- Ideally, code should be easy, or at least\nnot too difficult, to comprehend by future\nme with minimal\ncomments. What looks *nature*\nto me myself is of the top priority.\n\nSo, this is my style, with me as the main user\nand reader:\n\n- For code, I use a\nline width of 60 to 70. For documentation,\nI am more aggressive and use a line width of 40.\n\n- For the same reason, I use two spaces for\nindentation. A four-space indentation is too\n\"expensive\" to me.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmpfct <- function(x) {\n    x^2\n  }\n```\n:::\n\n\n- I like using double-click to select a\nname. This does not work if periods are\nused inside a name. Therefore, I no longer\nuse periods in a name, except for S3 methods.\nIf necessary, I use underscores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthis_is_long_name <- 1\n```\n:::\n\n\n- I found it difficult to remember the case\nI used for a name. So, I stick to lowercase\nletters\nunless I am *very* certain that I can remember\nthat I used uppercase letters.\n\nI don't like camel case. It is OK for\nlanguage that is not case sensitive, like\nVisual Basic and SPSS syntax commands, but is\ninconvenient for case sensitive languages like\nR.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I don't like camel case.\nthisIsNotWhatIDo <- 1\n# I prefer this:\nthis_is_what_i_do <- 1\n```\n:::\n\n\n- Long function names are acceptable with\nme. With autocompletion in many IDEs, it\nis not important to use short names.\nBeing easy to remember *part* of a name is\nimportant. An abbreviation is not easy to\nremember unless it is commonly used (e.g.,\nSD).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is easy to remember\nfactor_loadings()\n# These variants are not\nfload()\nfacload()\nfacload()\nfl()\n```\n:::\n\n\n- I wrote stuff in Python occasionally. I like\nthe Python style indentation, which is\neasy to read. So I use that\nstyle for my R code too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (j in 1:10) {\n    # Do something\n  }\nif (x == 1) {\n    # Do something\n  } else {\n    # Do something else\n  }\n```\n:::\n\n\n- I never, ever, use any automatic stylers to\nreformat code. They make changes that are\ntracked by Git but have nothing to do with the\ncontent. I *may* use them, but only when\nfinalizing the code.\n\n- This is also why I care little about\nword wrap. Irregular line widths are\nacceptable for me.\n\n- Extra whitespace are OK with me. Readability\nis the main goal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I may do this:\nx  <-   1\ny0 <- 100\n```\n:::\n\n\n- I use double quotes for string literals. I\nhave to use two keys ... but the habit is too\ndifficult to break that I don't bother changing\nit.\n\n- The last \"rule\": I can break any of the rules,\n as long as the code is readable without the\nneed to know any rules.\n\nI also have a GitHub repo for my personal\nstyle, in case I forgot the rules:\n\n<https://github.com/sfcheung/rstylesf>\n\nSo, please pardon me if you find my code for\npackages at odd with professional style. I\nmyself is the main reader and maintainer of\nthe packages. What work for me matters.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}