{
  "hash": "824833dfd31570f017edcb67236a1bac",
  "result": {
    "markdown": "---\ntitle: Customize R GUI For Windows\nauthor: \"Shu Fai Cheung\"\ndate: '2022-09-20'\ncategories: [\"R\", \"gui\"]\naliases:\n  - post/2022-09-14-one-function-or-many-functions/index.html\n---\n\n\nMany people use RStudio, and some even\nmistaken RStudio as R. I mainly work\non Windows machines and I did try\nRStudio for a while a few years ago.\nHowever, I switched back to default R\nGUI for Windows that\ncomes with R for Windows and used\nit along with light-weight code editors,\nfor personal reasons. RStudio is good,\nbut has many features that I don't need.\nAlthough I now use VS Code as my main IDE\nfor R, I still use R GUI for\nWindows a lot. It is light-weight,\ncame with base installation, and\nis customizable. Simple but good enough\nfor some tasks.\n\n![R Default GUI](rgui_startup.png)\n\nThe console above is not the default\none. I like dark theme and\nsingle-document interface (SDI). I keep only\na limited numbers of windows on my\ndesktop and I never group windows in the\ntaskbar. SDI is much more efficient for\nme to locate the window I need.\n\nThe configuration can be set in\nEdit->Preferences:\n\n![Rgui configuration](rgui_configuration_annotated.png)\n\nThe configuration is saved in the\n`Rconsole` file in the folder `etc`\nin R's installation folder. Whenever\nI upgrade to a new version of R, I simply\ncopy this file to the same folder in the\nnew installation of R to have my\npreferred configuration. No need to set\nthe configuration again. (I've just\nfound that I haven't changes this\nconfiguration for over five years!)\n\nAnother feature I like is customizing\nthe menu bar. I use `devtools` a lot,\nand would love to call them from the\npulldown menu ... well, not really.\nI rarely use the mouse to access the\npulldown menu. I use the keyboard\nmost of the time.\n\n![R GUI pulldown menu](rgui_devtools_menu.png)\n\nTo add a menu, we can use a script and two functions.\n\nThe following function add a menu called `devtools`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::winMenuAdd(\"devtools\")\n```\n:::\n\n\nAfter a menu is added, items can be added by\n`utils::winMenuAddItem()`. For example, the following\ncall add `check` to the menu `devtools`. If selected,\nthe call `devtools::check()` will be executed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::winMenuAddItem(\"devtools\",\n                      \"check\",\n                      \"devtools::check()\")\n```\n:::\n\n\nAs the screenshot above showed, most of\nthe items I added to `devtools` are those\nfunctions (menu items) in RStudio\n(as far as I recalled ... as I haven't used\nRStudio to develop package for a long\ntime).\n\nMost common tasks that can be done through\nR code can be converted to a menu item.\nFor example, I don't like using the pulldown\nmenu to change working directory. I can\nquickly copy the path to a folder using keyboard\nonly (alt-D and then control-C in\nExplorer). Therefore, I have the following\nmenu item added to the R GUI:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::winMenuAddItem(\"Utils\",\n  \"setwd from clipboard\",\n  \"setwd(readClipboard());getwd()\")\n```\n:::\n\n\n`setwd(readClipboard())` changes the working\ndirectory to the folder I copied to\nclipboard. `getwd()` is added just to\nconfirm the change.\n\nI sometimes open several instances of\nR GUI. To differentiate them, I use\ndifferent color schemes:\n\n![Four instances of R GUI](rgui_four_instances.png)\n\nThis can be done inside R GUI too:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::winMenuAddItem(\"Style\",\n  \"Lime Green and Light Golden\",\n  \"utils::loadRconsole('D:/My_Settings/Rconsole_lime_green_and_light_golden')\")\n```\n:::\n\n\n`utils::loadRconsole()` is used to load\nthe R GUI configuration stored in a\nfile. This file can be created by\nsaving the\nsettings in the R GUI configuration\ndialog above to a file. In the above\nexample, the settings are stored in\nthe file `Rconsole_lime_green_and_light_golden`.\nI have four such files, storing distinct\ncolor schemes.\n\nLike `Rconsole` for the color scheme\nand SDI, I would like to have custom\nmenus when I start R GUI. This can be done\nby adding code like the following to\nthe `Rprofile.site` file in the `etc`\nfolder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif ((Sys.getenv(\"RS_LOCAL_PEER\") == \"\") && (.Platform$GUI == \"Rgui\")) {\n    tryCatch(source(\"D:/My_Settings/add_style_menu.R\"), error = function(e) e)\n  }\n```\n:::\n\n\nI wrote this a long long time ago and I\ncannot recall their purposes. I believe\n`Sys.getenv(\"RS_LOCAL_PEER\") == \"\"` is\nused to check whether a session is\nlaunched in RStudio. `.Platform$GUI == \"Rgui\"`\nis used to check whether an R session\nis launched by the default R GUI. I still\noccasionally use RStudio and the menus\nI created should not be added if an R\nsession is launched inside RStudio.\nI used `tryCatch()` just in case there\nare issues that I overlooked.\n\nSo, whenever I install a new copy or version\nof R, I just copy and paste the customized\n`Rconsole` and `Rprofile.site` files\nto `etc`. I can then happily have my\npreferred environment. Having the\ncode for menu groups stored in other\nfiles allow me to update them without\nediting `Rprofile.site`.\n\nHope you find these tips useful ...\nif you are R GUI users like me. :)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}