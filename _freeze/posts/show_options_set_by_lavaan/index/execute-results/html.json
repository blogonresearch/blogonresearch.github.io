{
  "hash": "9e70002d214b36a6aa0010cdf626be8c",
  "result": {
    "markdown": "---\ntitle: Show Options Set by lavaan\nauthor: \"Shu Fai Cheung\"\ndate: '2022-09-26'\ncategories: [\"R\", \"lavaan\", \"semhelpinghands\"]\nbibliography: references.bib\ncsl: apa.csl\naliases:\n  - post/2022-09-26-show-options-set-by-lavaan/index.html\n---\n\n\n`lavaan` is a convenient tool for doing\nstructural equation modelling in R\n[@lavaan_2012]. One\nof its strength is having \"prepackaged\"\nestimators, which are shortcuts to a set\nof options, such as \"ML\", \"MLR\", \"MLMVS\",\nand others [@savalei_computational_2022].\nIt also tries to set\ndefault values for options based on the\nmodel and data.\n\nHowever, probably due to my not-so-good\nmemory, I sometimes forgot what the settings\nare for a model. Therefore, in the\npackage [`semhelpinghands`](https://sfcheung.github.io/semhelpinghands/),\nI wrote the function [`show_more_options()`](https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html)\nto show some of the settings of the output of\n`lavaan()` and its wrappers, such as\n`sem()` and `cfa()`.^[To be precise, any object of the class `lavaan`.]\n\nThe function `show_more_options()` is\nvery easy to use ... because it accepts\nonly one argument, the output of `lavaan()`.\n\nThis is an example based on the example of\n`lavaan::cfa()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaan)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is lavaan 0.6-13\nlavaan is FREE software! Please report any bugs.\n```\n:::\n\n```{.r .cell-code}\nHSmodel <-\n\"\nvisual  =~ x1 + x2 + x3\ntextual =~ x4 + x5 + x6\nspeed   =~ x7 + x8 + x9\n\"\nfit <- cfa(HSmodel,\n           data = HolzingerSwineford1939)\n```\n:::\n\n\nTo show the major options, just pass the output\nto `show_more_options()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(semhelpinghands)\nshow_more_options(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Options                             Call    Actual  \n Estimator(s)                        default ML      \n Standard Error (SE)                 default standard\n Model Test Statistic(s)             default standard\n How Missing Data is Handled         default listwise\n Information Matrix (for SE)         default expected\n Information Matrix (for Model Test) default expected\n Mean Structure                      default No      \n 'x' Fixed                           default FALSE   \n```\n:::\n:::\n\n\nThe column `Call` shows whether the\ndefault setting is used for each row,\nbased of the call used when fitting the\nmodel. However, it is not always clear\nto me what the default values are.\n\nThe column `Actual` shows the values\nextracted by `lavaan::lavInspect()` or\nfrom the `Options` slot. These are what\nthe default values stand for in the\nfitted model.\n\nMany of the entries are either\n(a) already available in the output of\n`summary()`, or (b) can be deduced from\nthe output. However, I would like to have\na table for quick reference, hence I\nwrote this function.\n\nSuppose `\"MLR\"` is used as the estimator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_MLR <- cfa(HSmodel,\n               data = HolzingerSwineford1939,\n               estimator = \"MLR\")\nshow_more_options(fit_MLR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Options                             Call    Actual            \n Estimator(s)                        MLR     ML                \n Standard Error (SE)                 default robust.huber.white\n Model Test Statistic(s)             default yuan.bentler.mplus\n How Missing Data is Handled         default listwise          \n Information Matrix (for SE)         default observed          \n Information Matrix (for Model Test) default observed          \n Mean Structure                      default No                \n 'x' Fixed                           default FALSE             \n```\n:::\n:::\n\n\nThe output shows the exact names of the\noptions (e.g., `\"robust.huber.white\"`\nand `\"yuan.bentler.mplus\"`). They can\ncomplement the more readable output\nof `summary()` if we need to manually\nset these options, or want to know\nwhich values these options refer to when\nconsulting the help page.\n\nFor example, `summary()` reports that\n`\"Sandwich\"` is the method used for\nstandard errors, and `show_more_options()`\nshows that the exact name in the option\nis `\"robust.huber.white\"`. This is useful\nbecause the word `\"sandwich\"` does not\nappear in the help page of `lavOptions()`,\nwhile the word `\"robust.huber.white\"` does.\nSome users may not know what `\"Sandwich\"`\nstands for.\n\nThis is a dataset for a path model,\nwith missing data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(8745315)\nn <- 100\nx <- rnorm(n)\nm <- 5 + .2 * x + rnorm(n, 0, .8)\ny <- 10 + .3 * m + rnorm(n, 0, .8)\npath_data <- data.frame(x, m, y)\npath_data[c(1, 3, 5, 7), \"m\"] <- NA\npath_data[c(1, 3, 6, 8), \"y\"] <- NA\n```\n:::\n\n\nSuppose we use only the default options\nto fit a path model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_model <-\n\"\nm ~ a * x\ny ~ b * m\nab := a * b\n\"\nfit_path <- sem(path_model,\n                data = path_data)\nshow_more_options(fit_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Options                             Call    Actual  \n Estimator(s)                        default ML      \n Standard Error (SE)                 default standard\n Model Test Statistic(s)             default standard\n How Missing Data is Handled         default listwise\n Information Matrix (for SE)         default expected\n Information Matrix (for Model Test) default expected\n Mean Structure                      default No      \n 'x' Fixed                           default TRUE    \n```\n:::\n:::\n\n\nThe output shows that, by default,\nthe mean structure is not modelled,\nlistwise selection is used to handle\nmissing data, and\n`x` variables (exogenous covariates,\n`x` in this example)\nare treated as fixed. This can be verified\nby the parameter estimates, in which\nthe variance of `x` is a fixed\nparameter and hence has no standard\nerror and no *p*-value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparameterEstimates(fit_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  lhs op rhs label   est    se     z pvalue ci.lower ci.upper\n1   m  ~   x     a 0.075 0.078 0.966  0.334   -0.077    0.228\n2   y  ~   m     b 0.248 0.119 2.081  0.037    0.014    0.482\n3   m ~~   m       0.550 0.080 6.856  0.000    0.393    0.708\n4   y ~~   y       0.745 0.109 6.856  0.000    0.532    0.958\n5   x ~~   x       0.967 0.000    NA     NA    0.967    0.967\n6  ab := a*b    ab 0.019 0.021 0.876  0.381   -0.023    0.060\n```\n:::\n:::\n\n\nSuppose we set missing to `\"FIML\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_path_fiml <- sem(path_model,\n                     data = path_data,\n                     missing = \"FIML\")\nshow_more_options(fit_path_fiml)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Options                             Call    Actual  \n Estimator(s)                        default ML      \n Standard Error (SE)                 default standard\n Model Test Statistic(s)             default standard\n How Missing Data is Handled         FIML    ml      \n Information Matrix (for SE)         default observed\n Information Matrix (for Model Test) default observed\n Mean Structure                      default Yes     \n 'x' Fixed                           default TRUE    \n```\n:::\n:::\n\n\n`x` variables are still treated as fixed,\nbut now mean structure is modelled\n(required for FIML, full information\nmaximum likelihood), even though I did\nnot explicitly ask for it.\n\nOnly options I think are likely needed\n(by me) are included\nin the output.^[The information matrices are technical but I occasionally need them.]\nMore may be added in\nthe future. In any case, if other options\nare needed, they can be\nretrieved by `lavaan::lavInspect()` or\nfrom the `Options` slot of the output.\nIn most cases I\nmyself encountered, all I want is a simple\nfunction that is easy to remember and no\nneed to set any arguments other than\nthe `lavaan` output. If I need something\nelse, I will just extract the information\nmyself.\n\nThis function was inspired by a script\nI wrote to enumerate the options set by\nthe prepackaged shortcuts. Interested\nreaders can read [this thread](https://groups.google.com/g/lavaan/c/6oLwoboi-vQ/m/IQLAXChPAwAJ)\nat the [Google Group for `lavaan`](https://groups.google.com/g/lavaan)\nand [this gist](https://gist.github.com/sfcheung/baa5e43c32d4763b859f5338a1738d79),\nto check how options will be set for\ndifferent\ncombinations of estimator, data, and\nsome other options.\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}