<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogonresearch</title>
    
    
    
    <link>https://blogonresearch.github.io/</link>
    <description>Recent content on Blogonresearch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blogonresearch.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bootstrap Confidence Intervals for Standardized Solution in lavaan</title>
      <link>https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;code&gt;lavaan&lt;/code&gt; supports bootstrap confidence
intervals for free and user-defined
parameters. This is useful especially for
parameter estimates that may not be
approximately normally distributed unless
the sample size is very large.&lt;/p&gt;
&lt;p&gt;However, it is known, though not well-known
enough in my opinion, that, even if bootstrap
confidence intervals are requested, the
confidence intervals reported in the
standardized solution are not bootstrap
confidence intervals as in tools like
&lt;code&gt;PROCESS&lt;/code&gt; for standardized effects like
standardized indirect effects, but are
symmetric delta-method
confidence intervals based on the
bootstrap
sampling variance-covariance matrix.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use a sample dataset for illustration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create the data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;860541&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;^2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;^2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x, m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify a simple regression model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(lavaan)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## This is lavaan 0.6-12
## lavaan is FREE software! Please report any bugs.
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mod &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m ~ a * x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;y ~ b * m + cp * x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab := a * b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; and fit it with bootstrap confidence
intervals:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8970&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sem&lt;/span&gt;(mod, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dat, fixed.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           se &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boot&amp;#34;&lt;/span&gt;, bootstrap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s focus on the confidence intervals of
the indirect effect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parameterEstimates&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standardizedSolution&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Unstandardized&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;est[7, ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   lhs op rhs label   est    se     z pvalue ci.lower ci.upper
## 7  ab := a*b    ab 0.025 0.015 1.686  0.092    0.001    0.059
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Standardized&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std[7, ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   lhs op rhs label est.std    se     z pvalue ci.lower ci.upper
## 7  ab := a*b    ab   0.088 0.049 1.774  0.076   -0.009    0.185
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;They lead to different conclusions.&lt;/p&gt;
&lt;p&gt;As shown below, the confidence interval
of the unstandardized indirect effect
is percentile confidence interval that
is asymmetric, as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;est[7, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.lower&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.upper&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; est[7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;est&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##      ci.lower   ci.upper
## 7 -0.02364024 0.03392409
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, the confidence interval of the
standardized indirect effect is symmetric:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std[7, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.lower&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.upper&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; std[7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;est.std&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##      ci.lower   ci.upper
## 7 -0.09699904 0.09699904
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This behavior has been discussed
in the &lt;a href=&#34;https://groups.google.com/g/lavaan&#34;&gt;Google group for&lt;code&gt;lavaan&lt;/code&gt;&lt;/a&gt; and
so is known, but not &amp;ldquo;well-known&amp;rdquo; because
I met many users who were not aware of this,
especially when they use bootstrapping to
get the confidence intervals for indirect
effects but found that the confidence
intervals of unstandardized and
standardized indirect effect led to different
conclusions, as in the example above.&lt;/p&gt;
&lt;p&gt;A solution already exists in &lt;code&gt;lavaan&lt;/code&gt;.
Users can use
&lt;code&gt;bootstrapLavaan()&lt;/code&gt; and get the bootstrap
confidence intervals for many results,
including
the output of standardized solution.&lt;/p&gt;
&lt;p&gt;We first define a function to extract
the standardized indirect effect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fct &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(fit) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lavaan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;standardizedSolution&lt;/span&gt;(fit)[7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;est.std&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then update the fit object to disable
standard error because we only need the
point estimates and then call
&lt;code&gt;bootstrapLavaan()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(fit, se &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8970&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_boot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrapLavaan&lt;/span&gt;(fit0, R &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;, FUN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fct)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The percentile confidence interval
can then be formed by &lt;code&gt;quantile()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Note that &lt;code&gt;lavaan()&lt;/code&gt; does not use &lt;code&gt;quantile()&lt;/code&gt; but
use the approach by &lt;code&gt;boot.ci()&lt;/code&gt;. The resulting
interval can be slightly different from that by &lt;code&gt;quantile()&lt;/code&gt;.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(fit_boot[, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;.025&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.975&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##        2.5%       97.5% 
## 0.004372947 0.196203435
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, this is inconvenient because
we need to write
custom function, and
bootstrapping was done twice unless
we store both the unstandardized and
standardized solutions in the custom
function used when calling
&lt;code&gt;bootstrapLavaan()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I wrote the function
&lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html&#34;&gt;&lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt;&lt;/a&gt;, available in
the package &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/&#34;&gt;&lt;code&gt;semhelpinghands&lt;/code&gt;&lt;/a&gt;, for this
particular
case that I sometimes encounter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A model is already fitted with
&lt;code&gt;se = &amp;quot;boot&amp;quot;&lt;/code&gt; and so bootstrap confidence
intervals are already available for the
unstandardized estimates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to get the bootstrap
confidence intervals for the
standardized solution &lt;em&gt;without doing the bootstrapping again&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This would be useful to
me because some of my projects involve large
samples with missing data. and bootstrapping
takes appreciable time even with
parallelization.&lt;/p&gt;
&lt;p&gt;This is how to use this function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(semhelpinghands)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_boot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standardizedSolution_boot_ci&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -c(9, 10) is used to remove the delta-method CIs from&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the printout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_boot[, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   lhs op rhs label est.std    se      z pvalue boot.ci.lower boot.ci.upper
## 1   m  ~   x     a   0.232 0.105  2.213  0.027         0.015         0.425
## 2   y  ~   m     b   0.379 0.083  4.541  0.000         0.204         0.541
## 3   y  ~   x    cp   0.103 0.092  1.117  0.264        -0.079         0.281
## 4   m ~~   m         0.946 0.048 19.527  0.000         0.819         0.999
## 5   y ~~   y         0.828 0.073 11.403  0.000         0.660         0.940
## 6   x ~~   x         1.000 0.000     NA     NA            NA            NA
## 7  ab := a*b    ab   0.088 0.049  1.774  0.076         0.004         0.196
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;boot.ci&lt;/code&gt; intervals are &amp;ldquo;true&amp;rdquo;
bootstrap confidence intervals, formed
from the bootstrap estimates. The
bootstrap confidence interval for
the standardized indirect effect
([0.004, 0.196])
and that for the unstandardized
indirect effect ([0.001, 0.059])
now lead to the same conclusion.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt; works
like &lt;code&gt;standardizedSolution()&lt;/code&gt;,
but extracts the stored bootstrap estimates,
get the standardized solution from each
set of estimates, and use them to form
the bootstrap confidence intervals for
the standardized solution.&lt;/p&gt;
&lt;p&gt;By default, the bootstrap standardized
solution is also stored in the attribute
&lt;code&gt;boot_est_std&lt;/code&gt;. They can be extracted
to examine the distribution. For example,
the bootstrap standardized indirect effects
can be extracted and plotted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_boot_est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(std_boot, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boot_est_std&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_indirect_boot_est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; std_boot_est[, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(std_indirect_boot_est)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;qqnorm&lt;/span&gt;(std_indirect_boot_est)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;qqline&lt;/span&gt;(std_indirect_boot_est)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/index_files/figure-html/unnamed-chunk-14-2.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This function is simple to use, at least for
me. No need to write custom function,
and no need to do bootstrapping twice.
In most cases, I don&amp;rsquo;t even need to
specify any additional arguments.&lt;/p&gt;
&lt;p&gt;More about this function can be found
in the &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html&#34;&gt;vignette&lt;/a&gt; for
&lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If any bug in &lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt;
was found, I would appreciate submitting
it as a &lt;a href=&#34;https://github.com/sfcheung/semhelpinghands/issues&#34;&gt;GitHub issue&lt;/a&gt;.  😄
&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Show Options Set by lavaan</title>
      <link>https://blogonresearch.github.io/post/2022-09-26-show-options-set-by-lavaan/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-26-show-options-set-by-lavaan/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;code&gt;lavaan&lt;/code&gt; is a convenient tool for doing
structural equation modelling in R
(Rosseel, 2012). One
of its strength is having “prepackaged”
estimators, which are shortcuts to a set
of options, such as “ML”, “MLR”, “MLMVS”,
and others (Savalei &amp;amp; Rosseel, 2022).
It also tries to set
default values for options based on the
model and data.&lt;/p&gt;
&lt;p&gt;However, probably due to my not-so-good
memory, I sometimes forgot what the settings
are for a model. Therefore, in the
package &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/&#34;&gt;&lt;code&gt;semhelpinghands&lt;/code&gt;&lt;/a&gt;,
I wrote the function &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html&#34;&gt;&lt;code&gt;show_more_options()&lt;/code&gt;&lt;/a&gt;
to show some of the settings of the output of
&lt;code&gt;lavaan()&lt;/code&gt; and its wrappers, such as
&lt;code&gt;sem()&lt;/code&gt; and &lt;code&gt;cfa()&lt;/code&gt;.[1]&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;show_more_options()&lt;/code&gt; is
very easy to use … because it accepts
only one argument, the output of &lt;code&gt;lavaan()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is an example based on the example of
&lt;code&gt;lavaan::cfa()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(lavaan)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## This is lavaan 0.6-12
## lavaan is FREE software! Please report any bugs.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HSmodel &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;visual  =~ x1 + x2 + x3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;textual =~ x4 + x5 + x6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;speed   =~ x7 + x8 + x9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cfa&lt;/span&gt;(HSmodel,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HolzingerSwineford1939)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To show the major options, just pass the output
to &lt;code&gt;show_more_options()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(semhelpinghands)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual  
##  Estimator(s)                        default ML      
##  Standard Error (SE)                 default standard
##  Model Test Statistic(s)             default standard
##  How Missing Data is Handled         default listwise
##  Information Matrix (for SE)         default expected
##  Information Matrix (for Model Test) default expected
##  Mean Structure                      default No      
##  &#39;x&#39; Fixed                           default FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The column &lt;code&gt;Call&lt;/code&gt; shows whether the
default setting is used for each row,
based of the call used when fitting the
model. However, it is not always clear
to me what the default values are.&lt;/p&gt;
&lt;p&gt;The column &lt;code&gt;Actual&lt;/code&gt; shows the values
extracted by &lt;code&gt;lavaan::lavInspect()&lt;/code&gt; or
from the &lt;code&gt;Options&lt;/code&gt; slot. These are what
the default values stand for in the
fitted model.&lt;/p&gt;
&lt;p&gt;Many of the entries are either
(a) already available in the output of
&lt;code&gt;summary()&lt;/code&gt;, or (b) can be deduced from
the output. However, I would like to have
a table for quick reference, hence I
wrote this function.&lt;/p&gt;
&lt;p&gt;Suppose &lt;code&gt;&amp;quot;MLR&amp;quot;&lt;/code&gt; is used as the estimator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_MLR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cfa&lt;/span&gt;(HSmodel,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HolzingerSwineford1939,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               estimator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MLR&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit_MLR)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual            
##  Estimator(s)                        MLR     ML                
##  Standard Error (SE)                 default robust.huber.white
##  Model Test Statistic(s)             default yuan.bentler.mplus
##  How Missing Data is Handled         default listwise          
##  Information Matrix (for SE)         default observed          
##  Information Matrix (for Model Test) default observed          
##  Mean Structure                      default No                
##  &#39;x&#39; Fixed                           default FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shows the exact names of the
options (e.g., &lt;code&gt;&amp;quot;robust.huber.white&amp;quot;&lt;/code&gt;
and &lt;code&gt;&amp;quot;yuan.bentler.mplus&amp;quot;&lt;/code&gt;). They can
complement the more readable output
of &lt;code&gt;summary()&lt;/code&gt; if we need to manually
set these options, or want to know
which values these options refer to when
consulting the help page.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;summary()&lt;/code&gt; reports that
&lt;code&gt;&amp;quot;Sandwich&amp;quot;&lt;/code&gt; is the method used for
standard errors, and &lt;code&gt;show_more_options()&lt;/code&gt;
shows that the exact name in the option
is &lt;code&gt;&amp;quot;robust.huber.white&amp;quot;&lt;/code&gt;. This is useful
because the word &lt;code&gt;&amp;quot;sandwich&amp;quot;&lt;/code&gt; does not
appear in the help page of &lt;code&gt;lavOptions()&lt;/code&gt;,
while the word &lt;code&gt;&amp;quot;robust.huber.white&amp;quot;&lt;/code&gt; does.
Some users may not know what &lt;code&gt;&amp;quot;Sandwich&amp;quot;&lt;/code&gt;
stands for.&lt;/p&gt;
&lt;p&gt;This is a dataset for a path model,
with missing data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8745315&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x, m, y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_data&lt;span style=&#34;color:#a6e22e&#34;&gt;[c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_data&lt;span style=&#34;color:#a6e22e&#34;&gt;[c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suppose we use only the default options
to fit a path model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_model &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m ~ a * x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;y ~ b * m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab := a * b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_path &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sem&lt;/span&gt;(path_model,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit_path)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual  
##  Estimator(s)                        default ML      
##  Standard Error (SE)                 default standard
##  Model Test Statistic(s)             default standard
##  How Missing Data is Handled         default listwise
##  Information Matrix (for SE)         default expected
##  Information Matrix (for Model Test) default expected
##  Mean Structure                      default No      
##  &#39;x&#39; Fixed                           default TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shows that, by default,
the mean structure is not modelled,
listwise selection is used to handle
missing data, and
&lt;code&gt;x&lt;/code&gt; variables (exogenous covariates,
&lt;code&gt;x&lt;/code&gt; in this example)
are treated as fixed. This can be verified
by the parameter estimates, in which
the variance of &lt;code&gt;x&lt;/code&gt; is a fixed
parameter and hence has no standard
error and no &lt;em&gt;p&lt;/em&gt;-value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parameterEstimates&lt;/span&gt;(fit_path)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##   lhs op rhs label   est    se     z pvalue ci.lower ci.upper
## 1   m  ~   x     a 0.075 0.078 0.966  0.334   -0.077    0.228
## 2   y  ~   m     b 0.248 0.119 2.081  0.037    0.014    0.482
## 3   m ~~   m       0.550 0.080 6.856  0.000    0.393    0.708
## 4   y ~~   y       0.745 0.109 6.856  0.000    0.532    0.958
## 5   x ~~   x       0.967 0.000    NA     NA    0.967    0.967
## 6  ab := a*b    ab 0.019 0.021 0.876  0.381   -0.023    0.060
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we set missing to &lt;code&gt;&amp;quot;FIML&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_path_fiml &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sem&lt;/span&gt;(path_model,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     missing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FIML&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit_path_fiml)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual  
##  Estimator(s)                        default ML      
##  Standard Error (SE)                 default standard
##  Model Test Statistic(s)             default standard
##  How Missing Data is Handled         FIML    ml      
##  Information Matrix (for SE)         default observed
##  Information Matrix (for Model Test) default observed
##  Mean Structure                      default Yes     
##  &#39;x&#39; Fixed                           default TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; variables are still treated as fixed,
but now mean structure is modelled
(required for FIML, full information
maximum likelihood), even though I did
not explicitly ask for it.&lt;/p&gt;
&lt;p&gt;Only options I think are likely needed
(by me) are included
in the output.[2]
More may be added in
the future. In any case, if other options
are needed, they can be
retrieved by &lt;code&gt;lavaan::lavInspect()&lt;/code&gt; or
from the &lt;code&gt;Options&lt;/code&gt; slot of the output.
In most cases I
myself encountered, all I want is a simple
function that is easy to remember and no
need to set any arguments other than
the &lt;code&gt;lavaan&lt;/code&gt; output. If I need something
else, I will just extract the information
myself.&lt;/p&gt;
&lt;p&gt;This function was inspired by a script
I wrote to enumerate the options set by
the prepackaged shortcuts. Interested
readers can read &lt;a href=&#34;https://groups.google.com/g/lavaan/c/6oLwoboi-vQ/m/IQLAXChPAwAJ&#34;&gt;this thread&lt;/a&gt;
at the &lt;a href=&#34;https://groups.google.com/g/lavaan&#34;&gt;Google Group for &lt;code&gt;lavaan&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;https://gist.github.com/sfcheung/baa5e43c32d4763b859f5338a1738d79&#34;&gt;this gist&lt;/a&gt;,
to check how options will be set for
different
combinations of estimator, data, and
some other options.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a href=&#34;#references&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references hanging-indent&#34;&gt;
&lt;div id=&#34;ref-lavaan_2012&#34;&gt;
&lt;p&gt;Rosseel, Y. (2012). lavaan: An R package for structural equation modeling. &lt;em&gt;Journal of Statistical Software&lt;/em&gt;, &lt;em&gt;48&lt;/em&gt;(2), 1–36. &lt;a href=&#34;https://doi.org/10.18637/jss.v048.i02&#34;&gt;https://doi.org/10.18637/jss.v048.i02&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-savalei_computational_2022&#34;&gt;
&lt;p&gt;Savalei, V., &amp;amp; Rosseel, Y. (2022). Computational options for standard errors and test statistics with incomplete normal and nonnormal data in SEM. &lt;em&gt;Structural Equation Modeling: A Multidisciplinary Journal&lt;/em&gt;, &lt;em&gt;29&lt;/em&gt;(2), 163–181. &lt;a href=&#34;https://doi.org/10.1080/10705511.2021.1877548&#34;&gt;https://doi.org/10.1080/10705511.2021.1877548&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To be precise, any object of the class &lt;code&gt;lavaan&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The information matrices are technical but I occasionally need them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

        
        </description>
    </item>
    
    <item>
      <title>My Own Style in R</title>
      <link>https://blogonresearch.github.io/post/2022-09-24-my-own-style-in-r/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-24-my-own-style-in-r/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Although I have written programs
since I were a high school student,
when computer monitor could only display
one color, I have no formal training in
programming, and I rarely worked with
others in developing a solution until
recently. The problem: I
did not write with a consistent
and professional style. I am pretty sure
that my code will look &amp;ldquo;ugly&amp;rdquo; to
professional programmers.&lt;/p&gt;
&lt;p&gt;That said, I do have a loose style, one
that suits my own situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I work on small screen frequently, sometimes
even on my mobile phone. I wrote the
documentation of some packages on my mobile
phone, and even this post was largely drafted
on my phone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My main tasks are research and teaching,
among other tasks. I can easily forget
some style rules I set for coding. I need
something simple and easy to remember.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideally, code should be easy, or at least
not too difficult, to comprehend by future
me with minimal
comments. What looks &lt;em&gt;nature&lt;/em&gt;
to me myself is of the top priority.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, this is my style, with me as the main user
and reader:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For code, I use a
line width of 60 to 70. For documentation,
I am more aggressive and use a line width of
40.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the same reason, I use two spaces for
indentation. A four-space indentation is too
&amp;ldquo;expensive&amp;rdquo; to me.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfct &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x^2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;I like using double-click to select a
name. This does not work if periods are
used inside a name. Therefore, I no longer
use periods in a name, except for S3 methods.
If necessary, I use underscores.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this_is_long_name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;I found it difficult to remember the case
I used for a name. So, I stick to lowercase
letters
unless I am &lt;em&gt;very&lt;/em&gt; certain that I can remember
that I used uppercase letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;rsquo;t like camel case. It is OK for
language that is not case sensitive, like
Visual Basic and SPSS syntax commands, but is
inconvenient for case sensitive languages like
R.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I don&amp;#39;t like camel case.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thisIsNotWhatIDo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I prefer this:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this_is_what_i_do &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Long function names are acceptable with
me. With autocompletion in many IDEs, it
is not important to use short names.
Being easy to remember &lt;em&gt;part&lt;/em&gt; of a name is
important. An abbreviation is not easy to
remember unless it is commonly used (e.g.,
SD).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is easy to remember&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;factor_loadings&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# These variants are not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fload&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;facload&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;facload&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fl&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;I wrote stuff in Python occasionally. I like
the Python style indentation, which is
easy to read. So I use that
style for my R code too.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;for &lt;/span&gt;(j in &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Do something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Do something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Do something else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I never, ever, use any automatic stylers to
reformat code. They make changes that are
tracked by Git but have nothing to do with the
content. I &lt;em&gt;may&lt;/em&gt; use them, but only when
finalizing the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is also why I care little about
word wrap. Irregular line widths are
acceptable for me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extra whitespace are OK with me. Readability
is the main goal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I may do this:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I use double quotes for string literals. I
have to use two keys &amp;hellip; but the habit is too
difficult to break that I don&amp;rsquo;t bother changing
it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last &amp;ldquo;rule&amp;rdquo;: I can break any of the rules,
as long as the code is readable without the
need to know any rules. 😄
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also have a GitHub repo for my personal
style, in case I forgot the rules:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sfcheung/rstylesf&#34;&gt;https://github.com/sfcheung/rstylesf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, please pardon me if you find my code for
packages at odd with professional style. I
myself is the main reader and maintainer of
the packages. What work for me matters.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Customize R GUI For Windows</title>
      <link>https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Many people use RStudio, and some even
mistaken RStudio as R. I mainly work
on Windows machines and I did try
RStudio for a while a few years ago.
However, I switched back to default R
GUI for Windows that
comes with R for Windows and used
it along with light-weight code editors,
for personal reasons. RStudio is good,
but has many features that I don&amp;rsquo;t need.
Although I now use VS Code as my main IDE
for R, I still use R GUI for
Windows a lot. It is light-weight,
came with base installation, and
is customizable. Simple but good enough
for some tasks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_startup.png&#34; alt=&#34;R Default GUI&#34;&gt;&lt;/p&gt;
&lt;p&gt;The console above is not the default
one. I like dark theme and
single-document interface (SDI). I keep only
a limited numbers of windows on my
desktop and I never group windows in the
taskbar. SDI is much more efficient for
me to locate the window I need.&lt;/p&gt;
&lt;p&gt;The configuration can be set in
Edit-&amp;gt;Preferences:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_configuration_annotated.png&#34; alt=&#34;Rgui configuration&#34;&gt;&lt;/p&gt;
&lt;p&gt;The configuration is saved in the
&lt;code&gt;Rconsole&lt;/code&gt; file in the folder &lt;code&gt;etc&lt;/code&gt;
in R&amp;rsquo;s installation folder. Whenever
I upgrade to a new version of R, I simply
copy this file to the same folder in the
new installation of R to have my
preferred configuration. No need to set
the configuration again. (I&amp;rsquo;ve just
found that I haven&amp;rsquo;t changes this
configuration for over five years!)&lt;/p&gt;
&lt;p&gt;Another feature I like is customizing
the menu bar. I use &lt;code&gt;devtools&lt;/code&gt; a lot,
and would love to call them from the
pulldown menu &amp;hellip; well, not really.
I rarely use the mouse to access the
pulldown menu. I use the keyboard
most of the time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_devtools_menu.png&#34; alt=&#34;R GUI pulldown menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;To add a menu, we can use a script and two functions.&lt;/p&gt;
&lt;p&gt;The following function add a menu called &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAdd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;devtools&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a menu is added, items can be added by
&lt;code&gt;utils::winMenuAddItem()&lt;/code&gt;. For example, the following
call add &lt;code&gt;check&lt;/code&gt; to the menu &lt;code&gt;devtools&lt;/code&gt;. If selected,
the call &lt;code&gt;devtools::check()&lt;/code&gt; will be executed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAddItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;devtools&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;check&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;devtools::check()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the screenshot above showed, most of
the items I added to &lt;code&gt;devtools&lt;/code&gt; are those
functions (menu items) in RStudio
(as far as I recalled &amp;hellip; as I haven&amp;rsquo;t used
RStudio to develop package for a long
time).&lt;/p&gt;
&lt;p&gt;Most common tasks that can be done through
R code can be converted to a menu item.
For example, I don&amp;rsquo;t like using the pulldown
menu to change working directory. I can
quickly copy the path to a folder using keyboard
only (alt-D and then control-C in
Explorer). Therefore, I have the following
menu item added to the R GUI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAddItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Utils&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setwd from clipboard&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setwd(readClipboard());getwd()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;setwd(readClipboard())&lt;/code&gt; changes the working
directory to the folder I copied to
clipboard. &lt;code&gt;getwd()&lt;/code&gt; is added just to
confirm the change.&lt;/p&gt;
&lt;p&gt;I sometimes open several instances of
R GUI. To differentiate them, I use
different color schemes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_four_instances.png&#34; alt=&#34;Four instances of R GUI&#34;&gt;&lt;/p&gt;
&lt;p&gt;This can be done inside R GUI too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAddItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Style&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lime Green and Light Golden&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utils::loadRconsole(&amp;#39;D:/My_Settings/Rconsole_lime_green_and_light_golden&amp;#39;)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;utils::loadRconsole()&lt;/code&gt; is used to load
the R GUI configuration stored in a
file. This file can be created by
saving the
settings in the R GUI configuration
dialog above to a file. In the above
example, the settings are stored in
the file &lt;code&gt;Rconsole_lime_green_and_light_golden&lt;/code&gt;.
I have four such files, storing distinct
color schemes.&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;Rconsole&lt;/code&gt; for the color scheme
and SDI, I would like to have custom
menus when I start R GUI. This can be done
by adding code like the following to
the &lt;code&gt;Rprofile.site&lt;/code&gt; file in the &lt;code&gt;etc&lt;/code&gt;
folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RS_LOCAL_PEER&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (.Platform&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;GUI &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rgui&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tryCatch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:/My_Settings/add_style_menu.R&amp;#34;&lt;/span&gt;), error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(e) e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wrote this a long long time ago and I
cannot recall their purposes. I believe
&lt;code&gt;Sys.getenv(&amp;quot;RS_LOCAL_PEER&amp;quot;) == &amp;quot;&amp;quot;&lt;/code&gt; is
used to check whether a session is
launched in RStudio. &lt;code&gt;.Platform$GUI == &amp;quot;Rgui&amp;quot;&lt;/code&gt;
is used to check whether an R session
is launched by the default R GUI. I still
occasionally use RStudio and the menus
I created should not be added if an R
session is launched inside RStudio.
I used &lt;code&gt;tryCatch()&lt;/code&gt; just in case there
are issues that I overlooked.&lt;/p&gt;
&lt;p&gt;So, whenever I install a new copy or version
of R, I just copy and paste the customized
&lt;code&gt;Rconsole&lt;/code&gt; and &lt;code&gt;Rprofile.site&lt;/code&gt; files
to &lt;code&gt;etc&lt;/code&gt;. I can then happily have my
preferred environment. Having the
code for menu groups stored in other
files allow me to update them without
editing &lt;code&gt;Rprofile.site&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hope you find these tips useful &amp;hellip;
if you are R GUI users like me. :)&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>One Function or Many Functions</title>
      <link>https://blogonresearch.github.io/post/2022-09-14-one-function-or-many-functions/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-14-one-function-or-many-functions/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;I am thinking about the differences
between R and SPSS in doing analysis:
one function for one analysis, and
several functions for one analysis.&lt;/p&gt;
&lt;p&gt;Though not always the case, in R, it is
common to do an analysis using several
functions. One of them is the &amp;ldquo;main&amp;rdquo;
function that do the main analysis.
Other functions are used to extract
information or compute other statistics.&lt;/p&gt;
&lt;p&gt;For example, to do multiple regression,
this is what we may do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a Test Dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;586045&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  x2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;x2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Do regression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt;(y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x2, dat)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main analysis is done by &lt;code&gt;lm()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then use other functions on the
output of &lt;code&gt;lm()&lt;/code&gt;. For example, we can use
&lt;code&gt;summary()&lt;/code&gt; to print commonly requested
results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(lm_out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ x1 + x2, data = dat)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -36.807 -10.733   0.153   9.472  37.611 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)   
## (Intercept) -20.7634    12.0270  -1.726  0.08746 . 
## x1            2.8688     1.6483   1.740  0.08495 . 
## x2            2.5771     0.8555   3.012  0.00331 **
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 15.69 on 97 degrees of freedom
## Multiple R-squared:  0.1113,	Adjusted R-squared:  0.09295 
## F-statistic: 6.072 on 2 and 97 DF,  p-value: 0.003276
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Confidence intervals and variance-covariance
matrix of the estimates can be obtained
by &lt;code&gt;confint()&lt;/code&gt; and &lt;code&gt;vcov()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;confint&lt;/span&gt;(lm_out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##                   2.5 %   97.5 %
## (Intercept) -44.6335974 3.106785
## x1           -0.4025881 6.140222
## x2            0.8791251 4.275063
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vcov&lt;/span&gt;(lm_out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##             (Intercept)            x1           x2
## (Intercept)  144.647827 -13.347713331 -7.460851584
## x1           -13.347713   2.716868988 -0.005532551
## x2            -7.460852  -0.005532551  0.731913160
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are many functions for other statistics,
such as influential statistics and model
comparison.&lt;/p&gt;
&lt;p&gt;In SPSS, to do analysis, we usually use a
dialog box from the pull down menu,
select variables, check some checkboxes,
use some buttons to open other dialog
boxes and set other options, click OK,
and all the requested results are in
the output.&lt;/p&gt;
&lt;p&gt;I used to think that this approach is
due to the graphical user interface (GUI),
which is the strength of SPSS. I forgot
that (a) the GUI is a &amp;ldquo;syntax generator,&amp;rdquo;
and (b) the format of SPSS syntax we have
nowadays is very similar to that in SPSS
before it has a GUI. Actually, when I
first learned SPSS in 90&amp;rsquo;s, I did not even have
access to a PC version with text menu.
Syntax command was the only way to do analysis
in SPSS. For example, &lt;code&gt;REGRESSION&lt;/code&gt; is
the command, and all the checkboxes
and options are values for subcommands,
like arguments in R functions.&lt;/p&gt;
&lt;p&gt;So, the common way we do analysis in
SPSS, with one command for one analysis,
is not due to the GUI. It has always been
this way, at least in the version I used
in early 90&amp;rsquo;s, before systems like Windows
became popular.&lt;/p&gt;
&lt;p&gt;So, for an analysis, such as multiple
regression, one function, or many functions?&lt;/p&gt;
&lt;p&gt;When I write functions or develop packages,
I generally adopt the
do-one-thing-and-do-it-well principle,
though what constitutes &amp;ldquo;one thing&amp;rdquo;
is not always clear. This principle make
it easy for me to write, debug, and
maintain a function or package.&lt;/p&gt;
&lt;p&gt;However, for users who are used to using
GUI, using one function to do many things
in an analysis is conceptually similar
to using a dialog box, thought without
the dialog box.
The many-function approach does not fit
well with the experience in using a dialog box.&lt;/p&gt;
&lt;p&gt;In R, we certainly can write a function
that calls other functions, simulating
commands like &lt;code&gt;REGRESSION&lt;/code&gt; in SPSS.&lt;/p&gt;
&lt;p&gt;So, I think this is not a debate
of which approach is better. In R, we
can do both, and let the users do analysis
in whatever approach they like. For
development, the do-one-thing-and-do-it-well
approach is a better approach. However,
for users, especially when developing
GUI, the one-function approach may be
more convenient to the users. The function
in the one-function approach, like
&lt;code&gt;REGRESSION&lt;/code&gt;, is like a wrapper of
a collection of functions: an interface
to them.&lt;/p&gt;
&lt;p&gt;For example, we can write an R function
similar to &lt;code&gt;REGRESSION&lt;/code&gt; in SPSS. In SPSS,
if all the default options are what we need,
this command is sufficient:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REGRESSION
 /DEPENDENT y
 /ENTER x1 x2.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To request confidence intervals
(&lt;code&gt;confint()&lt;/code&gt; in R) and the variance-covariance
matrix of the estimates (&lt;code&gt;vcov()&lt;/code&gt; in R),
this will do:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REGRESSION
 /STATISTICS DEFAULT BCOV CI(95)
 /DEPENDENT y
 /ENTER x1 x2.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A similar function can be written in R:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;regression&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dat,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           dep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ivs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x2&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can write it in a more &amp;ldquo;R-way&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;regression&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dat,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x2)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default printout is something similar to
SPSS. It can be a list of tables (data frames)
and a print method for printing the output.&lt;/p&gt;
&lt;p&gt;Actually, we can still say
that we are adopting the do-one-thing-and-do-it-well
approach, although the &amp;ldquo;one thing&amp;rdquo; is
&amp;ldquo;an interface to a set of functions.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I am not trying to argue that we should
use this or that approach. They are not
mutually exclusive. I am just
wondering how
to make using R by writing scripts more
accessible to users who are used to GUI,
while still keeping the
do-one-thing-and-do-it-well principle.
Writing these kinds of wrappers may also
make it easier to create GUIs for them.
For example, as long as &lt;code&gt;...&lt;/code&gt; is not
used, a generic function can be developed
to check the arguments of a function
using its definition and then
automatically generate a dialog
box for it. For a wrapper with
a lot of arguments, a configuration
file can be used to customize the
dialog box.&lt;/p&gt;
&lt;p&gt;P.S.: jamovi is already doing something
similar. Behind the dialog boxes are
kind of wrapper functions. However,
though can be used in console, the
modules are, naturally, supposed to be
used inside jamovi.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blogonresearch.github.io/about/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/about/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;This is a &amp;ldquo;revival&amp;rdquo; of an old blog of mine on psychological research and methodology
(hence the name &lt;em&gt;Blogonresearch&lt;/em&gt;). Just anything on research and methodology
that are useful to me, and maybe also useful to others.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Plotting Moderation Effects With ggplot2</title>
      <link>https://blogonresearch.github.io/post/2022-09-11-plotting-moderation-effects-with-ggplot2/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-11-plotting-moderation-effects-with-ggplot2/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;There are some R packages that help
researchers to plot moderation (interaction)
effects: The linear relations between
&lt;code&gt;x&lt;/code&gt; (independent variable /
predictor) and &lt;code&gt;y&lt;/code&gt; (dependent variable /
outcome variable) for
two or more levels of &lt;code&gt;w&lt;/code&gt; (moderator). For example, I
have been using &lt;a href=&#34;https://pbreheny.github.io/visreg/&#34;&gt;visreg&lt;/a&gt;
for multiple regression models fitted by &lt;code&gt;lm()&lt;/code&gt;
for a long time. It is simple to use and supports
both base R graphics and &lt;code&gt;ggplot2&lt;/code&gt;.
&lt;a href=&#34;https://sfcheung.github.io/stdmod/index.html&#34;&gt;stdmod&lt;/a&gt;,
which I maintained, also has the function
&lt;a href=&#34;https://sfcheung.github.io/stdmod/articles/plotmod.html&#34;&gt;plotmod&lt;/a&gt;
for plotting simple effects in moderated regression.
For structural equation modelling, &lt;a href=&#34;https://github.com/simsem/semTools/wiki&#34;&gt;semTools&lt;/a&gt;
can be used to plot interaction for latent
variables using &lt;a href=&#34;https://rdrr.io/cran/semTools/man/plotProbe.html&#34;&gt;plotProbe()&lt;/a&gt;.
&lt;code&gt;plotProbe()&lt;/code&gt; can also be used to on observed
variables using this &lt;a href=&#34;https://groups.google.com/g/lavaan/c/h_LHQUFbx0k/m/jmQwRJEqBAAJ&#34;&gt;workaround&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there may be case in which all
we need is just two or more lines, and
all we have are the simple effects: Two
or more sets of intercepts of slopes.&lt;/p&gt;
&lt;p&gt;This is how to plot the simple effect:&lt;/p&gt;
&lt;p&gt;Suppose we want to plot the simple
effects of &lt;code&gt;x&lt;/code&gt;  on &lt;code&gt;y&lt;/code&gt; conditional on &lt;code&gt;w&lt;/code&gt;
(the moderator).
From the output of some functions, we
have the slopes and intercepts
when &lt;code&gt;w&lt;/code&gt; is &amp;ldquo;Low&amp;rdquo; or &amp;ldquo;High&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt; is &amp;ldquo;Low&amp;rdquo;: intercept = 2,  slope = 1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt; is &amp;ldquo;High&amp;rdquo;: intercept = 3, slope = 2&lt;/p&gt;
&lt;p&gt;Write a simple function to compute the points&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Simple regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xyline &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x, a, b) {a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set the range for &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Range of x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compute the predicted values of &lt;code&gt;y&lt;/code&gt; at
the lower and upper limit of the range
of &lt;code&gt;x&lt;/code&gt;, for each level of &lt;code&gt;w&lt;/code&gt;, when
all other predictors of &lt;code&gt;y&lt;/code&gt; in the model,
if any, are equal to zero:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate the two points when moderator = &amp;#34;Low&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(Moderator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Low&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xyline&lt;/span&gt;(x, a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate the two points when moderator = &amp;#34;High&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(Moderator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;High&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xyline&lt;/span&gt;(x, a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Combine the datasets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(dat0, dat1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   Moderator  x  y
## 1       Low  0  2
## 2       Low 10 12
## 3      High  0  3
## 4      High 10 23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Draw the lines using &lt;code&gt;ggplot2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(dat, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Moderator)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_line&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_manual&lt;/span&gt;(values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Low&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;High&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-11-plotting-moderation-effects-with-ggplot2/index_files/figure-html/plot_original-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;This plot can then be modified as necessary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Independent Variable&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dependent Variable&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-11-plotting-moderation-effects-with-ggplot2/index_files/figure-html/plot_edited-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;This solution can be used for multiple
regression or structural equation modelling.&lt;/p&gt;
&lt;p&gt;Though not as elegant as using
packages devoted to plotting moderation
effects, this solution may be good
enough for some simple scenarios. I
believe it can be further improved. However,
if we want more, maybe it is better to
use packages like &lt;code&gt;semTools&lt;/code&gt; and
&lt;code&gt;visreg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;P.S.: This post is based on a suggestion I
posted to the Google Group for &lt;code&gt;lavaan&lt;/code&gt;.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Reviving an Old Blog</title>
      <link>https://blogonresearch.github.io/post/2022-09-11-the-first-post/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-11-the-first-post/</guid>
      <description>
        
          
          
          
        
        
        


&lt;p&gt;This is a “revival” of an old blog of mine on psychological research and methodology
(hence the name &lt;em&gt;Blogonresearch&lt;/em&gt;). Just anything on research and methodology
that are useful to me, and maybe also useful to others.&lt;/p&gt;
&lt;p&gt;I tried &lt;code&gt;distill&lt;/code&gt;. I liked it. However, there are some problems
with the RSS and so I decided to try &lt;code&gt;blogdown&lt;/code&gt; and &lt;code&gt;hugo&lt;/code&gt;, again.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://blogonresearch.github.io/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/archive/</guid>
      <description>
        
          
          
          
        
        
        
        
        </description>
    </item>
    
  </channel>
</rss>