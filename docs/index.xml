<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blogonresearch</title>
<link>https://blogonresearch.github.io/index.html</link>
<atom:link href="https://blogonresearch.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.280</generator>
<lastBuildDate>Tue, 27 Sep 2022 16:00:00 GMT</lastBuildDate>
<item>
  <title>Bootstrap Confidence Intervals for Standardized Solution in lavaan</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/index.html</link>
  <description><![CDATA[ 




<p><code>lavaan</code> supports bootstrap confidence intervals for free and user-defined parameters. This is useful especially for parameter estimates that may not be approximately normally distributed unless the sample size is very large.</p>
<p>However, it is known, though not well-known enough in my opinion, that, even if bootstrap confidence intervals are requested, the confidence intervals reported in the standardized solution are not bootstrap confidence intervals as in tools like <code>PROCESS</code> for standardized effects like standardized indirect effects, but are symmetric delta-method confidence intervals based on the bootstrap sampling variance-covariance matrix.</p>
<p>Let’s use a sample dataset for illustration:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Create the data</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">860541</span>)</span>
<span id="cb1-3">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-4">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n)</span>
<span id="cb1-5">m <span class="ot" style="color: #003B4F;">&lt;-</span> .<span class="dv" style="color: #AD0000;">4</span> <span class="sc" style="color: #5E5E5E;">*</span> x <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-6">y <span class="ot" style="color: #003B4F;">&lt;-</span> .<span class="dv" style="color: #AD0000;">4</span> <span class="sc" style="color: #5E5E5E;">*</span> m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-7">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">10</span> <span class="sc" style="color: #5E5E5E;">*</span> x, <span class="at" style="color: #657422;">m =</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> m, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> y)</span></code></pre></div>
</div>
<p>We specify a simple regression model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(lavaan)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This is lavaan 0.6-13
lavaan is FREE software! Please report any bugs.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb4-2"><span class="st" style="color: #20794D;">"</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;">m ~ a * x</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;">y ~ b * m + cp * x</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;">ab := a * b</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;">"</span></span></code></pre></div>
</div>
<p>… and fit it with bootstrap confidence intervals (2023-01-28: Code and results updated for <code>lavaan</code> 0.6-13, <code>iseed</code> is used instead of <code>set.seed()</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sem</span>(mod, <span class="at" style="color: #657422;">data =</span> dat, <span class="at" style="color: #657422;">fixed.x =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb5-2">           <span class="at" style="color: #657422;">se =</span> <span class="st" style="color: #20794D;">"boot"</span>, <span class="at" style="color: #657422;">bootstrap =</span> <span class="dv" style="color: #AD0000;">2000</span>,</span>
<span id="cb5-3">           <span class="at" style="color: #657422;">iseed =</span> <span class="dv" style="color: #AD0000;">8970</span>)</span></code></pre></div>
</div>
<div class="cell">

</div>
<p>Let’s focus on the confidence intervals of the indirect effect:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">est <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">parameterEstimates</span>(fit)</span>
<span id="cb6-2">std <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">standardizedSolution</span>(fit)</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># Unstandardized</span></span>
<span id="cb6-4">est[<span class="dv" style="color: #AD0000;">7</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label   est    se     z pvalue ci.lower ci.upper
7  ab := a*b    ab 0.025 0.015 1.686  0.092    0.001    0.059</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Standardized</span></span>
<span id="cb8-2">std[<span class="dv" style="color: #AD0000;">7</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label est.std    se     z pvalue ci.lower ci.upper
7  ab := a*b    ab   0.088 0.049 1.774  0.076   -0.009    0.185</code></pre>
</div>
</div>
<p>They lead to different conclusions.</p>
<p>As shown below, the confidence interval of the unstandardized indirect effect is percentile confidence interval that is asymmetric, as expected:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">est[<span class="dv" style="color: #AD0000;">7</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ci.lower"</span>, <span class="st" style="color: #20794D;">"ci.upper"</span>)] <span class="sc" style="color: #5E5E5E;">-</span> est[<span class="dv" style="color: #AD0000;">7</span>, <span class="st" style="color: #20794D;">"est"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ci.lower   ci.upper
7 -0.02364024 0.03392409</code></pre>
</div>
</div>
<p>However, the confidence interval of the standardized indirect effect is symmetric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">std[<span class="dv" style="color: #AD0000;">7</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ci.lower"</span>, <span class="st" style="color: #20794D;">"ci.upper"</span>)] <span class="sc" style="color: #5E5E5E;">-</span> std[<span class="dv" style="color: #AD0000;">7</span>, <span class="st" style="color: #20794D;">"est.std"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ci.lower   ci.upper
7 -0.09699904 0.09699904</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>This behavior has been discussed in the <a href="https://groups.google.com/g/lavaan">Google group for<code>lavaan</code></a> and so is known, but not “well-known” because I met many users who were not aware of this, especially when they use bootstrapping to get the confidence intervals for indirect effects but found that the confidence intervals of unstandardized and standardized indirect effect led to different conclusions, as in the example above.</p>
<p>A solution already exists in <code>lavaan</code>. Users can use <code>bootstrapLavaan()</code> and get the bootstrap confidence intervals for many results, including the output of standardized solution.</p>
<p>We first define a function to extract the standardized indirect effect:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">fct <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(fit) {</span>
<span id="cb14-2">    lavaan<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">standardizedSolution</span>(fit)[<span class="dv" style="color: #AD0000;">7</span>, <span class="st" style="color: #20794D;">"est.std"</span>]</span>
<span id="cb14-3">  }</span></code></pre></div>
</div>
<p>We then update the fit object to disable standard error because we only need the point estimates and then call <code>bootstrapLavaan()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">fit0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">update</span>(fit, <span class="at" style="color: #657422;">se =</span> <span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb15-2">fit_boot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bootstrapLavaan</span>(fit0, <span class="at" style="color: #657422;">R =</span> <span class="dv" style="color: #AD0000;">2000</span>, <span class="at" style="color: #657422;">FUN =</span> fct, <span class="at" style="color: #657422;">iseed =</span> <span class="dv" style="color: #AD0000;">8970</span>)</span></code></pre></div>
</div>
<div class="cell">

</div>
<p>The percentile confidence interval can then be formed by <code>quantile()</code>.</p>
<p>(Note that <code>lavaan()</code> does not use <code>quantile()</code> but use the approach by <code>boot.ci()</code>. The resulting interval can be slightly different from that by <code>quantile()</code>.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">quantile</span>(fit_boot[, <span class="dv" style="color: #AD0000;">1</span>], <span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">025</span>, .<span class="dv" style="color: #AD0000;">975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       2.5%       97.5% 
0.004372947 0.196203435 </code></pre>
</div>
</div>
<p>However, this is inconvenient because we need to write custom function, and bootstrapping was done twice unless we store both the unstandardized and standardized solutions in the custom function used when calling <code>bootstrapLavaan()</code>.</p>
<p>I wrote the function <a href="https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html"><code>standardizedSolution_boot_ci()</code></a>, available in the package <a href="https://sfcheung.github.io/semhelpinghands/"><code>semhelpinghands</code></a>, for this particular case that I sometimes encounter:</p>
<ul>
<li><p>A model is already fitted with <code>se = "boot"</code> and so bootstrap confidence intervals are already available for the unstandardized estimates.</p></li>
<li><p>I want to get the bootstrap confidence intervals for the standardized solution <em>without doing the bootstrapping again</em>.</p></li>
</ul>
<p>This would be useful to me because some of my projects involve large samples with missing data. and bootstrapping takes appreciable time even with parallelization.</p>
<p>This is how to use this function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">library</span>(semhelpinghands)</span>
<span id="cb18-2">std_boot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">standardizedSolution_boot_ci</span>(fit)</span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;"># -c(9, 10) is used to remove the delta-method CIs from</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># the printout</span></span>
<span id="cb18-5">std_boot[, <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label est.std    se      z pvalue boot.ci.lower boot.ci.upper
1   m  ~   x     a   0.232 0.105  2.213  0.027         0.015         0.425
2   y  ~   m     b   0.379 0.083  4.541  0.000         0.204         0.541
3   y  ~   x    cp   0.103 0.092  1.117  0.264        -0.079         0.281
4   m ~~   m         0.946 0.048 19.527  0.000         0.819         0.999
5   y ~~   y         0.828 0.073 11.403  0.000         0.660         0.940
6   x ~~   x         1.000 0.000     NA     NA            NA            NA
7  ab := a*b    ab   0.088 0.049  1.774  0.076         0.004         0.196</code></pre>
</div>
</div>
<p>The <code>boot.ci</code> intervals are “true” bootstrap confidence intervals, formed from the bootstrap estimates. The bootstrap confidence interval for the standardized indirect effect ([0.004, 0.196]) and that for the unstandardized indirect effect ([0.001, 0.059]) now lead to the same conclusion.</p>
<p><code>standardizedSolution_boot_ci()</code> works like <code>standardizedSolution()</code>, but extracts the stored bootstrap estimates, get the standardized solution from each set of estimates, and use them to form the bootstrap confidence intervals for the standardized solution.</p>
<p>By default, the bootstrap standardized solution is also stored in the attribute <code>boot_est_std</code>. They can be extracted to examine the distribution. For example, the bootstrap standardized indirect effects can be extracted and plotted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">std_boot_est <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">attr</span>(std_boot, <span class="st" style="color: #20794D;">"boot_est_std"</span>)</span>
<span id="cb20-2">std_indirect_boot_est <span class="ot" style="color: #003B4F;">&lt;-</span> std_boot_est[, <span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;">hist</span>(std_indirect_boot_est)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">qqnorm</span>(std_indirect_boot_est)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">qqline</span>(std_indirect_boot_est)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/index_files/figure-html/unnamed-chunk-14-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This function is simple to use, at least for me. No need to write custom function, and no need to do bootstrapping twice. In most cases, I don’t even need to specify any additional arguments.</p>
<p>More about this function can be found in the <a href="https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html">vignette</a> for <code>standardizedSolution_boot_ci()</code>.</p>
<p>If any bug in <code>standardizedSolution_boot_ci()</code> was found, I would appreciate submitting it as a <a href="https://github.com/sfcheung/semhelpinghands/issues">GitHub issue</a>. </p>



 ]]></description>
  <category>R</category>
  <category>lavaan</category>
  <category>bootstrapping</category>
  <category>confidence-intervals</category>
  <category>semhelpinghands</category>
  <category>standardized</category>
  <guid>https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/index.html</guid>
  <pubDate>Tue, 27 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Show Options Set by lavaan</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/show_options_set_by_lavaan/index.html</link>
  <description><![CDATA[ 




<p><code>lavaan</code> is a convenient tool for doing structural equation modelling in R <span class="citation" data-cites="lavaan_2012">(Rosseel, 2012)</span>. One of its strength is having “prepackaged” estimators, which are shortcuts to a set of options, such as “ML”, “MLR”, “MLMVS”, and others <span class="citation" data-cites="savalei_computational_2022">(Savalei &amp; Rosseel, 2022)</span>. It also tries to set default values for options based on the model and data.</p>
<p>However, probably due to my not-so-good memory, I sometimes forgot what the settings are for a model. Therefore, in the package <a href="https://sfcheung.github.io/semhelpinghands/"><code>semhelpinghands</code></a>, I wrote the function <a href="https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html"><code>show_more_options()</code></a> to show some of the settings of the output of <code>lavaan()</code> and its wrappers, such as <code>sem()</code> and <code>cfa()</code>.<sup>1</sup></p>
<p>The function <code>show_more_options()</code> is very easy to use … because it accepts only one argument, the output of <code>lavaan()</code>.</p>
<p>This is an example based on the example of <code>lavaan::cfa()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(lavaan)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This is lavaan 0.6-13
lavaan is FREE software! Please report any bugs.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">HSmodel <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb3-2"><span class="st" style="color: #20794D;">"</span></span>
<span id="cb3-3"><span class="st" style="color: #20794D;">visual  =~ x1 + x2 + x3</span></span>
<span id="cb3-4"><span class="st" style="color: #20794D;">textual =~ x4 + x5 + x6</span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;">speed   =~ x7 + x8 + x9</span></span>
<span id="cb3-6"><span class="st" style="color: #20794D;">"</span></span>
<span id="cb3-7">fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cfa</span>(HSmodel,</span>
<span id="cb3-8">           <span class="at" style="color: #657422;">data =</span> HolzingerSwineford1939)</span></code></pre></div>
</div>
<p>To show the major options, just pass the output to <code>show_more_options()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(semhelpinghands)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">show_more_options</span>(fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual  
 Estimator(s)                        default ML      
 Standard Error (SE)                 default standard
 Model Test Statistic(s)             default standard
 How Missing Data is Handled         default listwise
 Information Matrix (for SE)         default expected
 Information Matrix (for Model Test) default expected
 Mean Structure                      default No      
 'x' Fixed                           default FALSE   </code></pre>
</div>
</div>
<p>The column <code>Call</code> shows whether the default setting is used for each row, based of the call used when fitting the model. However, it is not always clear to me what the default values are.</p>
<p>The column <code>Actual</code> shows the values extracted by <code>lavaan::lavInspect()</code> or from the <code>Options</code> slot. These are what the default values stand for in the fitted model.</p>
<p>Many of the entries are either (a) already available in the output of <code>summary()</code>, or (b) can be deduced from the output. However, I would like to have a table for quick reference, hence I wrote this function.</p>
<p>Suppose <code>"MLR"</code> is used as the estimator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fit_MLR <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cfa</span>(HSmodel,</span>
<span id="cb6-2">               <span class="at" style="color: #657422;">data =</span> HolzingerSwineford1939,</span>
<span id="cb6-3">               <span class="at" style="color: #657422;">estimator =</span> <span class="st" style="color: #20794D;">"MLR"</span>)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">show_more_options</span>(fit_MLR)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual            
 Estimator(s)                        MLR     ML                
 Standard Error (SE)                 default robust.huber.white
 Model Test Statistic(s)             default yuan.bentler.mplus
 How Missing Data is Handled         default listwise          
 Information Matrix (for SE)         default observed          
 Information Matrix (for Model Test) default observed          
 Mean Structure                      default No                
 'x' Fixed                           default FALSE             </code></pre>
</div>
</div>
<p>The output shows the exact names of the options (e.g., <code>"robust.huber.white"</code> and <code>"yuan.bentler.mplus"</code>). They can complement the more readable output of <code>summary()</code> if we need to manually set these options, or want to know which values these options refer to when consulting the help page.</p>
<p>For example, <code>summary()</code> reports that <code>"Sandwich"</code> is the method used for standard errors, and <code>show_more_options()</code> shows that the exact name in the option is <code>"robust.huber.white"</code>. This is useful because the word <code>"sandwich"</code> does not appear in the help page of <code>lavOptions()</code>, while the word <code>"robust.huber.white"</code> does. Some users may not know what <code>"Sandwich"</code> stands for.</p>
<p>This is a dataset for a path model, with missing data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">8745315</span>)</span>
<span id="cb8-2">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb8-3">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n)</span>
<span id="cb8-4">m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">+</span> .<span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> x <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">0</span>, .<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb8-5">y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span> <span class="sc" style="color: #5E5E5E;">+</span> .<span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">0</span>, .<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb8-6">path_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(x, m, y)</span>
<span id="cb8-7">path_data[<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="st" style="color: #20794D;">"m"</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb8-8">path_data[<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">8</span>), <span class="st" style="color: #20794D;">"y"</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NA</span></span></code></pre></div>
</div>
<p>Suppose we use only the default options to fit a path model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">path_model <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;">"</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;">m ~ a * x</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;">y ~ b * m</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;">ab := a * b</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;">"</span></span>
<span id="cb9-7">fit_path <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sem</span>(path_model,</span>
<span id="cb9-8">                <span class="at" style="color: #657422;">data =</span> path_data)</span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;">show_more_options</span>(fit_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual  
 Estimator(s)                        default ML      
 Standard Error (SE)                 default standard
 Model Test Statistic(s)             default standard
 How Missing Data is Handled         default listwise
 Information Matrix (for SE)         default expected
 Information Matrix (for Model Test) default expected
 Mean Structure                      default No      
 'x' Fixed                           default TRUE    </code></pre>
</div>
</div>
<p>The output shows that, by default, the mean structure is not modelled, listwise selection is used to handle missing data, and <code>x</code> variables (exogenous covariates, <code>x</code> in this example) are treated as fixed. This can be verified by the parameter estimates, in which the variance of <code>x</code> is a fixed parameter and hence has no standard error and no <em>p</em>-value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">parameterEstimates</span>(fit_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label   est    se     z pvalue ci.lower ci.upper
1   m  ~   x     a 0.075 0.078 0.966  0.334   -0.077    0.228
2   y  ~   m     b 0.248 0.119 2.081  0.037    0.014    0.482
3   m ~~   m       0.550 0.080 6.856  0.000    0.393    0.708
4   y ~~   y       0.745 0.109 6.856  0.000    0.532    0.958
5   x ~~   x       0.967 0.000    NA     NA    0.967    0.967
6  ab := a*b    ab 0.019 0.021 0.876  0.381   -0.023    0.060</code></pre>
</div>
</div>
<p>Suppose we set missing to <code>"FIML"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">fit_path_fiml <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sem</span>(path_model,</span>
<span id="cb13-2">                     <span class="at" style="color: #657422;">data =</span> path_data,</span>
<span id="cb13-3">                     <span class="at" style="color: #657422;">missing =</span> <span class="st" style="color: #20794D;">"FIML"</span>)</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;">show_more_options</span>(fit_path_fiml)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual  
 Estimator(s)                        default ML      
 Standard Error (SE)                 default standard
 Model Test Statistic(s)             default standard
 How Missing Data is Handled         FIML    ml      
 Information Matrix (for SE)         default observed
 Information Matrix (for Model Test) default observed
 Mean Structure                      default Yes     
 'x' Fixed                           default TRUE    </code></pre>
</div>
</div>
<p><code>x</code> variables are still treated as fixed, but now mean structure is modelled (required for FIML, full information maximum likelihood), even though I did not explicitly ask for it.</p>
<p>Only options I think are likely needed (by me) are included in the output.<sup>2</sup> More may be added in the future. In any case, if other options are needed, they can be retrieved by <code>lavaan::lavInspect()</code> or from the <code>Options</code> slot of the output. In most cases I myself encountered, all I want is a simple function that is easy to remember and no need to set any arguments other than the <code>lavaan</code> output. If I need something else, I will just extract the information myself.</p>
<p>This function was inspired by a script I wrote to enumerate the options set by the prepackaged shortcuts. Interested readers can read <a href="https://groups.google.com/g/lavaan/c/6oLwoboi-vQ/m/IQLAXChPAwAJ">this thread</a> at the <a href="https://groups.google.com/g/lavaan">Google Group for <code>lavaan</code></a> and <a href="https://gist.github.com/sfcheung/baa5e43c32d4763b859f5338a1738d79">this gist</a>, to check how options will be set for different combinations of estimator, data, and some other options.</p>
<section id="references" class="level2">




</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-line-spacing="2">
<div id="ref-lavaan_2012" class="csl-entry">
Rosseel, Y. (2012). <span class="nocase">lavaan</span>: An <span>R</span> package for structural equation modeling. <em>Journal of Statistical Software</em>, <em>48</em>(2), 1–36. <a href="https://doi.org/10.18637/jss.v048.i02">https://doi.org/10.18637/jss.v048.i02</a>
</div>
<div id="ref-savalei_computational_2022" class="csl-entry">
Savalei, V., &amp; Rosseel, Y. (2022). Computational options for standard errors and test statistics with incomplete normal and nonnormal data in <span>SEM</span>. <em>Structural Equation Modeling: A Multidisciplinary Journal</em>, <em>29</em>(2), 163–181. <a href="https://doi.org/10.1080/10705511.2021.1877548">https://doi.org/10.1080/10705511.2021.1877548</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>To be precise, any object of the class <code>lavaan</code>.↩︎</p></li>
<li id="fn2"><p>The information matrices are technical but I occasionally need them.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>lavaan</category>
  <category>semhelpinghands</category>
  <guid>https://blogonresearch.github.io/posts/show_options_set_by_lavaan/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>My Own Style in R</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/my_own_style_in_r/index.html</link>
  <description><![CDATA[ 




<p>Although I have written programs since I were a high school student, when computer monitor could only display one color, I have no formal training in programming, and I rarely worked with others in developing a solution until recently. The problem: I did not write with a consistent and professional style. I am pretty sure that my code will look “ugly” to professional programmers.</p>
<p>That said, I do have a loose style, one that suits my own situation:</p>
<ul>
<li><p>I work on small screen frequently, sometimes even on my mobile phone. I wrote the documentation of some packages on my mobile phone, and even this post was largely drafted on my phone.</p></li>
<li><p>My main tasks are research and teaching, among other tasks. I can easily forget some style rules I set for coding. I need something simple and easy to remember.</p></li>
<li><p>Ideally, code should be easy, or at least not too difficult, to comprehend by future me with minimal comments. What looks <em>nature</em> to me myself is of the top priority.</p></li>
</ul>
<p>So, this is my style, with me as the main user and reader:</p>
<ul>
<li><p>For code, I use a line width of 60 to 70. For documentation, I am more aggressive and use a line width of 40.</p></li>
<li><p>For the same reason, I use two spaces for indentation. A four-space indentation is too “expensive” to me.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">tmpfct <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb1-2">    x<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-3">  }</span></code></pre></div>
</div>
<ul>
<li>I like using double-click to select a name. This does not work if periods are used inside a name. Therefore, I no longer use periods in a name, except for S3 methods. If necessary, I use underscores.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">this_is_long_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<ul>
<li>I found it difficult to remember the case I used for a name. So, I stick to lowercase letters unless I am <em>very</em> certain that I can remember that I used uppercase letters.</li>
</ul>
<p>I don’t like camel case. It is OK for language that is not case sensitive, like Visual Basic and SPSS syntax commands, but is inconvenient for case sensitive languages like R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># I don't like camel case.</span></span>
<span id="cb3-2">thisIsNotWhatIDo <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># I prefer this:</span></span>
<span id="cb3-4">this_is_what_i_do <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<ul>
<li>Long function names are acceptable with me. With autocompletion in many IDEs, it is not important to use short names. Being easy to remember <em>part</em> of a name is important. An abbreviation is not easy to remember unless it is commonly used (e.g., SD).</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># This is easy to remember</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">factor_loadings</span>()</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># These variants are not</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">fload</span>()</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">facload</span>()</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">facload</span>()</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">fl</span>()</span></code></pre></div>
</div>
<ul>
<li>I wrote stuff in Python occasionally. I like the Python style indentation, which is easy to read. So I use that style for my R code too.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="cf" style="color: #003B4F;">for</span> (j <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>) {</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># Do something</span></span>
<span id="cb5-3">  }</span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) {</span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;"># Do something</span></span>
<span id="cb5-6">  } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;"># Do something else</span></span>
<span id="cb5-8">  }</span></code></pre></div>
</div>
<ul>
<li><p>I never, ever, use any automatic stylers to reformat code. They make changes that are tracked by Git but have nothing to do with the content. I <em>may</em> use them, but only when finalizing the code.</p></li>
<li><p>This is also why I care little about word wrap. Irregular line widths are acceptable for me.</p></li>
<li><p>Extra whitespace are OK with me. Readability is the main goal.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># I may do this:</span></span>
<span id="cb6-2">x  <span class="ot" style="color: #003B4F;">&lt;-</span>   <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-3">y0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">100</span></span></code></pre></div>
</div>
<ul>
<li><p>I use double quotes for string literals. I have to use two keys … but the habit is too difficult to break that I don’t bother changing it.</p></li>
<li><p>The last “rule”: I can break any of the rules, as long as the code is readable without the need to know any rules.</p></li>
</ul>
<p>I also have a GitHub repo for my personal style, in case I forgot the rules:</p>
<p><a href="https://github.com/sfcheung/rstylesf" class="uri">https://github.com/sfcheung/rstylesf</a></p>
<p>So, please pardon me if you find my code for packages at odd with professional style. I myself is the main reader and maintainer of the packages. What work for me matters.</p>



 ]]></description>
  <category>R</category>
  <category>code-style</category>
  <guid>https://blogonresearch.github.io/posts/my_own_style_in_r/index.html</guid>
  <pubDate>Fri, 23 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Customize R GUI For Windows</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/index.html</link>
  <description><![CDATA[ 




<p>Many people use RStudio, and some even mistaken RStudio as R. I mainly work on Windows machines and I did try RStudio for a while a few years ago. However, I switched back to default R GUI for Windows that comes with R for Windows and used it along with light-weight code editors, for personal reasons. RStudio is good, but has many features that I don’t need. Although I now use VS Code as my main IDE for R, I still use R GUI for Windows a lot. It is light-weight, came with base installation, and is customizable. Simple but good enough for some tasks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_startup.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">R Default GUI</figcaption><p></p>
</figure>
</div>
<p>The console above is not the default one. I like dark theme and single-document interface (SDI). I keep only a limited numbers of windows on my desktop and I never group windows in the taskbar. SDI is much more efficient for me to locate the window I need.</p>
<p>The configuration can be set in Edit-&gt;Preferences:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_configuration_annotated.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Rgui configuration</figcaption><p></p>
</figure>
</div>
<p>The configuration is saved in the <code>Rconsole</code> file in the folder <code>etc</code> in R’s installation folder. Whenever I upgrade to a new version of R, I simply copy this file to the same folder in the new installation of R to have my preferred configuration. No need to set the configuration again. (I’ve just found that I haven’t changes this configuration for over five years!)</p>
<p>Another feature I like is customizing the menu bar. I use <code>devtools</code> a lot, and would love to call them from the pulldown menu … well, not really. I rarely use the mouse to access the pulldown menu. I use the keyboard most of the time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_devtools_menu.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">R GUI pulldown menu</figcaption><p></p>
</figure>
</div>
<p>To add a menu, we can use a script and two functions.</p>
<p>The following function add a menu called <code>devtools</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">winMenuAdd</span>(<span class="st" style="color: #20794D;">"devtools"</span>)</span></code></pre></div>
</div>
<p>After a menu is added, items can be added by <code>utils::winMenuAddItem()</code>. For example, the following call add <code>check</code> to the menu <code>devtools</code>. If selected, the call <code>devtools::check()</code> will be executed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">winMenuAddItem</span>(<span class="st" style="color: #20794D;">"devtools"</span>,</span>
<span id="cb2-2">                      <span class="st" style="color: #20794D;">"check"</span>,</span>
<span id="cb2-3">                      <span class="st" style="color: #20794D;">"devtools::check()"</span>)</span></code></pre></div>
</div>
<p>As the screenshot above showed, most of the items I added to <code>devtools</code> are those functions (menu items) in RStudio (as far as I recalled … as I haven’t used RStudio to develop package for a long time).</p>
<p>Most common tasks that can be done through R code can be converted to a menu item. For example, I don’t like using the pulldown menu to change working directory. I can quickly copy the path to a folder using keyboard only (alt-D and then control-C in Explorer). Therefore, I have the following menu item added to the R GUI:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">winMenuAddItem</span>(<span class="st" style="color: #20794D;">"Utils"</span>,</span>
<span id="cb3-2">  <span class="st" style="color: #20794D;">"setwd from clipboard"</span>,</span>
<span id="cb3-3">  <span class="st" style="color: #20794D;">"setwd(readClipboard());getwd()"</span>)</span></code></pre></div>
</div>
<p><code>setwd(readClipboard())</code> changes the working directory to the folder I copied to clipboard. <code>getwd()</code> is added just to confirm the change.</p>
<p>I sometimes open several instances of R GUI. To differentiate them, I use different color schemes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_four_instances.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Four instances of R GUI</figcaption><p></p>
</figure>
</div>
<p>This can be done inside R GUI too:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">winMenuAddItem</span>(<span class="st" style="color: #20794D;">"Style"</span>,</span>
<span id="cb4-2">  <span class="st" style="color: #20794D;">"Lime Green and Light Golden"</span>,</span>
<span id="cb4-3">  <span class="st" style="color: #20794D;">"utils::loadRconsole('D:/My_Settings/Rconsole_lime_green_and_light_golden')"</span>)</span></code></pre></div>
</div>
<p><code>utils::loadRconsole()</code> is used to load the R GUI configuration stored in a file. This file can be created by saving the settings in the R GUI configuration dialog above to a file. In the above example, the settings are stored in the file <code>Rconsole_lime_green_and_light_golden</code>. I have four such files, storing distinct color schemes.</p>
<p>Like <code>Rconsole</code> for the color scheme and SDI, I would like to have custom menus when I start R GUI. This can be done by adding code like the following to the <code>Rprofile.site</code> file in the <code>etc</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="cf" style="color: #003B4F;">if</span> ((<span class="fu" style="color: #4758AB;">Sys.getenv</span>(<span class="st" style="color: #20794D;">"RS_LOCAL_PEER"</span>) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">&amp;&amp;</span> (.Platform<span class="sc" style="color: #5E5E5E;">$</span>GUI <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Rgui"</span>)) {</span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;">tryCatch</span>(<span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"D:/My_Settings/add_style_menu.R"</span>), <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) e)</span>
<span id="cb5-3">  }</span></code></pre></div>
</div>
<p>I wrote this a long long time ago and I cannot recall their purposes. I believe <code>Sys.getenv("RS_LOCAL_PEER") == ""</code> is used to check whether a session is launched in RStudio. <code>.Platform$GUI == "Rgui"</code> is used to check whether an R session is launched by the default R GUI. I still occasionally use RStudio and the menus I created should not be added if an R session is launched inside RStudio. I used <code>tryCatch()</code> just in case there are issues that I overlooked.</p>
<p>So, whenever I install a new copy or version of R, I just copy and paste the customized <code>Rconsole</code> and <code>Rprofile.site</code> files to <code>etc</code>. I can then happily have my preferred environment. Having the code for menu groups stored in other files allow me to update them without editing <code>Rprofile.site</code>.</p>
<p>Hope you find these tips useful … if you are R GUI users like me. :)</p>



 ]]></description>
  <category>R</category>
  <category>gui</category>
  <guid>https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/index.html</guid>
  <pubDate>Mon, 19 Sep 2022 16:00:00 GMT</pubDate>
  <media:content url="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_startup.png" medium="image" type="image/png" height="124" width="144"/>
</item>
<item>
  <title>One Function or Many Functions</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/one_function_or_many_functions/index.html</link>
  <description><![CDATA[ 




<p>I am thinking about the differences between R and SPSS in doing analysis: one function for one analysis, and several functions for one analysis.</p>
<p>Though not always the case, in R, it is common to do an analysis using several functions. One of them is the “main” function that do the main analysis. Other functions are used to extract information or compute other statistics.</p>
<p>For example, to do multiple regression, this is what we may do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Create a Test Dataset</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">586045</span>)</span>
<span id="cb1-3">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-4">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x1 =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb1-5">                  <span class="at" style="color: #657422;">x2 =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-6">dat<span class="sc" style="color: #5E5E5E;">$</span>y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> dat<span class="sc" style="color: #5E5E5E;">$</span>x1 <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">*</span> dat<span class="sc" style="color: #5E5E5E;">$</span>x2 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Do regression</span></span>
<span id="cb1-8">lm_out <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(y <span class="sc" style="color: #5E5E5E;">~</span> x1 <span class="sc" style="color: #5E5E5E;">+</span> x2, dat)</span></code></pre></div>
</div>
<p>The main analysis is done by <code>lm()</code>.</p>
<p>We then use other functions on the output of <code>lm()</code>. For example, we can use <code>summary()</code> to print commonly requested results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">summary</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ x1 + x2, data = dat)

Residuals:
    Min      1Q  Median      3Q     Max 
-36.807 -10.733   0.153   9.472  37.611 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)   
(Intercept) -20.7634    12.0270  -1.726  0.08746 . 
x1            2.8688     1.6483   1.740  0.08495 . 
x2            2.5771     0.8555   3.012  0.00331 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 15.69 on 97 degrees of freedom
Multiple R-squared:  0.1113,    Adjusted R-squared:  0.09295 
F-statistic: 6.072 on 2 and 97 DF,  p-value: 0.003276</code></pre>
</div>
</div>
<p>Confidence intervals and variance-covariance matrix of the estimates can be obtained by <code>confint()</code> and <code>vcov()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">confint</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  2.5 %   97.5 %
(Intercept) -44.6335974 3.106785
x1           -0.4025881 6.140222
x2            0.8791251 4.275063</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">vcov</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            (Intercept)            x1           x2
(Intercept)  144.647827 -13.347713331 -7.460851584
x1           -13.347713   2.716868988 -0.005532551
x2            -7.460852  -0.005532551  0.731913160</code></pre>
</div>
</div>
<p>There are many functions for other statistics, such as influential statistics and model comparison.</p>
<p>In SPSS, to do analysis, we usually use a dialog box from the pull down menu, select variables, check some checkboxes, use some buttons to open other dialog boxes and set other options, click OK, and all the requested results are in the output.</p>
<p>I used to think that this approach is due to the graphical user interface (GUI), which is the strength of SPSS. I forgot that (a) the GUI is a “syntax generator,” and (b) the format of SPSS syntax we have nowadays is very similar to that in SPSS before it has a GUI. Actually, when I first learned SPSS in 90’s, I did not even have access to a PC version with text menu. Syntax command was the only way to do analysis in SPSS. For example, <code>REGRESSION</code> is the command, and all the checkboxes and options are values for subcommands, like arguments in R functions.</p>
<p>So, the common way we do analysis in SPSS, with one command for one analysis, is not due to the GUI. It has always been this way, at least in the version I used in early 90’s, before systems like Windows became popular.</p>
<p>So, for an analysis, such as multiple regression, one function, or many functions?</p>
<p>When I write functions or develop packages, I generally adopt the do-one-thing-and-do-it-well principle, though what constitutes “one thing” is not always clear. This principle make it easy for me to write, debug, and maintain a function or package.</p>
<p>However, for users who are used to using GUI, using one function to do many things in an analysis is conceptually similar to using a dialog box, thought without the dialog box. The many-function approach does not fit well with the experience in using a dialog box.</p>
<p>In R, we certainly can write a function that calls other functions, simulating commands like <code>REGRESSION</code> in SPSS.</p>
<p>So, I think this is not a debate of which approach is better. In R, we can do both, and let the users do analysis in whatever approach they like. For development, the do-one-thing-and-do-it-well approach is a better approach. However, for users, especially when developing GUI, the one-function approach may be more convenient to the users. The function in the one-function approach, like <code>REGRESSION</code>, is like a wrapper of a collection of functions: an interface to them.</p>
<p>For example, we can write an R function similar to <code>REGRESSION</code> in SPSS. In SPSS, if all the default options are what we need, this command is sufficient:</p>
<pre><code>REGRESSION
 /DEPENDENT y
 /ENTER x1 x2.</code></pre>
<p>To request confidence intervals (<code>confint()</code> in R) and the variance-covariance matrix of the estimates (<code>vcov()</code> in R), this will do:</p>
<pre><code>REGRESSION
 /STATISTICS DEFAULT BCOV CI(95)
 /DEPENDENT y
 /ENTER x1 x2.</code></pre>
<p>A similar function can be written in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">regression</span>(<span class="at" style="color: #657422;">data =</span> dat,</span>
<span id="cb10-2">           <span class="at" style="color: #657422;">dep =</span> <span class="st" style="color: #20794D;">"y"</span>,</span>
<span id="cb10-3">           <span class="at" style="color: #657422;">ivs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x1"</span>, <span class="st" style="color: #20794D;">"x2"</span>))</span></code></pre></div>
</div>
<p>We can write it in a more “R-way”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">regression</span>(<span class="at" style="color: #657422;">data =</span> dat,</span>
<span id="cb11-2">           <span class="at" style="color: #657422;">model =</span> y <span class="sc" style="color: #5E5E5E;">~</span> x1 <span class="sc" style="color: #5E5E5E;">+</span> x2)</span></code></pre></div>
</div>
<p>The default printout is something similar to SPSS. It can be a list of tables (data frames) and a print method for printing the output.</p>
<p>Actually, we can still say that we are adopting the do-one-thing-and-do-it-well approach, although the “one thing” is “an interface to a set of functions.”</p>
<p>I am not trying to argue that we should use this or that approach. They are not mutually exclusive. I am just wondering how to make using R by writing scripts more accessible to users who are used to GUI, while still keeping the do-one-thing-and-do-it-well principle. Writing these kinds of wrappers may also make it easier to create GUIs for them. For example, as long as <code>...</code> is not used, a generic function can be developed to check the arguments of a function using its definition and then automatically generate a dialog box for it. For a wrapper with a lot of arguments, a configuration file can be used to customize the dialog box.</p>
<p>P.S.: jamovi is already doing something similar. Behind the dialog boxes are kind of wrapper functions. However, though can be used in console, the modules are, naturally, supposed to be used inside jamovi.</p>



 ]]></description>
  <category>R</category>
  <category>gui</category>
  <guid>https://blogonresearch.github.io/posts/one_function_or_many_functions/index.html</guid>
  <pubDate>Tue, 13 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting Moderation Effects With ggplot2</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/plot_mod/index.html</link>
  <description><![CDATA[ 




<p>There are some R packages that help researchers to plot moderation (interaction) effects: The linear relations between <code>x</code> (independent variable / predictor) and <code>y</code> (dependent variable / outcome variable) for two or more levels of <code>w</code> (moderator). For example, I have been using <a href="https://pbreheny.github.io/visreg/">visreg</a> for multiple regression models fitted by <code>lm()</code> for a long time. It is simple to use and supports both base R graphics and <code>ggplot2</code>. <a href="https://sfcheung.github.io/stdmod/index.html">stdmod</a>, which I maintained, also has the function <a href="https://sfcheung.github.io/stdmod/articles/plotmod.html">plotmod</a> for plotting simple effects in moderated regression. For structural equation modelling, <a href="https://github.com/simsem/semTools/wiki">semTools</a> can be used to plot interaction for latent variables using <a href="https://rdrr.io/cran/semTools/man/plotProbe.html">plotProbe()</a>. <code>plotProbe()</code> can also be used to on observed variables using this <a href="https://groups.google.com/g/lavaan/c/h_LHQUFbx0k/m/jmQwRJEqBAAJ">workaround</a>.</p>
<p>However, there may be case in which all we need is just two or more lines, and all we have are the simple effects: Two or more sets of intercepts of slopes.</p>
<p>This is how to plot the simple effect:</p>
<p>Suppose we want to plot the simple effects of <code>x</code> on <code>y</code> conditional on <code>w</code> (the moderator). From the output of some functions, we have the slopes and intercepts when <code>w</code> is “Low” or “High”:</p>
<p><code>w</code> is “Low”: intercept = 2, slope = 1</p>
<p><code>w</code> is “High”: intercept = 3, slope = 2</p>
<p>Write a simple function to compute the points</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Simple regression model</span></span>
<span id="cb1-2">xyline <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, a, b) {a <span class="sc" style="color: #5E5E5E;">+</span> b <span class="sc" style="color: #5E5E5E;">*</span> x}</span></code></pre></div>
</div>
<p>Set the range for <code>x</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Range of x</span></span>
<span id="cb2-2">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</div>
<p>Compute the predicted values of <code>y</code> at the lower and upper limit of the range of <code>x</code>, for each level of <code>w</code>, when all other predictors of <code>y</code> in the model, if any, are equal to zero:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Generate the two points when moderator = "Low"</span></span>
<span id="cb3-2">dat0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Moderator =</span> <span class="st" style="color: #20794D;">"Low"</span>,</span>
<span id="cb3-3">                   <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb3-4">                   <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">xyline</span>(x, <span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># Generate the two points when moderator = "High"</span></span>
<span id="cb3-6">dat1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Moderator =</span> <span class="st" style="color: #20794D;">"High"</span>,</span>
<span id="cb3-7">                   <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb3-8">                   <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">xyline</span>(x, <span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
</div>
<p>Combine the datasets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbind</span>(dat0, dat1)</span>
<span id="cb4-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Moderator  x  y
1       Low  0  2
2       Low 10 12
3      High  0  3
4      High 10 23</code></pre>
</div>
</div>
<p>Draw the lines using <code>ggplot2</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb6-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">color =</span> Moderator)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">            <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">            <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Low"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="st" style="color: #20794D;">"High"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"red"</span>))</span>
<span id="cb6-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/plot_mod/index_files/figure-html/plot_original-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This plot can then be modified as necessary:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">p2 <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Independent Variable"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-2">          <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Dependent Variable"</span>)</span>
<span id="cb7-3">p2</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/plot_mod/index_files/figure-html/cover-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This solution can be used for multiple regression or structural equation modelling.</p>
<p>Though not as elegant as using packages devoted to plotting moderation effects, this solution may be good enough for some simple scenarios. I believe it can be further improved. However, if we want more, maybe it is better to use packages like <code>semTools</code> and <code>visreg</code>.</p>
<p>P.S.: This post is based on a suggestion I posted to the Google Group for <code>lavaan</code>.</p>



 ]]></description>
  <category>R</category>
  <category>moderation</category>
  <guid>https://blogonresearch.github.io/posts/plot_mod/index.html</guid>
  <pubDate>Sat, 10 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Reviving an Old Blog</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/the_first_post/index.html</link>
  <description><![CDATA[ 




<p>This is a “revival” of an old blog of mine on psychological research and methodology (hence the name <em>Blogonresearch</em>). Just anything on research and methodology that are useful to me, and maybe also useful to others.</p>
<p>Edit 2023-01-28: This is actually the “second revival” as I switched from Hugo to Quarto in early 2023.</p>



 ]]></description>
  <category>blog</category>
  <guid>https://blogonresearch.github.io/posts/the_first_post/index.html</guid>
  <pubDate>Sat, 10 Sep 2022 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
