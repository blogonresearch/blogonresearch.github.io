<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blogonresearch</title>
<link>https://blogonresearch.github.io/</link>
<atom:link href="https://blogonresearch.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog on psychological research and methodology.</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Fri, 13 Sep 2024 16:00:00 GMT</lastBuildDate>
<item>
  <title>Parallel Mediation in R: A Tutorial</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/manymome_parallel_mediation/</link>
  <description><![CDATA[ 





<p>This tutorial shows how to use the R package <a href="https://sfcheung.github.io/manymome"><code>manymome</code></a> <span class="citation" data-cites="cheung_manymome_2023">(S. F. Cheung &amp; Cheung, 2023)</span>, a flexible package for mediation analysis, to test indirect effects in a parallel mediation model fitted by multiple regression.</p>
<section id="pre-requisite" class="level1">
<h1>Pre-Requisite</h1>
<p>Readers are expected to have basic R skills and know how to fit a linear regression model using <code>lm()</code>.</p>
<p>The package <code>manymome</code> can be installed from CRAN:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manymome"</span>)</span></code></pre></div>
</section>
<section id="data" class="level1">
<h1>Data</h1>
<p>This is the data file for illustration, from <code>manymome</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(manymome)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data_parallel, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         x       m1       m2        y       c1       c2
1 9.652688 20.77622 8.977183 16.85574 2.385207 4.009182
2 9.011756 18.28393 6.518089 15.99256 2.585124 5.980229
3 9.343317 18.00133 6.271594 20.12393 2.667239 4.170771</code></pre>
</div>
</div>
</section>
<section id="a-parallel-mediation-model" class="level1">
<h1>A Parallel Mediation Model</h1>
<p>First we fit a parallel mediation model using only <code>x</code>, <code>m1</code>, <code>m2</code>, and <code>y</code>.</p>
<div class="cell" data-layout-align="center" data-fig-heigh="3">
<div class="cell-output-display">
<div id="fig-full-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-full-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_parallel_mediation/index_files/figure-html/fig-full-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-full-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: A Parallel Mediation Model
</figcaption>
</figure>
</div>
</div>
</div>
<p>In this model:</p>
<ul>
<li><p><code>x</code> is the predictor (independent variable).</p></li>
<li><p><code>y</code> is the outcome variable (dependent variable).</p></li>
<li><p><code>m1</code> and <code>m2</code> are the mediators.</p></li>
</ul>
<p>The goal is to compute and test the two indirect effects:</p>
<ul>
<li><p>From <code>x</code> to <code>y</code> through <code>m1</code>.</p></li>
<li><p>From <code>x</code> to <code>y</code> through <code>m2</code>.</p></li>
</ul>
</section>
<section id="fit-the-models-by-lm" class="level1">
<h1>Fit the Models by <code>lm()</code></h1>
<p>To estimate all the regression coefficients, just fit three regression models:</p>
<ul>
<li><p>Predict <code>m1</code> by <code>x</code> (Figure&nbsp;2).</p></li>
<li><p>Predict <code>m2</code> by <code>x</code> (Figure&nbsp;3).</p></li>
<li><p>Predict <code>y</code> by <code>m1</code>, <code>m2</code>, and <code>x</code> (Figure&nbsp;4).</p></li>
</ul>
<div class="cell" data-layout-align="center" data-fig-heigh="3">
<div class="cell-output-display">
<div id="fig-m1-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-m1-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_parallel_mediation/index_files/figure-html/fig-m1-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-m1-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: The Model Predicting <code>m1</code>
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center" data-fig-heigh="3">
<div class="cell-output-display">
<div id="fig-m2-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-m2-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_parallel_mediation/index_files/figure-html/fig-m2-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-m2-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: The Model Predicting <code>m2</code>
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center" data-fig-heigh="3">
<div class="cell-output-display">
<div id="fig-y-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-y-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_parallel_mediation/index_files/figure-html/fig-y-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-y-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: The Model Predicting <code>y</code>
</figcaption>
</figure>
</div>
</div>
</div>
<p>This can be easily done by <code>lm()</code> in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict m1</span></span>
<span id="cb4-2">model_m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x,</span>
<span id="cb4-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel)</span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict m2</span></span>
<span id="cb4-5">model_m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x,</span>
<span id="cb4-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel)</span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict y</span></span>
<span id="cb4-8">model_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> m1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x,</span>
<span id="cb4-9">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel)</span></code></pre></div>
</div>
<p>These are the regression results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model_m1)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = m1 ~ x, data = data_parallel)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   9.0203     1.1288   7.991 2.65e-12 ***
x             0.9247     0.1128   8.200 9.49e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.125 on 98 degrees of freedom
Multiple R-squared:  0.4069,    Adjusted R-squared:  0.4009 
F-statistic: 67.24 on 1 and 98 DF,  p-value: 9.488e-13</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model_m2)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = m2 ~ x, data = data_parallel)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   2.5066     1.1248   2.229 0.028128 *  
x             0.3921     0.1124   3.490 0.000726 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.121 on 98 degrees of freedom
Multiple R-squared:  0.1105,    Adjusted R-squared:  0.1015 
F-statistic: 12.18 on 1 and 98 DF,  p-value: 0.000726</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model_y)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = y ~ m1 + m2 + x, data = data_parallel)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)  
(Intercept)   2.4554     2.6015   0.944   0.3476  
m1            0.4784     0.1861   2.571   0.0117 *
m2            0.4684     0.1867   2.508   0.0138 *
x             0.3003     0.2646   1.135   0.2593  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 2.017 on 96 degrees of freedom
Multiple R-squared:  0.2823,    Adjusted R-squared:  0.2599 
F-statistic: 12.59 on 3 and 96 DF,  p-value: 5.212e-07</code></pre>
</div>
</div>
<p>The direct effect is the coefficient of <code>x</code> in the model predicting <code>y</code>, which is 0.300, and not significant.</p>
</section>
<section id="the-indirect-effects" class="level1">
<h1>The Indirect Effects</h1>
<p>The two indirect effects are the product of the <code>a1</code>-path and <code>b1</code>-path and that of the <code>a2</code>-path and <code>b2</code>-path, respectively:</p>
<ul>
<li><p><code>x</code> -&gt; <code>m1</code> -&gt; <code>y</code></p>
<ul>
<li>Computed by <code>a1</code> × <code>b1</code></li>
</ul></li>
<li><p><code>x</code> -&gt; <code>m2</code> -&gt; <code>y</code></p>
<ul>
<li>Computed by <code>a2</code> × <code>b2</code></li>
</ul></li>
</ul>
<p>To test these indirect effects, one common method is nonparametric bootstrapping <span class="citation" data-cites="cheung_comparison_2009">MacKinnon et al. (2002)</span>. This can be done easily by <code>indirect_effect()</code> from the package <code>manymome</code>.</p>
<section id="combine-the-regression-results" class="level2">
<h2 class="anchored" data-anchor-id="combine-the-regression-results">Combine the Regression Results</h2>
<p>We first combine the regression models by <a href="https://sfcheung.github.io/manymome/reference/lm2list.html"><code>lm2list()</code></a> into one object to represent the whole model (Figure&nbsp;1):<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">full_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm2list</span>(model_m1,</span>
<span id="cb11-2">                      model_m2,</span>
<span id="cb11-3">                      model_y)</span>
<span id="cb11-4">full_model</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
The models:
m1 ~ x
m2 ~ x
y ~ m1 + m2 + x</code></pre>
</div>
</div>
</section>
<section id="compute-and-test-the-indirect-effect" class="level2">
<h2 class="anchored" data-anchor-id="compute-and-test-the-indirect-effect">Compute and Test the Indirect Effect</h2>
<p>For this parallel mediation model, we can simply use <a href="https://sfcheung.github.io/manymome/reference/cond_indirect.html"><code>indirect_effect()</code></a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">ind1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb13-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb13-3">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span>,</span>
<span id="cb13-4">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model,</span>
<span id="cb13-5">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb13-6">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb13-7">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<p>These are the main arguments:</p>
<ul>
<li><p><code>x</code>: The name of the <code>x</code> variable, the start of the indirect path.</p></li>
<li><p><code>y</code>: The name of the <code>y</code> variable, the end of the indirect path.</p></li>
<li><p><code>m</code>: The name of the mediator, <code>m1</code> in the above example.</p></li>
<li><p><code>fit</code>: The regression models combined by <code>lm2list()</code>.</p></li>
<li><p><code>boot_ci</code>: If <code>TRUE</code>, bootstrap confidence interval will be formed.</p></li>
<li><p><code>R</code>, the number of bootstrap samples. It is fast for regression models and I recommend using at least 5000 bootstrap samples or even 10000, because the results may not be stable enough if indirect effect is close to zero <span class="citation" data-cites="cheung_semlbci_2023">(an example can be found in S. F. Cheung &amp; Pesigan, 2023)</span>.</p></li>
<li><p><code>seed</code>: The seed for the random number generator, to make the resampling reproducible. This argument should always be set when doing bootstrapping.</p></li>
</ul>
<p>By default, parallel processing will be used and a progress bar will be displayed.</p>
<p>The other indirect effect can be computed similarly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">ind2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb14-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb14-3">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span>,</span>
<span id="cb14-4">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model,</span>
<span id="cb14-5">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb14-6">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb14-7">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<p>Just typing the name of the output can print the major results</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ind1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                     
 Path:               x -&gt; m1 -&gt; y    
 Indirect Effect:    0.442           
 95.0% Bootstrap CI: [0.103 to 0.803]

Computation Formula:
  (b.m1~x)*(b.y~m1)
Computation:
  (0.92471)*(0.47840)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m1~x       0.925
 y~m1       0.478</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">ind2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                     
 Path:               x -&gt; m2 -&gt; y    
 Indirect Effect:    0.184           
 95.0% Bootstrap CI: [0.027 to 0.402]

Computation Formula:
  (b.m2~x)*(b.y~m2)
Computation:
  (0.39215)*(0.46844)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m2~x       0.392
 y~m2       0.468</code></pre>
</div>
</div>
<p>As shown above, the indirect effect through <code>m1</code> is 0.442. The 95% bootstrap confidence interval is [0.103; 0.803]. The indirect effect is positive and significant.</p>
<p>As shown above, the indirect effect through <code>m2</code> is 0.184. The 95% bootstrap confidence interval is [0.027; 0.402]. The indirect effect is positive and significant.</p>
<p>For transparency, the output also shows how the indirect effect was computed.</p>
</section>
<section id="standardized-indirect-effect" class="level2">
<h2 class="anchored" data-anchor-id="standardized-indirect-effect">Standardized Indirect Effect</h2>
<p>To compute and test the standardized indirect effect, with both the <code>x</code>-variable and <code>y</code>-variable standardized, add <code>standardized_x = TRUE</code> and <code>standardized_y = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">ind1_stdxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb19-2">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb19-3">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span>,</span>
<span id="cb19-4">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model,</span>
<span id="cb19-5">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb19-6">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb19-7">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>,,</span>
<span id="cb19-8">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardized_x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb19-9">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardized_y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-10">ind2_stdxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb19-11">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb19-12">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span>,</span>
<span id="cb19-13">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model,</span>
<span id="cb19-14">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb19-15">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb19-16">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>,,</span>
<span id="cb19-17">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardized_x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb19-18">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardized_y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>The results can be printed as usual:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">ind1_stdxy</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect (Both 'x' and 'y' Standardized) ==
                                     
 Path:               x -&gt; m1 -&gt; y    
 Indirect Effect:    0.189           
 95.0% Bootstrap CI: [0.045 to 0.340]

Computation Formula:
  (b.m1~x)*(b.y~m1)*sd_x/sd_y
Computation:
  (0.92471)*(0.47840)*(1.00306)/(2.34506)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m1~x       0.925
 y~m1       0.478

NOTE:
- The effects of the component paths are from the model, not
  standardized.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">ind2_stdxy</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect (Both 'x' and 'y' Standardized) ==
                                     
 Path:               x -&gt; m2 -&gt; y    
 Indirect Effect:    0.079           
 95.0% Bootstrap CI: [0.013 to 0.166]

Computation Formula:
  (b.m2~x)*(b.y~m2)*sd_x/sd_y
Computation:
  (0.39215)*(0.46844)*(1.00306)/(2.34506)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m2~x       0.392
 y~m2       0.468

NOTE:
- The effects of the component paths are from the model, not
  standardized.</code></pre>
</div>
</div>
<p>The standardized indirect effect through <code>m1</code> is 0.189. The 95% bootstrap confidence interval is [0.045; 0.340], significant.</p>
<p>The standardized indirect effect through <code>m2</code> is 0.079. The 95% bootstrap confidence interval is [0.013; 0.166], significant.</p>
</section>
</section>
<section id="total-indirect-effect" class="level1">
<h1>Total Indirect Effect</h1>
<p>Suppose we would like to compute the total indirect effects from <code>x</code> to <code>y</code> through the two parallel paths. This can be done by “adding” the indirect effects computed above, simply by using the <code>+</code> operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">ind_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ind2</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">ind_total</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                      
 Path:                x -&gt; m1 -&gt; y    
 Path:                x -&gt; m2 -&gt; y    
 Function of Effects: 0.626           
 95.0% Bootstrap CI:  [0.276 to 1.065]

Computation of the Function of Effects:
 (x-&gt;m1-&gt;y)
+(x-&gt;m2-&gt;y) 


Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.</code></pre>
</div>
</div>
<p>The standardized total indirect effect can be computed similarly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">ind_total_stdxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind1_stdxy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ind2_stdxy</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">ind_total_stdxy</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect (Both 'x' and 'y' Standardized) ==
                                      
 Path:                x -&gt; m1 -&gt; y    
 Path:                x -&gt; m2 -&gt; y    
 Function of Effects: 0.268           
 95.0% Bootstrap CI:  [0.122 to 0.431]

Computation of the Function of Effects:
 (x-&gt;m1-&gt;y)
+(x-&gt;m2-&gt;y) 


Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.</code></pre>
</div>
</div>
<p>The total indirect effect through the two paths is 0.626. The 95% bootstrap confidence interval is [0.276; 1.065], significant.</p>
<p>The total standardized indirect effect through the two paths is 0.268. The 95% bootstrap confidence interval is [0.122; 0.431]</p>
</section>
<section id="difference-in-indirect-effects" class="level1">
<h1>Difference in Indirect Effects</h1>
<p>The indirect effects through the two paths are substantially different (0.442 vs.&nbsp;0.184). Suppose we would like to compare the two paths by computing the <em>difference</em> in indirect effect and forming the bootstrap confidence interval of this difference. This can be done by literally computing the difference using the <code>-</code> operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">ind_diff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ind2</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">ind_diff</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                       
 Path:                x -&gt; m1 -&gt; y     
 Path:                x -&gt; m2 -&gt; y     
 Function of Effects: 0.259            
 95.0% Bootstrap CI:  [-0.165 to 0.659]

Computation of the Function of Effects:
 (x-&gt;m1-&gt;y)
-(x-&gt;m2-&gt;y) 


Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.</code></pre>
</div>
</div>
<p>Interestingly, despite the apparent magnitude of the difference, the two indirect effects are not significantly different, probably due to the small sample size (100).</p>
<p>The difference in standardized indirect effects (0.189 vs.&nbsp;0.079) can be computed similarly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">ind_stdxy_diff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind1_stdxy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ind2_stdxy</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">ind_stdxy_diff</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect (Both 'x' and 'y' Standardized) ==
                                       
 Path:                x -&gt; m1 -&gt; y     
 Path:                x -&gt; m2 -&gt; y     
 Function of Effects: 0.111            
 95.0% Bootstrap CI:  [-0.072 to 0.281]

Computation of the Function of Effects:
 (x-&gt;m1-&gt;y)
-(x-&gt;m2-&gt;y) 


Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.</code></pre>
</div>
</div>
</section>
<section id="a-parallel-mediation-model-with-some-control-variables" class="level1">
<h1>A Parallel Mediation Model With Some Control Variables</h1>
<p>Suppose we want to fit a more complicated model, with some other variables included, such as control variables <code>c1</code> and <code>c2</code> in the dataset (Figure&nbsp;5).</p>
<div class="cell" data-layout-align="center" data-fig-caption="A Parallel Mediation Model With Control Variables" data-fig-heigh="5">
<div class="cell-output-display">
<div id="fig-full-model2" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center" width="576">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-full-model2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_parallel_mediation/index_files/figure-html/fig-full-model2-1.png" id="fig-full-model2" class="img-fluid quarto-figure quarto-figure-center anchored figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-full-model2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5
</figcaption>
</figure>
</div>
</div>
</div>
<p>Although there are more predictors (<code>c1</code> and <code>c2</code>) and more direct and indirect paths (e.g., <code>c1</code> to <code>y</code> through <code>m1</code>), there are still only just three regression models. We can fit them as usual by <code>lm()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">model2_m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c2,</span>
<span id="cb36-2">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel)</span>
<span id="cb36-3">model2_m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c2,</span>
<span id="cb36-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel)</span>
<span id="cb36-5">model2_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> m1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c2,</span>
<span id="cb36-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel)</span></code></pre></div>
</div>
<p>These are the regression results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model2_m1)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = m1 ~ x + c1 + c2, data = data_parallel)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  9.39260    1.40019   6.708 1.37e-09 ***
x            0.87694    0.11441   7.665 1.45e-11 ***
c1           0.25189    0.11131   2.263   0.0259 *  
c2          -0.09293    0.12255  -0.758   0.4501    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.106 on 96 degrees of freedom
Multiple R-squared:  0.4394,    Adjusted R-squared:  0.4219 
F-statistic: 25.08 on 3 and 96 DF,  p-value: 4.558e-12</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model2_m2)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = m2 ~ x + c1 + c2, data = data_parallel)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)   
(Intercept)   4.3796     1.3463   3.253  0.00158 **
x             0.2968     0.1100   2.698  0.00825 **
c1            0.2746     0.1070   2.566  0.01185 * 
c2           -0.3125     0.1178  -2.652  0.00937 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.063 on 96 degrees of freedom
Multiple R-squared:  0.2171,    Adjusted R-squared:  0.1927 
F-statistic: 8.875 on 3 and 96 DF,  p-value: 3e-05</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model2_y)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = y ~ m1 + m2 + x + c1 + c2, data = data_parallel)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)  
(Intercept)  2.65618    3.17697   0.836   0.4052  
m1           0.48642    0.19106   2.546   0.0125 *
m2           0.47128    0.19871   2.372   0.0197 *
x            0.29112    0.26939   1.081   0.2826  
c1          -0.05256    0.21557  -0.244   0.8079  
c2          -0.03212    0.23411  -0.137   0.8912  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 2.038 on 94 degrees of freedom
F-statistic:  7.42 on 5 and 94 DF,  p-value: 6.649e-06</code></pre>
</div>
</div>
<p>We then just combine them by <code>lm2list()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">full_model2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm2list</span>(model2_m1,</span>
<span id="cb43-2">                       model2_m2,</span>
<span id="cb43-3">                       model2_y)</span>
<span id="cb43-4">full_model2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
The models:
m1 ~ x + c1 + c2
m2 ~ x + c1 + c2
y ~ m1 + m2 + x + c1 + c2</code></pre>
</div>
</div>
<p>The indirect effects can be computed and tested in exactly the same way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">ind2_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb45-2">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb45-3">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span>,</span>
<span id="cb45-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model2,</span>
<span id="cb45-5">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb45-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb45-7">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">ind2_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb46-2">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb46-3">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span>,</span>
<span id="cb46-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model2,</span>
<span id="cb46-5">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb46-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb46-7">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<p>This is the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">ind2_1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                     
 Path:               x -&gt; m1 -&gt; y    
 Indirect Effect:    0.427           
 95.0% Bootstrap CI: [0.095 to 0.804]

Computation Formula:
  (b.m1~x)*(b.y~m1)
Computation:
  (0.87694)*(0.48642)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m1~x       0.877
 y~m1       0.486</code></pre>
</div>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">ind2_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                     
 Path:               x -&gt; m2 -&gt; y    
 Indirect Effect:    0.140           
 95.0% Bootstrap CI: [0.006 to 0.359]

Computation Formula:
  (b.m2~x)*(b.y~m2)
Computation:
  (0.29677)*(0.47128)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m2~x       0.297
 y~m2       0.471</code></pre>
</div>
</div>
<p>The indirect effect through <code>m1</code> is 0.427. The 95% bootstrap confidence interval is [0.095; 0.804], slightly decreased after the control variables are included, but still significant.</p>
<p>The indirect effect through <code>m2</code> is 0.140. The 95% bootstrap confidence interval is [0.006; 0.359], decreased after the control variables are included, but still significant.</p>
<p>Standardized indirect effects can also be computed and tested just by adding <code>standardized_x = TRUE</code> and <code>standardized_y = TRUE</code>.</p>
<p>The total indirect effect can also be computed using <code>+</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">ind2_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind2_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ind2_2</span>
<span id="cb51-2">ind2_total</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                      
 Path:                x -&gt; m1 -&gt; y    
 Path:                x -&gt; m2 -&gt; y    
 Function of Effects: 0.566           
 95.0% Bootstrap CI:  [0.227 to 1.020]

Computation of the Function of Effects:
 (x-&gt;m1-&gt;y)
+(x-&gt;m2-&gt;y) 


Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.</code></pre>
</div>
</div>
</section>
<section id="no-limit-on-the-number-of-mediators" class="level1">
<h1>No Limit On The Number of Mediators</h1>
<p>Although the example above only has two mediators, there is no limit on the number of mediators in the parallel mediation model. Just fit all the regression models predicting the mediators, combine them by <code>lm2list()</code>, and compute the indirect effect as illustrated above for each path.</p>
</section>
<section id="advanced-topics" class="level1">
<h1>Advanced Topics</h1>
<section id="customize-the-printout" class="level2">
<h2 class="anchored" data-anchor-id="customize-the-printout">Customize the Printout</h2>
<p>The printout can be customized in several ways. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(ind1,</span>
<span id="cb53-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb53-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pvalue =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb53-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pvalue_digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb53-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                   
 Path:               x -&gt; m1 -&gt; y  
 Indirect Effect:    0.44          
 95.0% Bootstrap CI: [0.10 to 0.80]
 Bootstrap p-value:  0.006         
 Bootstrap SE:       0.18          

Computation Formula:
  (b.m1~x)*(b.y~m1)
Computation:
  (0.92471)*(0.47840)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.
Standard error (SE) based on nonparametric bootstrapping with 5000
bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
 m1~x        0.92
 y~m1        0.48</code></pre>
</div>
</div>
<ul>
<li><p><code>digits</code>: The number of digits after the decimal point for major output. Default is 3.</p></li>
<li><p><code>pvalue</code>: Whether bootstrapping <em>p</em>-value is printed. The method by <span class="citation" data-cites="asparouhov_bootstrap_2021">Asparouhov &amp; Muthén (2021)</span> is used.</p></li>
<li><p><code>pvalue_digits</code>: The number of digits after the decimal point for the <em>p</em>-value. Default is 3.</p></li>
<li><p><code>se</code>: The standard error based on bootstrapping (i.e., the standard deviation of the bootstrap estimates).</p></li>
</ul>
</section>
<section id="missing-data" class="level2">
<h2 class="anchored" data-anchor-id="missing-data">Missing Data</h2>
<p>Care needs to be taken if missing data is present. Let’s remove some data points from the data file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">data_parallel_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_parallel</span>
<span id="cb55-2">data_parallel_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb55-3">data_parallel_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb55-4">data_parallel_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb55-5">data_parallel_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb55-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data_parallel_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         x       m1       m2        y       c1       c2
1       NA 20.77622 8.977183 16.85574 2.385207 4.009182
2       NA       NA 6.518089 15.99256 2.585124 5.980229
3       NA       NA       NA       NA 2.667239 4.170771
4 9.272600       NA       NA       NA 2.021972 3.819458
5 9.845673 18.29027       NA       NA 3.796376 4.375370
6 9.147475 18.21173 7.167020       NA 3.686640 5.283557</code></pre>
</div>
</div>
<p>If we do the regression separately, the cases used in the two models will be different:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict m1</span></span>
<span id="cb57-2">model_m1_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x,</span>
<span id="cb57-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel_missing)</span>
<span id="cb57-4">model_m2_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x,</span>
<span id="cb57-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel_missing)</span>
<span id="cb57-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict y</span></span>
<span id="cb57-7">model_y_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> m1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x,</span>
<span id="cb57-8">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_parallel_missing)</span></code></pre></div>
</div>
<p>The sample sizes are not the same:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(model_m1_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 96</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(model_m2_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 95</code></pre>
</div>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(model_y_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 94</code></pre>
</div>
</div>
<p>If they are combined by <code>lm2list()</code>, an error will occur. The function <code>lm2list()</code> will compare the data to see if the cases used are likely to be different.<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm2list</span>(model_m1_missing,</span>
<span id="cb64-2">        model_m2_missing,</span>
<span id="cb64-3">        model_y_missing)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in check_lm_consistency(...): The data sets used in the lm models do not have identical sample size. All lm models must be fitted to the same sample.</code></pre>
</div>
</div>
<p>A simple (though not ideal) solution is to use listwise deletion, keeping only cases with complete data. This can be done by <code>na.omit()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">data_parallel_listwise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(data_parallel_missing)</span>
<span id="cb66-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data_parallel_listwise)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           x       m1       m2        y        c1       c2
7  10.602289 17.75832 5.944234 18.76106  1.570251 5.629544
8  10.244337 19.31993 6.367723 21.26092  2.140513 5.243080
9   8.877403 16.03285 4.035743 15.64276  2.697043 6.316437
10  9.995130 17.84715 6.219250 12.16667  1.557163 5.536002
11  9.214953 17.30516 6.416709 15.66863  3.157459 6.613625
12 10.178196 17.76963 4.411447 18.68844 -0.127799 5.796077</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data_parallel_listwise)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 94</code></pre>
</div>
</div>
<p>The number of cases using listwise deletion is 94, less than the full sample with missing data (94).</p>
<p>The steps above can then be proceed as usual.</p>
</section>
</section>
<section id="functions-used-in-this-example" class="level1">
<h1>Functions Used In This Example</h1>
<p>These are the main functions used:</p>
<ul>
<li><p><a href="https://sfcheung.github.io/manymome/reference/lm2list.html"><code>lm2list()</code></a>: Combining the results of several one-outcome regression models.</p></li>
<li><p><a href="https://sfcheung.github.io/manymome/reference/cond_indirect.html"><code>indirect_effect()</code></a>: Compute and test an indirect effect.</p></li>
</ul>
</section>
<section id="further-information" class="level1">
<h1>Further Information</h1>
<p>The package <code>manymome</code> has no inherent limitations on the number of variables and the form of the mediation models. An illustration using a more complicated models with both parallel and serial mediation paths can be found in <a href="https://sfcheung.github.io/manymome/articles/med_lm.html">this online article</a>.</p>
<p>Other features of <code>manymome</code> can be found in <a href="https://sfcheung.github.io/manymome/">the website</a> for it.</p>
</section>
<section id="disclaimer-similarity-across-tutorials" class="level1">
<h1>Disclaimer: Similarity Across Tutorials</h1>
<p>To keep each tutorial self-contained, some sections are intentionally repeated nearly verbatim (“recycled”) to reduce the hassle to read several articles to learn how to do one task.</p>
</section>
<section id="revision-history-and-issues" class="level1">
<h1>Revision History and Issues</h1>
<p>The revision history of this post can be find in the <a href="https://github.com/blogonresearch/blogonresearch.github.io/commits/main/posts/manymome_parallel_mediation/index.qmd">GitHub history of the source file</a>.</p>
<p>For issues on this post, such as corrections and mistakes, please <a href="https://github.com/blogonresearch/blogonresearch.github.io/issues">open an issue</a> for the GitHub repository for this blog. Thanks.</p>

<p>:::</p>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-asparouhov_bootstrap_2021" class="csl-entry">
Asparouhov, T., &amp; Muthén, B. O. (2021). <em>Bootstrap <em>p</em>-value computation</em>. <a href="https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf">https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf</a>
</div>
<div id="ref-cheung_comparison_2009" class="csl-entry">
Cheung, M. W.-L. (2009). Comparison of methods for constructing confidence intervals of standardized indirect effects. <em>Behavior Research Methods</em>, <em>41</em>(2), 425–438. <a href="https://doi.org/10.3758/BRM.41.2.425">https://doi.org/10.3758/BRM.41.2.425</a>
</div>
<div id="ref-cheung_manymome_2023" class="csl-entry">
Cheung, S. F., &amp; Cheung, S.-H. (2023). <em>Manymome</em>: <span>An</span> <span>R</span> package for computing the indirect effects, conditional effects, and conditional indirect effects, standardized or unstandardized, and their bootstrap confidence intervals, in many (though not all) models. <em>Behavior Research Methods</em>. <a href="https://doi.org/10.3758/s13428-023-02224-z">https://doi.org/10.3758/s13428-023-02224-z</a>
</div>
<div id="ref-cheung_semlbci_2023" class="csl-entry">
Cheung, S. F., &amp; Pesigan, I. J. A. (2023). <em>Semlbci</em>: <span>An</span> <span>R</span> package for forming likelihood-based confidence intervals for parameter estimates, correlations, indirect effects, and other derived parameters. <em>Structural Equation Modeling: A Multidisciplinary Journal</em>, <em>30</em>(6), 985–999. <a href="https://doi.org/10.1080/10705511.2023.2183860">https://doi.org/10.1080/10705511.2023.2183860</a>
</div>
<div id="ref-mackinnon_comparison_2002" class="csl-entry">
MacKinnon, D. P., Lockwood, C. M., Hoffman, J. M., West, S. G., &amp; Sheets, V. (2002). A comparison of methods to test mediation and other intervening variable effects. <em>Psychological Methods</em>, <em>7</em>(1), 83–104. <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2819363/">http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2819363/</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The order does not matter when using <code>lm2list</code>.↩︎</p></li>
<li id="fn2"><p>The function <code>lm2list()</code> checks not only sample sizes. Even if the sample sizes are the same, an error will still be raised if there is evidence suggesting that the samples are not the same, such as different values of <code>x</code> in the two models.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>mediation</category>
  <category>manymome</category>
  <category>bootstrapping</category>
  <guid>https://blogonresearch.github.io/posts/manymome_parallel_mediation/</guid>
  <pubDate>Fri, 13 Sep 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Simple Mediation in R: A Tutorial</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/manymome_simple_mediation/</link>
  <description><![CDATA[ 





<p>This tutorial shows how to use the R package <a href="https://sfcheung.github.io/manymome"><code>manymome</code></a> <span class="citation" data-cites="cheung_manymome_2023">(S. F. Cheung &amp; Cheung, 2023)</span>, a flexible package for mediation analysis, to test an indirect effect in a simple mediation model fitted by multiple regression.</p>
<section id="pre-requisite" class="level1">
<h1>Pre-Requisite</h1>
<p>Readers are expected to have basic R skills and know how to fit a linear regression model using <code>lm()</code>.</p>
<p>The package <code>manymome</code> can be installed from CRAN:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manymome"</span>)</span></code></pre></div>
</section>
<section id="data" class="level1">
<h1>Data</h1>
<p>This is the data file for illustration, from <code>manymome</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(manymome)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data_med, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          x        m        y       c1       c2
1  9.931992 17.89644 20.73893 1.426513 6.103290
2  8.331493 17.92150 22.91594 2.940388 3.832698
3 10.327471 17.83178 22.14201 3.012678 5.770532</code></pre>
</div>
</div>
</section>
<section id="a-simple-mediation-model" class="level1">
<h1>A Simple Mediation Model</h1>
<p>First we fit a simple mediation model using only <code>x</code>, <code>m</code>, and <code>y</code>.</p>
<div class="cell" data-layout-align="center" data-fig-heigh="2">
<div class="cell-output-display">
<div id="fig-full-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-full-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_simple_mediation/index_files/figure-html/fig-full-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-full-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: A Simple Mediation Model
</figcaption>
</figure>
</div>
</div>
</div>
<p>In this model:</p>
<ul>
<li><p><code>x</code> is the predictor (independent variable).</p></li>
<li><p><code>y</code> is the outcome variable (dependent variable).</p></li>
<li><p><code>m</code> is the mediator.</p></li>
</ul>
<p>The goal is to compute and test the indirect effect from <code>x</code> to <code>y</code> through <code>m</code>.</p>
</section>
<section id="fit-the-models-by-lm" class="level1">
<h1>Fit the Models by <code>lm()</code></h1>
<p>To estimate all the regression coefficients, just fit two regression models:</p>
<ul>
<li><p>Predict <code>m</code> by <code>x</code> (Figure&nbsp;2).</p></li>
<li><p>Predict <code>y</code> by <code>m</code> and <code>x</code> (Figure&nbsp;3).</p></li>
</ul>
<div class="cell" data-layout-align="center" data-fig-heigh="2">
<div class="cell-output-display">
<div id="fig-m-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-m-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_simple_mediation/index_files/figure-html/fig-m-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-m-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: The Model Predicting <code>m</code>
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center" data-fig-heigh="2">
<div class="cell-output-display">
<div id="fig-y-model" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-y-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_simple_mediation/index_files/figure-html/fig-y-model-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-y-model-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: The Model Predicting <code>y</code>
</figcaption>
</figure>
</div>
</div>
</div>
<p>This can be easily done by <code>lm()</code> in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict m</span></span>
<span id="cb4-2">model_m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x,</span>
<span id="cb4-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_med)</span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict y</span></span>
<span id="cb4-5">model_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x,</span>
<span id="cb4-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_med)</span></code></pre></div>
</div>
<p>These are the regression results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model_m)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = m ~ x, data = data_med)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  9.39332    0.83320   11.27   &lt;2e-16 ***
x            0.92400    0.08358   11.06   &lt;2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.8774 on 98 degrees of freedom
Multiple R-squared:  0.555, Adjusted R-squared:  0.5505 
F-statistic: 122.2 on 1 and 98 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model_y)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = y ~ m + x, data = data_med)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   3.3618     2.9480   1.140 0.256930    
m             0.8596     0.2358   3.645 0.000432 ***
x             0.4277     0.2925   1.462 0.146862    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 2.048 on 97 degrees of freedom
Multiple R-squared:  0.3512,    Adjusted R-squared:  0.3378 
F-statistic: 26.26 on 2 and 97 DF,  p-value: 7.704e-10</code></pre>
</div>
</div>
<p>The direct effect is the coefficient of <code>x</code> in the model predicting <code>y</code>, which is 0.428, and not significant.</p>
</section>
<section id="the-indirect-effect" class="level1">
<h1>The Indirect Effect</h1>
<p>The indirect effect is the product of the <code>a</code>-path and the <code>b</code>-path. To test this indirect effect, one common method is nonparametric bootstrapping <span class="citation" data-cites="cheung_comparison_2009">MacKinnon et al. (2002)</span>. This can be done easily by <code>indirect_effect()</code> from the package <code>manymome</code>.</p>
<section id="combine-the-regression-results" class="level2">
<h2 class="anchored" data-anchor-id="combine-the-regression-results">Combine the Regression Results</h2>
<p>We first combine the regression models by <a href="https://sfcheung.github.io/manymome/reference/lm2list.html"><code>lm2list()</code></a> into one object to represent the whole model (Figure&nbsp;1):<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">full_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm2list</span>(model_m,</span>
<span id="cb9-2">                      model_y)</span>
<span id="cb9-3">full_model</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
The models:
m ~ x
y ~ m + x</code></pre>
</div>
</div>
</section>
<section id="compute-and-test-the-indirect-effect" class="level2">
<h2 class="anchored" data-anchor-id="compute-and-test-the-indirect-effect">Compute and Test the Indirect Effect</h2>
<p>For this simple model, we can simply use <a href="https://sfcheung.github.io/manymome/reference/cond_indirect.html"><code>indirect_effect()</code></a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb11-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb11-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>,</span>
<span id="cb11-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model,</span>
<span id="cb11-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb11-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb11-7">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<p>These are the main arguments:</p>
<ul>
<li><p><code>x</code>: The name of the <code>x</code> variable, the start of the indirect path.</p></li>
<li><p><code>y</code>: The name of the <code>y</code> variable, the end of the indirect path.</p></li>
<li><p><code>m</code>: The name of the mediator.</p></li>
<li><p><code>fit</code>: The regression models combined by <code>lm2list()</code>.</p></li>
<li><p><code>boot_ci</code>: If <code>TRUE</code>, bootstrap confidence interval will be formed.</p></li>
<li><p><code>R</code>, the number of bootstrap samples. It is fast for regression models and I recommend using at least 5000 bootstrap samples or even 10000, because the results may not be stable enough if indirect effect is close to zero <span class="citation" data-cites="cheung_semlbci_2023">(an example can be found in S. F. Cheung &amp; Pesigan, 2023)</span>.</p></li>
<li><p><code>seed</code>: The seed for the random number generator, to make the resampling reproducible. This argument should always be set when doing bootstrapping.</p></li>
</ul>
<p>By default, parallel processing will be used and a progress bar will be displayed.</p>
<p>Just typing the name of the output can print the major results</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ind</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                     
 Path:               x -&gt; m -&gt; y     
 Indirect Effect:    0.794           
 95.0% Bootstrap CI: [0.393 to 1.250]

Computation Formula:
  (b.m~x)*(b.y~m)
Computation:
  (0.92400)*(0.85957)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
  m~x       0.924
  y~m       0.860</code></pre>
</div>
</div>
<p>As shown above, the indirect effect is 0.794. The 95% bootstrap confidence interval is [0.393; 1.250]. The indirect effect is positive and significant.</p>
<p>For transparency, the output also shows how the indirect effect was computed.</p>
</section>
<section id="standardized-indirect-effect" class="level2">
<h2 class="anchored" data-anchor-id="standardized-indirect-effect">Standardized Indirect Effect</h2>
<p>To compute and test the standardized indirect effect, with both the <code>x</code>-variable and <code>y</code>-variable standardized, add <code>standardized_x = TRUE</code> and <code>standardized_y = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">ind_stdxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb14-2">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb14-3">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>,</span>
<span id="cb14-4">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model,</span>
<span id="cb14-5">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb14-6">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb14-7">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>,,</span>
<span id="cb14-8">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardized_x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb14-9">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardized_y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>The results can be printed as usual:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ind_stdxy</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect (Both 'x' and 'y' Standardized) ==
                                     
 Path:               x -&gt; m -&gt; y     
 Indirect Effect:    0.333           
 95.0% Bootstrap CI: [0.170 to 0.512]

Computation Formula:
  (b.m~x)*(b.y~m)*sd_x/sd_y
Computation:
  (0.92400)*(0.85957)*(1.05515)/(2.51729)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
  m~x       0.924
  y~m       0.860

NOTE:
- The effects of the component paths are from the model, not
  standardized.</code></pre>
</div>
</div>
<p>The standardized indirect effect is 0.333. The 95% bootstrap confidence interval is [0.170; 0.512], significant.</p>
</section>
</section>
<section id="a-simple-mediation-model-with-some-control-variables" class="level1">
<h1>A Simple Mediation Model With Some Control Variables</h1>
<p>Suppose we want to fit a more complicated model, with some other variables included, such as control variables <code>c1</code> and <code>c2</code> in the dataset (Figure&nbsp;4).</p>
<div class="cell" data-layout-align="center" data-fig-caption="A Simple Mediation Model With Control Variables" data-fig-heigh="4">
<div class="cell-output-display">
<div id="fig-full-model2" class="quarto-float quarto-figure quarto-figure-center anchored" width="576" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-full-model2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blogonresearch.github.io/posts/manymome_simple_mediation/index_files/figure-html/fig-full-model2-1.png" id="fig-full-model2" class="img-fluid quarto-figure quarto-figure-center anchored figure-img" width="576">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-full-model2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4
</figcaption>
</figure>
</div>
</div>
</div>
<p>Although there are more predictors (<code>c1</code> and <code>c2</code>) and more direct and indirect paths (e.g., <code>c1</code> to <code>y</code> through <code>m</code>), there are still only just two regression models. We can fit them as usual by <code>lm()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">model2_m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c2,</span>
<span id="cb17-2">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_med)</span>
<span id="cb17-3">model2_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c2,</span>
<span id="cb17-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_med)</span></code></pre></div>
</div>
<p>These are the regression results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model2_m)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = m ~ x + c1 + c2, data = data_med)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  9.68941    0.91979  10.534   &lt;2e-16 ***
x            0.93469    0.08083  11.563   &lt;2e-16 ***
c1           0.19778    0.07678   2.576   0.0115 *  
c2          -0.16841    0.10305  -1.634   0.1055    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.8425 on 96 degrees of freedom
Multiple R-squared:  0.5981,    Adjusted R-squared:  0.5855 
F-statistic: 47.62 on 3 and 96 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model2_y)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Call:
lm(formula = y ~ m + x + c1 + c2, data = data_med)

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)   
(Intercept)   4.4152     3.3016   1.337  0.18432   
m             0.7847     0.2495   3.145  0.00222 **
x             0.5077     0.3057   1.661  0.10004   
c1            0.1405     0.1941   0.724  0.47093   
c2           -0.1544     0.2554  -0.604  0.54695   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 2.06 on 95 degrees of freedom
Multiple R-squared:  0.3576,    Adjusted R-squared:  0.3305 </code></pre>
</div>
</div>
<p>We then just combine them by <code>lm2list()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">full_model2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm2list</span>(model2_m,</span>
<span id="cb22-2">                       model2_y)</span>
<span id="cb22-3">full_model2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
The models:
m ~ x + c1 + c2
y ~ m + x + c1 + c2</code></pre>
</div>
</div>
<p>The indirect effect can be computed and tested in exactly the same way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">ind2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">indirect_effect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb24-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb24-3">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>,</span>
<span id="cb24-4">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> full_model2,</span>
<span id="cb24-5">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boot_ci =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb24-6">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>,</span>
<span id="cb24-7">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3456</span>)</span></code></pre></div>
</div>
<p>This is the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">ind2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                     
 Path:               x -&gt; m -&gt; y     
 Indirect Effect:    0.733           
 95.0% Bootstrap CI: [0.288 to 1.203]

Computation Formula:
  (b.m~x)*(b.y~m)
Computation:
  (0.93469)*(0.78469)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
  m~x       0.935
  y~m       0.785</code></pre>
</div>
</div>
<p>The indirect effect is 0.733. The 95% bootstrap confidence interval is [0.288; 1.203], decreased after the control variables are included, but still significant.</p>
<p>Standardized indirect effect can also be computed and tested just by adding <code>standardized_x = TRUE</code> and <code>standardized_y = TRUE</code>.</p>
</section>
<section id="advanced-topics" class="level1">
<h1>Advanced Topics</h1>
<section id="customize-the-printout" class="level2">
<h2 class="anchored" data-anchor-id="customize-the-printout">Customize the Printout</h2>
<p>The printout can be customized in several ways. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(ind,</span>
<span id="cb27-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb27-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pvalue =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb27-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pvalue_digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb27-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
== Indirect Effect  ==
                                   
 Path:               x -&gt; m -&gt; y   
 Indirect Effect:    0.79          
 95.0% Bootstrap CI: [0.39 to 1.25]
 Bootstrap p-value:  0.000         
 Bootstrap SE:       0.22          

Computation Formula:
  (b.m~x)*(b.y~m)
Computation:
  (0.92400)*(0.85957)

Percentile confidence interval formed by nonparametric bootstrapping
with 5000 bootstrap samples.
Standard error (SE) based on nonparametric bootstrapping with 5000
bootstrap samples.

Coefficients of Component Paths:
 Path Coefficient
  m~x        0.92
  y~m        0.86</code></pre>
</div>
</div>
<ul>
<li><p><code>digits</code>: The number of digits after the decimal point for major output. Default is 3.</p></li>
<li><p><code>pvalue</code>: Whether bootstrapping <em>p</em>-value is printed. The method by <span class="citation" data-cites="asparouhov_bootstrap_2021">Asparouhov &amp; Muthén (2021)</span> is used.</p></li>
<li><p><code>pvalue_digits</code>: The number of digits after the decimal point for the <em>p</em>-value. Default is 3.</p></li>
<li><p><code>se</code>: The standard error based on bootstrapping (i.e., the standard deviation of the bootstrap estimates).</p></li>
</ul>
</section>
<section id="missing-data" class="level2">
<h2 class="anchored" data-anchor-id="missing-data">Missing Data</h2>
<p>Care needs to be taken if missing data is present. Let’s remove some data points from the data file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">data_med_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_med</span>
<span id="cb29-2">data_med_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb29-3">data_med_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb29-4">data_med_missing[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb29-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data_med_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          x        m        y       c1       c2
1        NA 17.89644 20.73893 1.426513 6.103290
2        NA       NA 22.91594 2.940388 3.832698
3        NA       NA       NA 3.012678 5.770532
4 11.196969       NA       NA 3.120056 4.654931
5 11.887811 22.08645       NA 4.440018 3.959033
6  8.198297 16.95198       NA 2.495083 3.763712</code></pre>
</div>
</div>
<p>If we do the regression separately, the cases used in the two models will be different:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict m</span></span>
<span id="cb31-2">model_m_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x,</span>
<span id="cb31-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_med_missing)</span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict y</span></span>
<span id="cb31-5">model_y_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x,</span>
<span id="cb31-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_med_missing)</span></code></pre></div>
</div>
<p>The sample sizes are not the same:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(model_m_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 96</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(model_y_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 94</code></pre>
</div>
</div>
<p>If they are combined by <code>lm2list()</code>, an error will occur. The function <code>lm2list()</code> will compare the data to see if the cases used are likely to be different.<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm2list</span>(model_m_missing,</span>
<span id="cb36-2">        model_y_missing)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in check_lm_consistency(...): The data sets used in the lm models do not have identical sample size. All lm models must be fitted to the same sample.</code></pre>
</div>
</div>
<p>A simple (though not ideal) solution is to use listwise deletion, keeping only cases with complete data. This can be done by <code>na.omit()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">data_med_listwise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(data_med_missing)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data_med_listwise)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           x        m        y         c1       c2
7  10.091769 19.42649 26.14005  2.5023227 6.196603
8   9.307707 18.29251 24.24033  1.3108621 4.892843
9   6.904119 15.91634 23.97662  1.3010467 3.796913
10 10.706891 18.00798 26.55098  1.9488566 5.835160
11  9.524557 17.80304 24.14855 -0.4604918 3.663987
12  9.307470 17.21214 23.17019  4.2970431 5.538241</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data_med_listwise)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 94</code></pre>
</div>
</div>
<p>The number of cases using listwise deletion is 94, less than the full sample with missing data (100).</p>
<p>The steps above can then be proceed as usual.</p>
</section>
</section>
<section id="functions-used-in-this-example" class="level1">
<h1>Functions Used In This Example</h1>
<p>These are the main functions used:</p>
<ul>
<li><p><a href="https://sfcheung.github.io/manymome/reference/lm2list.html"><code>lm2list()</code></a>: Combining the results of several one-outcome regression models.</p></li>
<li><p><a href="https://sfcheung.github.io/manymome/reference/cond_indirect.html"><code>indirect_effect()</code></a>: Compute and test an indirect effect.</p></li>
</ul>
</section>
<section id="further-information" class="level1">
<h1>Further Information</h1>
<p>The package <code>manymome</code> has no inherent limitations on the number of variables and the form of the mediation models. An illustration using a more complicated models with both parallel and serial mediation paths can be found in <a href="https://sfcheung.github.io/manymome/articles/med_lm.html">this online article</a>.</p>
<p>Other features of <code>manymome</code> can be found in <a href="https://sfcheung.github.io/manymome/">the website</a> for it.</p>
</section>
<section id="disclaimer-similarity-across-tutorials" class="level1">
<h1>Disclaimer: Similarity Across Tutorials</h1>
<p>To keep each tutorial self-contained, some sections are intentionally repeated nearly verbatim (“recycled”) to reduce the hassle to read several articles to learn how to do one task.</p>
</section>
<section id="revision-history-and-issues" class="level1">
<h1>Revision History and Issues</h1>
<p>The revision history of this post can be find in the <a href="https://github.com/blogonresearch/blogonresearch.github.io/commits/main/posts/manymome_simple_mediation/index.qmd">GitHub history of the source file</a>.</p>
<p>For issues on this post, such as corrections and mistakes, please <a href="https://github.com/blogonresearch/blogonresearch.github.io/issues">open an issue</a> for the GitHub repository for this blog. Thanks.</p>

<p>:::</p>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-asparouhov_bootstrap_2021" class="csl-entry">
Asparouhov, T., &amp; Muthén, B. O. (2021). <em>Bootstrap <em>p</em>-value computation</em>. <a href="https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf">https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf</a>
</div>
<div id="ref-cheung_comparison_2009" class="csl-entry">
Cheung, M. W.-L. (2009). Comparison of methods for constructing confidence intervals of standardized indirect effects. <em>Behavior Research Methods</em>, <em>41</em>(2), 425–438. <a href="https://doi.org/10.3758/BRM.41.2.425">https://doi.org/10.3758/BRM.41.2.425</a>
</div>
<div id="ref-cheung_manymome_2023" class="csl-entry">
Cheung, S. F., &amp; Cheung, S.-H. (2023). <em>Manymome</em>: <span>An</span> <span>R</span> package for computing the indirect effects, conditional effects, and conditional indirect effects, standardized or unstandardized, and their bootstrap confidence intervals, in many (though not all) models. <em>Behavior Research Methods</em>. <a href="https://doi.org/10.3758/s13428-023-02224-z">https://doi.org/10.3758/s13428-023-02224-z</a>
</div>
<div id="ref-cheung_semlbci_2023" class="csl-entry">
Cheung, S. F., &amp; Pesigan, I. J. A. (2023). <em>Semlbci</em>: <span>An</span> <span>R</span> package for forming likelihood-based confidence intervals for parameter estimates, correlations, indirect effects, and other derived parameters. <em>Structural Equation Modeling: A Multidisciplinary Journal</em>, <em>30</em>(6), 985–999. <a href="https://doi.org/10.1080/10705511.2023.2183860">https://doi.org/10.1080/10705511.2023.2183860</a>
</div>
<div id="ref-mackinnon_comparison_2002" class="csl-entry">
MacKinnon, D. P., Lockwood, C. M., Hoffman, J. M., West, S. G., &amp; Sheets, V. (2002). A comparison of methods to test mediation and other intervening variable effects. <em>Psychological Methods</em>, <em>7</em>(1), 83–104. <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2819363/">http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2819363/</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The order does not matter when using <code>lm2list</code>.↩︎</p></li>
<li id="fn2"><p>The function <code>lm2list()</code> checks not only sample sizes. Even if the sample sizes are the same, an error will still be raised if there is evidence suggesting that the samples are not the same, such as different values of <code>x</code> in the two models.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>mediation</category>
  <category>manymome</category>
  <category>bootstrapping</category>
  <guid>https://blogonresearch.github.io/posts/manymome_simple_mediation/</guid>
  <pubDate>Sat, 07 Sep 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Proper Standardization in Moderated Regression Using std_selected_boot()</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/std_mod/</link>
  <description><![CDATA[ 





<p>This post shows one simple way to get correctly standardized regression coefficients in multiple linear regression with a moderator, with appropriate confidence intervals, using <code>std_selected_boot()</code> from the <a href="https://sfcheung.github.io/stdmod/"><code>stdmod</code></a> package.</p>
<p>(<em>Note</em>: This post and some related posts, e.g., <a href="https://blogonresearch.github.io/posts/std_dummy/">this one on categorical variables</a>, have sections that are identical or highly similar. This is <em>intentional</em>, to make each article self-contained. Readers do not need to refer to other articles to understand the points.)</p>
<section id="betas" class="level1">
<h1>“Betas”</h1>
<p>It is common in my area, psychology, to report standardized coefficients, the so-called “betas,” when reporting the results of multiple regression or related methods. It is so common that some programs have the “betas” reported by default, alongside the unstandardized coefficients (the “Bs”).</p>
<p>However, when a regression model has a moderator and hence a product term, the common practice, standardizing all variables, including the product term, will lead to “betas” that is difficult to interpret.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
A Standardized Product Is Not A Product of Standardized Variables
</div>
</div>
<div class="callout-body-container callout-body">
<p>That is, the standardized <img src="https://latex.codecogs.com/png.latex?x%20%5Ctimes%20w"> is not <img src="https://latex.codecogs.com/png.latex?%5Ctextrm%7Bstandardized%20%7D%20x%20%5Ctimes%20%5Ctextrm%7Bstandardized%20%7D%20w">. The value of the former is no longer a measure of the moderation effect.<sup>1</sup></p>
</div>
</div>
<p>This point is not new. <span class="citation" data-cites="friedrich_defense_1982">Friedrich (1982)</span> has discussed this a long time ago, and <span class="citation" data-cites="aiken_multiple_1991">Aiken &amp; West (1991)</span> have also explored this in details.</p>
<p>Unfortunately, reporting the “beta” of the product term computed this way is quite common (including in my own work).</p>
<p>The solutions are simple:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Standardize The Components
</div>
</div>
<div class="callout-body-container callout-body">
<p>For the product term <img src="https://latex.codecogs.com/png.latex?x%20%5Ctimes%20w">, standardize <img src="https://latex.codecogs.com/png.latex?x"> (<img src="https://latex.codecogs.com/png.latex?z_x">) and <img src="https://latex.codecogs.com/png.latex?w"> (<img src="https://latex.codecogs.com/png.latex?z_w">), and compute the product of them, <img src="https://latex.codecogs.com/png.latex?z_x%20%5Ctimes%20z_w">.</p>
</div>
</div>
<p>However, common statistical programs standardize <em>all</em> variables. To do standardization <em>right</em> in moderated regression, we need to <em>manually</em> do the standardization and compute the product term, <em>twice</em>.</p>
<p>The function <code>std_selected_boot()</code> from the R package <code>stdmod</code>, which I and my collaborators developed for moderated regression <span class="citation" data-cites="cheung_improving_2022">(Cheung et al., 2022)</span>, can do the standardization as presented in <span class="citation" data-cites="aiken_multiple_1991">Aiken &amp; West (1991)</span> and <span class="citation" data-cites="friedrich_defense_1982">Friedrich (1982)</span>, without any drastic changes to the common workflow.</p>
</section>
<section id="how-to-use-std_selected_boot" class="level1">
<h1>How to Use <code>std_selected_boot()</code></h1>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Workflow
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Fit a regression model by <code>lm()</code> as usual.</p></li>
<li><p>Pass the output to <code>std_selected_boot()</code> and select variables to be standardized.</p></li>
</ol>
</div>
</div>
<p>It was designed to let users have full control on which variables to standardize (see this <a href="https://sfcheung.github.io/stdmod/articles/std_selected.html">article</a> on how). It has one additional feature:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What It Won’t Do (Correctly)
</div>
</div>
<div class="callout-body-container callout-body">
<p>If a model has product terms, they will be formed <em>after</em> the component terms are standardized.</p>
</div>
</div>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<section id="do-regression-as-usual" class="level3">
<h3 class="anchored" data-anchor-id="do-regression-as-usual">Do Regression As Usual</h3>
<p>Suppose this is the data set:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code for generating data</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">342532</span>)</span>
<span id="cb1-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb1-3">control1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-4">control2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-5">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-6">w <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-7">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> control1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> control2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-8">     (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (w <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-9">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(control1, control2, x, w, y)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dat.csv"</span>)</span></code></pre></div>
</details>
</div>
<p>This is the <a href="dat.csv">data file</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  control1 control2         x         w         y
1 5.025877 22.32080  9.521779 11.049711 131.15905
2 6.200119 17.04644 11.912240 10.860813 102.01347
3 4.992346 27.28403  9.845949 10.515219  77.86161
4 4.979231 12.85510  6.512449 13.635488  89.54024
5 7.020257 15.48984  5.734798  9.846383  66.94897
6 3.969682 24.61428  3.329810 10.221247  38.20317</code></pre>
</div>
</div>
<p>The variable <code>x</code> is the predictor, <code>w</code> the moderator. The dataset also has two control variables, <code>control1</code> and <code>control2</code>. The outcome variable is <code>y</code>.</p>
<p>This is the regression model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> control1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> control2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w, dat)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ control1 + control2 + x * w, data = dat)

Residuals:
    Min      1Q  Median      3Q     Max 
-86.895 -18.374  -0.556  19.255  70.971 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  40.8781    29.5919   1.381 0.168746    
control1     -2.2750     2.1314  -1.067 0.287129    
control2      1.0053     0.3821   2.631 0.009191 ** 
x            -4.6922     2.3479  -1.998 0.047060 *  
w             0.3635     2.4452   0.149 0.881986    
x:w           0.7780     0.2287   3.402 0.000811 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 28.34 on 194 degrees of freedom
Multiple R-squared:  0.3587,    Adjusted R-squared:  0.3422 
F-statistic:  21.7 on 5 and 194 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<p>The moderation effect is significant.</p>
<ul>
<li><p>If <code>w</code> increases by one unit, the effect of <code>x</code> increases by 0.778.</p></li>
<li><p>If <code>w</code> is equal to zero, the effect of <code>x</code> is -4.692, and significant.</p></li>
</ul>
</section>
<section id="do-standardization-right" class="level3">
<h3 class="anchored" data-anchor-id="do-standardization-right">Do Standardization Right</h3>
<p>Install <code>stdmod</code> and load it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stdmod)</span></code></pre></div>
</div>
<p>If we want to standardize all variables except for the product term, <em>and</em> compute the product term as the product of the <em>standardized</em> variables, we just pass the output to <code>std_selected_boot()</code>, and set <code>to_standardize</code> to <code>~ .</code>. The right-hand side of <code>~</code> denotes the variables to be standardized. If set to <code>.</code>, then all numeric variables, including the outcome variable (<code>y</code>), will be standardized.<sup>2</sup></p>
<p>But this is not just about the coefficient. There is one issue with standardization: <strong>confidence intervals</strong>.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Beware of the <em>t</em>-based SE and CI
</div>
</div>
<div class="callout-body-container callout-body">
<p>If a variable is standardized, the usual <em>t</em>-based standard errors and confidence intervals of the coefficients that involve it <em>may</em> be biased.<sup>3</sup></p>
</div>
</div>
<p>This is because (a) they do not take into account the sampling variation of the standard deviations used in standardization <span class="citation" data-cites="yuan_biases_2011">(Yuan &amp; Chan, 2011)</span>, and (b) the coefficients with standardization, the “betas”, are not normally distributed (though may be close to). Many statistical programs do not report the confidence intervals for “betas,” for a good reason.</p>
<p>The case of moderated regression is more complicated because, as shown in <span class="citation" data-cites="cheung_improving_2022">Cheung et al. (2022)</span>, the correctly standardized product term involves the standard deviations of <em>three</em> variables, not two.</p>
<p>This is why <code>std_selected_boot()</code> enables nonparametric bootstrapping percentile confidence intervals <em>by default</em>, just in case the bias is large.</p>
<p>To have stable and reproducible confidence intervals, call <code>set.seed()</code> before calling <code>std_selected_boot()</code> and set <code>nboot</code> to the desired number of bootstrap samples (at least 2000 but 5000 or more is recommended):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">645321</span>)</span>
<span id="cb7-2">lm_out_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">std_selected_boot</span>(lm_out,</span>
<span id="cb7-3">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to_standardize =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .,</span>
<span id="cb7-4">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nboot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span></code></pre></div>
</div>
<p>Call <code>summary()</code> as usual:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call to std_selected_boot():
std_selected_boot(lm_out = lm_out, to_standardize = ~., nboot = 5000)

Selected variable(s) are centered by mean and/or scaled by SD
- Variable(s) centered: y control1 control2 x w
- Variable(s) scaled: y control1 control2 x w

         centered_by  scaled_by                            Note
y          83.477789 34.9370599 Standardized (mean = 0, SD = 1)
control1    5.060548  0.9562693 Standardized (mean = 0, SD = 1)
control2   19.625484  5.3780625 Standardized (mean = 0, SD = 1)
x           9.844108  4.3166239 Standardized (mean = 0, SD = 1)
w          10.132063  2.0474763 Standardized (mean = 0, SD = 1)

Note:
- Categorical variables will not be centered or scaled even if
  requested.
- Nonparametric bootstrapping 95% confidence intervals computed.
- The number of bootstrap samples is 5000.

Call:
lm(formula = y ~ control1 + control2 + x * w, data = dat_mod)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.48720 -0.52591 -0.01591  0.55113  2.03139 

Coefficients:
            Estimate CI Lower CI Upper Std. Error t value Pr(&gt;|t|)    
(Intercept)   0.0201  -0.0059   0.0522     0.0577  0.3492 0.727347    
control1     -0.0623  -0.1528   0.0361     0.0583 -1.0674 0.287129    
control2      0.1548   0.0454   0.2650     0.0588  2.6312 0.009191 ** 
x             0.3941   0.2776   0.5028     0.0596  6.6154  &lt; 0.001 ***
w             0.4701   0.3586   0.5735     0.0580  8.1079  &lt; 0.001 ***
x:w           0.1968   0.0981   0.2893     0.0578  3.4023  &lt; 0.001 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.811 on 194 degrees of freedom

R-squared                : 0.3587
Adjusted R-squared       : 0.3422
ANOVA test of R-squared  : F(5, 194) = 21.7047, p &lt; 0.001

= Test the highest order term =
The highest order term             : x:w
R-squared increase adding this term: 0.0383
F test of R-squared increase       : F(1, 194) = 11.5759, p &lt; 0.001

Note:
- Estimates and their statistics are based on the data after
  mean-centering, scaling, or standardization.
- [CI Lower, CI Upper] are bootstrap percentile confidence intervals.
- Std. Error are not bootstrap SEs.</code></pre>
</div>
</div>
<p>The output has one additional section:</p>
<ul>
<li>Variables that are standardized<sup>4</sup>, and variables that are not transformed.</li>
</ul>
<p>As shown in the first section, <code>x</code> and <code>w</code> are standardized. <code>x:w</code> is not on the list. It is because <code>x:w</code> is not standardized. It should not be, as explained above.</p>
<p>The other sections are similar to those for a usual multiple regression. Note that the column <code>Estimate</code> is intentionally <em>not</em> labelled as <code>Beta</code> because it is possible that only some variables are standardized. Labelling it as <code>Beta</code>, though common, is misleading.</p>
</section>
<section id="interpret-the-output" class="level3">
<h3 class="anchored" data-anchor-id="interpret-the-output">Interpret The Output</h3>
<p>The coefficient of the product term <code>x:w</code> is 0.197. That is, for each one <em>SD</em> increase of <code>w</code>, the <em>standardized</em> effect of <code>x</code> on <code>y</code> ( the “beta” of <code>x</code> on <code>y</code>) increases by 0.197.</p>
<p>My collaborator and I proposed to call the moderation effect with <code>x</code>, <code>w</code>, and <code>y</code> standardized, <code>x:w</code> in the example, the <em>standardized moderation effect</em> <span class="citation" data-cites="cheung_improving_2022">(Cheung et al., 2022)</span>. When variables are standardized as proposed by <span class="citation" data-cites="friedrich_defense_1982">Friedrich (1982)</span>, the coefficients can be interpreted as usual in moderated regression, with all variables on the standardized metric.</p>
<p>The coefficient of <code>x</code> is 0.394. This is the <em>standardized</em> effect (the “beta”) of <code>x</code> when <code>w</code> in this model is equal to zero. Because <code>w</code> is standardized, this is equivalent to say that this is the standardized effect of <code>x</code> when <code>w</code> is equal to its mean because the mean of a standardized variable is zero.</p>
</section>
<section id="conditional-effect" class="level3">
<h3 class="anchored" data-anchor-id="conditional-effect">Conditional Effect</h3>
<p>The function <code>cond_effect_boot()</code> from <code>stdmod</code> can be used to compute the conditional effects. Just pass the output of <code>lm()</code> or <code>std_selected_boot()</code> to it.</p>
<p>When the variables are standardized, <code>cond_effect_boot()</code> can be used to compute the <em>standardized</em> conditional effects, with nonparametric bootstrap confidence intervals. Just set <code>nboot</code> to the desired number of bootstrap samples. To ensure that the same <code>nboot</code> bootstrap samples are drawn, set the seed to the number used in <code>std_seleted_boot()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">645321</span>)</span>
<span id="cb10-2">cond_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cond_effect_boot</span>(lm_out_std,</span>
<span id="cb10-3">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb10-4">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>,</span>
<span id="cb10-5">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nboot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span>
<span id="cb10-6">cond_std</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The effects of x on y, conditional on w:

  Level      w x Effect CI Lower CI Upper  S.E.     t     p Sig
   High  1.000    0.591    0.429    0.737 0.085 6.982 0.000 ***
 Medium  0.000    0.394    0.278    0.503 0.060 6.615 0.000 ***
    Low -1.000    0.197    0.051    0.340 0.081 2.424 0.016 *  

[CI Lower, CI Upper] shows the 95% nonparametric bootstrap confidence
interval(s) (based on 5000 bootstrap samples).


The regression model:

    y ~ control1 + control2 + x * w

Interpreting the levels of w:

  Level      w % Below From Mean (in SD)
   High  1.000   81.50              1.00
 Medium  0.000   51.00              0.00
    Low -1.000   15.00             -1.00

- % Below: The percent of cases equal to or less than a level.
- From Mean (in SD): Distance of a level from the mean, in standard
  deviation (+ve above, -ve below).

Note:

- The variable(s) y, x, w is/are standardized.
- The conditional effects are the standardized effects of x on y.</code></pre>
</div>
</div>
<p>As shown above, the effect of <code>x</code> is positive and significant when <code>w</code> ranges from one SD below mean to one SD above mean. The <em>standardized</em> effect of <code>x</code> on <code>y</code> when <code>w</code> is one SD above mean is 0.591.</p>
</section>
</section>
</section>
<section id="why-the-usual-practice-is-problematic" class="level1">
<h1>Why The Usual Practice Is Problematic</h1>
<section id="standardize-the-product-term" class="level2">
<h2 class="anchored" data-anchor-id="standardize-the-product-term">Standardize the Product Term</h2>
<p>Assume that we standardize <em>all</em> variables, including the product term, as in some statistical program. To simulate this, let’s manually create the product term, standardize all variables, including the product term, and do regression:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_w <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>w</span>
<span id="cb12-2">dat_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(dat))</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat_std)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     control1   control2             x           w          y        x_w
1 -0.03625650  0.5011678 -0.0746715806  0.44818493  1.3647761  0.1360233
2  1.19168346 -0.4795487  0.4791086834  0.35592570  0.5305451  0.6515372
3 -0.07132155  1.4240348  0.0004264965  0.18713570 -0.1607514  0.1001691
4 -0.08503578 -1.2588894 -0.7718205413  1.71109398  0.1735248 -0.2141245
5  2.04932709 -0.7689844 -0.9519731607 -0.13952791 -0.4731027 -0.9039326
6 -1.14075236  0.9276200 -1.5091188133  0.04355764 -1.2958909 -1.3825065</code></pre>
</div>
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">psych<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(dat_std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skew =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>         vars   n mean sd   se
control1    1 200    0  1 0.07
control2    2 200    0  1 0.07
x           3 200    0  1 0.07
w           4 200    0  1 0.07
y           5 200    0  1 0.07
x_w         6 200    0  1 0.07</code></pre>
</div>
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lm_out_std_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> control1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> control2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_w, dat_std)</span></code></pre></div>
</details>
</div>
<p>The following results are what found in common statistical programs that standardize all variables, including the product term, to yield the “betas”:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">printCoefmat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std_wrong)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients,</span>
<span id="cb17-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zap.ind =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb17-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">P.values =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  0.000000   0.057350  0.0000  1.00000    
control1    -0.062270   0.058339 -1.0674  0.28713    
control2     0.154750   0.058813  2.6312  0.00919 ** 
x           -0.579740   0.290091 -1.9985  0.04706 *  
w            0.021300   0.143300  0.1486  0.88199    
x_w          1.043740   0.306771  3.4023  0.00081 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>Let us compare the results.</p>
<section id="p-values" class="level3">
<h3 class="anchored" data-anchor-id="p-values"><em>p</em>-values</h3>
<p>Some <em>p</em>-values are different, which is expected:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">coef_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients</span>
<span id="cb19-2">coef_std_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std_wrong)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p-value (Std Correct)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pr(&gt;|t|)"</span>],</span>
<span id="cb19-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p-value (Std All)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std_wrong[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pr(&gt;|t|)"</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            p-value (Std Correct) p-value (Std All)
(Intercept)               0.72735           1.00000
control1                  0.28713           0.28713
control2                  0.00919           0.00919
x                         0.00000           0.04706
w                         0.00000           0.88199
x:w                       0.00081           0.00081</code></pre>
</div>
</div>
<p>The <em>p</em>-values of <code>x:w</code> are the same, which is expected <span class="citation" data-cites="aiken_multiple_1991">(see Aiken &amp; West, 1991)</span>.</p>
<p>However, the <em>p</em>-values of <code>x</code> and <code>w</code> are very different. This is not just because they are effects of <code>x</code> and <code>w</code> conditional on other values. They actually are <em>not</em> conditional effects as we usually understood, explained in the next section.</p>
</section>
<section id="coefficient-estimates" class="level3">
<h3 class="anchored" data-anchor-id="coefficient-estimates">Coefficient Estimates</h3>
<p>Let us compare the coefficients:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Estimate (Std Correct)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimate"</span>],</span>
<span id="cb21-2">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Estimate (Std All)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std_wrong[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimate"</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            Estimate (Std Correct) Estimate (Std All)
(Intercept)                  0.020              0.000
control1                    -0.062             -0.062
control2                     0.155              0.155
x                            0.394             -0.580
w                            0.470              0.021
x:w                          0.197              1.044</code></pre>
</div>
</div>
<p>The coefficients of <code>x</code>, <code>w</code>, and <code>x:w</code> have very different values between the correct standardized solution and the standardized solution with product term standardized.</p>
<p>Two points of note for the second column, the solution with the product term itself standardized:</p>
<ol type="1">
<li><p>The coefficient of <code>x:w</code> , when it is standardized (called <code>x_w</code>), is not a product term. The value 1.044 is <em>not</em> the increase of effect of <code>x</code> when <code>w</code> increases by one SD, nor by one unit.</p></li>
<li><p>The coefficient of <code>x</code> is <em>not</em> the usual conditional effect. Mathematically, it is the standardized effect of <code>x</code> when <code>w</code> is equal to “some value”. However, what is this value? This is not easy to determine because <code>x_w</code> is not a product term. The coefficient of <code>w</code> has the same problem.</p></li>
</ol>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Standardizing the Product Term Make Interpretation Difficult
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The coefficient of the product term is no longer the moderation effect (except in some very special cases).</li>
<li>The coefficients of the component terms, the focal variable and the moderator, are no longer the conditional effects of values easily deducible from the results.</li>
</ul>
</div>
</div>
</section>
</section>
<section id="use-t-statistics-confidence-intervals" class="level2">
<h2 class="anchored" data-anchor-id="use-t-statistics-confidence-intervals">Use <em>t</em> Statistics Confidence Intervals</h2>
<p>Some programs gives confidence intervals of “betas” using <em>t</em> statistics. That is, standardize variables, do regression, and form the confidence intervals, as if the standardized variables were the original data.</p>
<p>Let us compare the bootstrap confidence intervals with the usual OLS confidence intervals based on the <em>t</em>-statistics.</p>
<p>For the output of <code>std_selected_boot()</code>, we can request the <em>t</em>-based confidence intervals by setting <code>type</code> to <code>"lm"</code> when calling <code>confint()</code>, the function commonly used to form confidence intervals:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OLS confidence intervals</span></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             2.5 % 97.5 %
(Intercept) -0.094  0.134
control1    -0.177  0.053
control2     0.039  0.271
x            0.277  0.512
w            0.356  0.584
x:w          0.083  0.311</code></pre>
</div>
</div>
<p>Without setting <code>type</code>, the nonparametric bootstrap confidence intervals are returned (if available):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bootstrap Confidence Intervals</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             2.5 % 97.5 %
(Intercept) -0.006  0.052
control1    -0.153  0.036
control2     0.045  0.265
x            0.278  0.503
w            0.359  0.574
x:w          0.098  0.289</code></pre>
</div>
</div>
<p>As shown above, the confidence intervals of <code>x</code>, <code>w</code>, and <code>x:w</code> by the two methods are close to each other. However, the bootstrap confidence intervals tend to be narrower than the <em>t</em>-based confidence intervals.</p>
<p>We can compare the widths of the confidence intervals by examining their ratios (<code>ratio</code> = <code>CI_Width_t</code> / <code>CI_Width_boot</code>):</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">ci_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span>
<span id="cb27-2">ci_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std)</span>
<span id="cb27-3">width_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ci_t[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ci_t[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb27-4">width_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ci_b[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ci_b[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb27-5">ci_compare <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CI_Width_t =</span> width_t,</span>
<span id="cb27-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CI_Width_boot =</span> width_b)</span>
<span id="cb27-7">ci_compare<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ratio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ci_compare[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ci_compare[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb27-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(ci_compare, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            CI_Width_t CI_Width_boot ratio
(Intercept)      0.227         0.058 3.918
control1         0.230         0.189 1.218
control2         0.232         0.220 1.056
x                0.235         0.225 1.044
w                0.229         0.215 1.064
x:w              0.228         0.191 1.193</code></pre>
</div>
</div>
<p>The <em>t</em>-based confidence interval of the product term, the standardized moderation effect, is nearly 19.3% wider than the bootstrap confidence interval.</p>
</section>
</section>
<section id="final-remarks" class="level1">
<h1>Final Remarks</h1>
<p>What <code>std_selected_boot()</code> does can be implemented in R code by researchers using base R packages only. The function was developed to make it easier for researchers to do standardization right in moderated regression, without adopting the all-or-none approach.</p>
<p>More information on <code>std_selected_boot()</code> can be found from its <a href="https://sfcheung.github.io/stdmod/reference/std_selected.html">help page</a>.</p>
</section>
<section id="other-resources" class="level1">
<h1>Other Resources</h1>
<p>There are programs that advocate the correct way to do standardization in moderated regression. For example, users are recommended to standardize variables before using them to do moderated regression. Done this way, they yield correct point estimates for standardized solution as <code>std_selected_boot()</code> does.</p>
<p>However, I am not aware of program that do the bootstrapping correctly when forming the bootstrapping confidence interval for the correctly standardized solution. It is because <em>both</em> the multiple regression <em>and</em> standardization need to be done in <em>each</em> bootstrap sample. If standardization is done only once, before doing bootstrapping, even though the point estimates are correct, the bootstrap confidence intervals are not.</p>
</section>
<section id="revision-history-and-issues" class="level1">
<h1>Revision History and Issues</h1>
<p>The revision history of this post can be find in the <a href="https://github.com/blogonresearch/blogonresearch.github.io/commits/main/posts/std_mod/index.qmd">GitHub history of the source file</a>.</p>
<p>For issues on this post, such as corrections and mistakes, please <a href="https://github.com/blogonresearch/blogonresearch.github.io/issues">open an issue</a> for the GitHub repository for this blog. Thanks.</p>

<p>:::</p>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-aiken_multiple_1991" class="csl-entry">
Aiken, L. S., &amp; West, S. G. (1991). <em>Multiple regression: <span>Testing</span> and interpreting interactions</em>. SAGE Publication.
</div>
<div id="ref-cheung_improving_2022" class="csl-entry">
Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., &amp; Vong, W. N. (2022). Improving an old way to measure moderation effect in standardized units. <em>Health Psychology</em>, <em>41</em>(7), 502–505. <a href="https://doi.org/10.1037/hea0001188">https://doi.org/10.1037/hea0001188</a>
</div>
<div id="ref-friedrich_defense_1982" class="csl-entry">
Friedrich, R. J. (1982). In defense of multiplicative terms in multiple regression equations. <em>American Journal of Political Science</em>, <em>26</em>(4), 797–833. <a href="https://doi.org/10.2307/2110973">https://doi.org/10.2307/2110973</a>
</div>
<div id="ref-yuan_biases_2011" class="csl-entry">
Yuan, K.-H., &amp; Chan, W. (2011). Biases and standard errors of standardized regression coefficients. <em>Psychometrika</em>, <em>76</em>(4), 670–690. <a href="https://doi.org/10.1007/s11336-011-9224-6">https://doi.org/10.1007/s11336-011-9224-6</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Standardized <img src="https://latex.codecogs.com/png.latex?x%20%5Ctimes%20w"> can be close to <img src="https://latex.codecogs.com/png.latex?%5Ctextrm%7Bstandardized%20%7D%20x%20%5Ctimes%20%5Ctextrm%7Bstandardized%20%7D%20w">, but only in some very specific situations, as shown in <span class="citation" data-cites="cheung_improving_2022">Cheung et al. (2022)</span>.↩︎</p></li>
<li id="fn2"><p>Suppose we only want to standardize <code>x</code> and <code>y</code>, because <code>w</code> is on a meaningful unit, we can set <code>to_standardize</code> to <code>~ x + y</code>. Order does not matter.↩︎</p></li>
<li id="fn3"><p>Note that there are indeed cases in which they are still unbiased, and cases in which the biases are negligible. See <span class="citation" data-cites="yuan_biases_2011">Yuan &amp; Chan (2011)</span> for a detailed discussion.↩︎</p></li>
<li id="fn4"><p><code>std_selected_boot()</code> allows users to do only mean-centering or scaling by standard deviation. Meaning-centering and than scaling by standard deviation is equivalent to standardization.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>regression</category>
  <category>moderation</category>
  <category>stdmod</category>
  <category>standardized</category>
  <category>bootstrapping</category>
  <category>confidence-intervals</category>
  <guid>https://blogonresearch.github.io/posts/std_mod/</guid>
  <pubDate>Fri, 30 Jun 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Standardize Variables Except For Dummy Variables, Using std_selected_boot()</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/std_dummy/</link>
  <description><![CDATA[ 





<p>This post shows one simple way to get meaningful standardized regression coefficients in multiple linear regression with dummy variables, with appropriate confidence intervals, using <code>std_selected_boot()</code> from the <a href="https://sfcheung.github.io/stdmod/"><code>stdmod</code></a> package.</p>
<p>(<em>Note</em>: This post and some related posts, e.g., <a href="https://blogonresearch.github.io/posts/std_mod/">this one on moderated regression</a>, have sections that are identical or highly similar. This is <em>intentional</em>, to make each article self-contained. Readers do not need to refer to other articles to understand the points.)</p>
<section id="betas" class="level1">
<h1>“Betas”</h1>
<p>It is common in my area, psychology, to report standardized coefficients, the so-called “betas,” when reporting the results of multiple regression or related methods. It is so common that some programs have the “betas” reported by default, alongside the unstandardized coefficients (the “Bs”). However, even if it is justifiable to interpret effects of some variables in the standardized metric, dummy variables, if any, should still not be standardized;</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Dummy Variables Standardized Are No Longer Dummy Variables
</div>
</div>
<div class="callout-body-container callout-body">
<p>The dummy variable can no longer be interpreted as a dummy variable because it no longer takes either 0 or 1.</p>
</div>
</div>
<p>So, the “betas” for dummy variables, though maybe not “wrong”, are <em>not interpretable</em>.</p>
<p>Nothing new. This issue has been raised by others <span class="citation" data-cites="hayes_introduction_2022">(e.g., Hayes, 2022, p. 44)</span>. Some programs (e.g., <a href="https://www.jamovi.org/">jamovi</a>) do not standardize dummy variables even when “betas” are requested.</p>
<p>Unfortunately, standardizing them is quite common (including in my own work).</p>
<p>The solutions are simple:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Do Not Standardize Dummy Variables
</div>
</div>
<div class="callout-body-container callout-body">
<p>Standardize other variables <em>except</em> for the dummy variables.</p>
</div>
</div>
<p>However, common statistical programs standardize <em>all</em> variables. No choice. All or none.</p>
<p>To do standardization <em>right</em> when dummy variables are present, we need to <em>manually</em> do the standardization. Doable but inconvenient.</p>
<p>The function <code>std_selected_boot()</code> from the R package <code>stdmod</code>, which I and my collaborators developed <span class="citation" data-cites="cheung_improving_2022">(Cheung et al., 2022)</span>, can do the standardization right without any major changes to the common workflow.</p>
</section>
<section id="how-to-use-std_selected_boot" class="level1">
<h1>How to Use <code>std_selected_boot()</code></h1>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Workflow
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Fit a regression model by <code>lm()</code> as usual.</p></li>
<li><p>Pass the output to <code>std_selected_boot()</code> and select variables to be standardized.</p></li>
</ol>
</div>
</div>
<p>It was designed to let users have full control on which variables to standardize (see this <a href="https://sfcheung.github.io/stdmod/articles/std_selected.html">article</a> on how). It has an additional feature:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What It Won’t Do (Correctly)
</div>
</div>
<div class="callout-body-container callout-body">
<p>It automatically skips factors and string variables in standardization. That is, their dummy variables will never be standardized.</p>
</div>
</div>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<section id="do-regression-as-usual" class="level3">
<h3 class="anchored" data-anchor-id="do-regression-as-usual">Do Regression As Usual</h3>
<p>Suppose this is the data set:<sup>1</sup></p>
<div class="cell">
<details class="code-fold">
<summary>Show the code for generating data</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1453243</span>)</span>
<span id="cb1-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb1-3">group <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gp1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gp2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gp3"</span>),</span>
<span id="cb1-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> n,</span>
<span id="cb1-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb1-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-7">x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rchisq</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-8">x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-9">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(group, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span>,</span>
<span id="cb1-10">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gp1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-11">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gp2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb1-12">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gp3 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-13">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(x1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-14">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(x2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-15">                  group,</span>
<span id="cb1-16">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(dat, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dat.csv"</span>)</span></code></pre></div>
</details>
</div>
<p>This is the <a href="dat.csv">data file</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    x1   x2 group     y
1 9.97 7.84   Gp1 44.99
2 2.45 5.11   Gp1 47.27
3 8.50 8.87   Gp2 60.00
4 4.10 5.60   Gp1 37.05
5 8.16 7.18   Gp3 45.51
6 2.53 9.19   Gp1 54.71</code></pre>
</div>
</div>
<p>The variables <code>x1</code> and <code>x2</code> are continuous predictors. The variable <code>group</code> is a string variable, with three possible values: <code>Gp1</code>, <code>Gp2</code>, and <code>Gp3</code>. The outcome variable is <code>y</code>.</p>
<p>This is the regression model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> group, dat)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ x1 + x2 + group, data = dat)

Residuals:
    Min      1Q  Median      3Q     Max 
-42.755  -7.165   0.355   6.597  25.317 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   9.8205     2.2545   4.356 2.14e-05 ***
x1            0.4080     0.1021   3.997 9.10e-05 ***
x2            4.1642     0.3051  13.649  &lt; 2e-16 ***
groupGp2      6.9809     2.0704   3.372 0.000901 ***
groupGp3      6.3161     1.7076   3.699 0.000282 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 10.49 on 195 degrees of freedom
Multiple R-squared:  0.5385,    Adjusted R-squared:  0.5291 
F-statistic: 56.89 on 4 and 195 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
</section>
<section id="do-standardization-right" class="level3">
<h3 class="anchored" data-anchor-id="do-standardization-right">Do Standardization Right</h3>
<p>Install <code>stdmod</code> and load it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stdmod)</span></code></pre></div>
</div>
<p>If we want to standardize all variables except for categorical variables, if any, we just pass the output to <code>std_selected_boot()</code>, and set <code>to_standardize</code> to <code>~ .</code>. The right-hand side of <code>~</code> denotes the variables to be standardized. If set to <code>.</code>, then all numeric variables, including the outcome variable (<code>y</code>), will be standardized.<sup>2</sup></p>
<p>But this is not just about the coefficient. There is one issue with standardization: <strong>confidence intervals</strong>.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Beware of the <em>t</em>-based SE and CI
</div>
</div>
<div class="callout-body-container callout-body">
<p>If a variable is standardized, the usual <em>t</em>-based standard errors and confidence intervals of the coefficients that involve it <em>may</em> be biased.<sup>3</sup></p>
</div>
</div>
<p>This is because (a) they do not take into account the sampling variation of the standard deviations used in standardization <span class="citation" data-cites="yuan_biases_2011">(Yuan &amp; Chan, 2011)</span>, and (b) the coefficients with standardization, the “betas”, are not normally distributed (though may be close to). Many statistical programs do not report the confidence intervals for “betas,” for a good reason.</p>
<p>This is why <code>std_selected_boot()</code> enables nonparametric bootstrapping percentile confidence intervals <em>by default</em>, just in case the bias is large.</p>
<p>To have stable and reproducible confidence intervals, call <code>set.seed()</code> before calling <code>std_selected_boot()</code> and set <code>nboot</code> to the desired number of bootstrap samples (at least 2000 but 5000 or more is recommended):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870516</span>)</span>
<span id="cb7-2">lm_out_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">std_selected_boot</span>(lm_out,</span>
<span id="cb7-3">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to_standardize =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .,</span>
<span id="cb7-4">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nboot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span></code></pre></div>
</div>
<p>We can call <code>summary()</code> as usual to print the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call to std_selected_boot():
std_selected_boot(lm_out = lm_out, to_standardize = ~., nboot = 5000)

Selected variable(s) are centered by mean and/or scaled by SD
- Variable(s) centered: y x1 x2 group
- Variable(s) scaled: y x1 x2 group

      centered_by scaled_by                            Note
y        40.36635 15.286176 Standardized (mean = 0, SD = 1)
x1        9.41020  7.342158 Standardized (mean = 0, SD = 1)
x2        5.35520  2.454193 Standardized (mean = 0, SD = 1)
group          NA        NA Nonnumeric                     

Note:
- Categorical variables will not be centered or scaled even if
  requested.
- Nonparametric bootstrapping 95% confidence intervals computed.
- The number of bootstrap samples is 5000.

Call:
lm(formula = y ~ x1 + x2 + group, data = dat_mod)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.79695 -0.46875  0.02324  0.43155  1.65619 

Coefficients:
            Estimate CI Lower CI Upper Std. Error t value Pr(&gt;|t|)    
(Intercept) -0.28825 -0.42260 -0.16397    0.08545  -3.374 0.000895 ***
x1           0.19598  0.10064  0.28696    0.04903   3.997  9.1e-05 ***
x2           0.66856  0.58901  0.73888    0.04898  13.649  &lt; 2e-16 ***
groupGp2     0.45668  0.22507  0.68592    0.13544   3.372 0.000901 ***
groupGp3     0.41319  0.20033  0.63209    0.11171   3.699 0.000282 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.6863 on 195 degrees of freedom
Multiple R-squared:  0.5385,    Adjusted R-squared:  0.5291 
F-statistic: 56.89 on 4 and 195 DF,  p-value: &lt; 2.2e-16

Note:
- Estimates and their statistics are based on the data after
  mean-centering, scaling, or standardization.
- [CI Lower, CI Upper] are bootstrap percentile confidence intervals.
- Std. Error are not bootstrap SEs.</code></pre>
</div>
</div>
<p>The output has one additional section:</p>
<ul>
<li>Variables that are standardized<sup>4</sup>, and variables that are not transformed.</li>
</ul>
<p>The other sections are similar to those of a usual multiple regression. Note that the column <code>Estimate</code> is intentionally <em>not</em> labelled as <code>Beta</code> because it is possible that only some variables are standardized. Labelling it as <code>Beta</code>, though common, is misleading.</p>
</section>
<section id="interpret-the-output" class="level3">
<h3 class="anchored" data-anchor-id="interpret-the-output">Interpret The Output</h3>
<p>In the regression output, because <code>y</code>, <code>x1</code>, and <code>x2</code> are standardized, they are the usual “betas.” However, <code>group</code> is not standardized and so <code>groupGp2</code> and <code>groupGp3</code> still take only two possible values, 0 and 1, and so can still be interpreted as usual.</p>
<p>For example, the coefficient of <code>groupGp2</code> is 0.457. That is, compared to <code>Gp1</code>, the reference group, the predicted value of <code>y</code> is 0.457 SD (of <code>y</code>) higher in <code>Gp2</code>.</p>
<p>On the other hand, the coefficient of <code>groupGp3</code> is 0.413. That is, compared to <code>Gp1</code>, the predicted value of <code>y</code> is 0.413 SD (of <code>y</code>) higher in <code>Gp3</code>.</p>
<p>In short, the coefficients of all dummy variables can be interpreted as usual, though the difference in the outcome variable (dependent variable) is in SD of this variable if it is standardized.</p>
</section>
</section>
</section>
<section id="why-the-common-practice-is-problematic" class="level1">
<h1>Why The Common Practice Is Problematic</h1>
<section id="standardize-all-variables" class="level2">
<h2 class="anchored" data-anchor-id="standardize-all-variables">Standardize All Variables</h2>
<p>Assume that we standardize <em>all</em> variables, including the dummy variables, as in some statistical program. To simulate this, I manually create the dummy variables, standardize them, and do regression:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groupGp2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-2">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groupGp3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-3">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groupGp2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gp2"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-4">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groupGp3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gp3"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-5">dat_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groupGp2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groupGp3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)]</span>
<span id="cb10-6">dat_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(dat_std))</span>
<span id="cb10-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat_std)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>           x1          x2   groupGp2   groupGp3          y
1  0.07624462  1.01247114 -0.5220306 -0.9206479  0.3024726
2 -0.94797747 -0.09991063 -0.5220306 -0.9206479  0.4516270
3 -0.12396901  1.43216096  1.9060186 -0.9206479  1.2844056
4 -0.72324789  0.09974764 -0.5220306 -0.9206479 -0.2169509
5 -0.17027692  0.74354368 -0.5220306  1.0807606  0.3364903
6 -0.93708149  1.56255004 -0.5220306 -0.9206479  0.9383413</code></pre>
</div>
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">psych<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(dat_std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skew =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>         vars   n mean sd   se
x1          1 200    0  1 0.07
x2          2 200    0  1 0.07
groupGp2    3 200    0  1 0.07
groupGp3    4 200    0  1 0.07
y           5 200    0  1 0.07</code></pre>
</div>
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">lm_out_std_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> groupGp2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> groupGp3, dat_std)</span></code></pre></div>
</details>
</div>
<p>The following results are what found in common statistical programs that standardize all variables, including the dummy variables, to yield the “betas”:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">printCoefmat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std_wrong)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients,</span>
<span id="cb15-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zap.ind =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb15-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">P.values =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) 0.000000   0.048525  0.0000  1.00000    
x1          0.195980   0.049034  3.9968    9e-05 ***
x2          0.668560   0.048983 13.6488  &lt; 2e-16 ***
groupGp2    0.188080   0.055783  3.3717  0.00090 ***
groupGp3    0.206450   0.055817  3.6987  0.00028 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>Let us compare the results.</p>
<section id="p-values" class="level3">
<h3 class="anchored" data-anchor-id="p-values"><em>p</em>-values</h3>
<p>The <em>p</em>-values are the same, which is expected:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">coef_std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients</span>
<span id="cb17-2">coef_std_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out_std_wrong)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p-value (Std Selected)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pr(&gt;|t|)"</span>],</span>
<span id="cb17-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p-value (Std All)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std_wrong[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pr(&gt;|t|)"</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            p-value (Std Selected) p-value (Std All)
(Intercept)                  0.001             1.000
x1                           0.000             0.000
x2                           0.000             0.000
groupGp2                     0.001             0.001
groupGp3                     0.000             0.000</code></pre>
</div>
</div>
</section>
<section id="coefficient-estimates" class="level3">
<h3 class="anchored" data-anchor-id="coefficient-estimates">Coefficient Estimates</h3>
<p>However, the coefficients for the dummy variables are different:</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Estimate (Std Selected)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimate"</span>],</span>
<span id="cb19-2">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Estimate (Std All)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> coef_std_wrong[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimate"</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            Estimate (Std Selected) Estimate (Std All)
(Intercept)                  -0.288              0.000
x1                            0.196              0.196
x2                            0.669              0.669
groupGp2                      0.457              0.188
groupGp3                      0.413              0.206</code></pre>
</div>
</div>
<p>The coefficients of <code>groupGp2</code> and <code>groupGp3</code>, when they are standardized, are not meaningful. After standardization, they are no longer either 0 or 1.</p>
<p>For example, the so-called “beta” of <code>groupGp2</code>, 0.188, is <em>not</em> the difference between <code>Gp2</code> and <code>Gp1</code> on standardized <code>y</code>. It is the increase in standardized <code>y</code> when <code>groupGp2</code> “increases by one SD”, which is meaningless.</p>
<p>What’s worse, the ranking of the coefficients changed. If we interpret the coefficients with dummy variables not standardized, the <code>Gp2 vs. Gp1</code> difference is larger than the <code>Gp3 vs. Gp1</code> difference (0.457 vs 0.413).</p>
<p>However, if we interpret the coefficients with dummy variables standardized, we would have a different conclusion: the <code>Gp2 vs. Gp1</code> difference is <em>smaller</em> than the <code>Gp3 vs. Gp1</code> difference (0.188 vs 0.206), though only slightly.</p>
<p>The reason is, there are more cases in <code>Gp3</code> than in <code>Gp2</code>. The differences in the SDs of the dummy variables are large enough to reverse the ranking:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Gp1 Gp2 Gp3 
 65  43  92 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groupGp2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.4118533</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groupGp3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.4996481</code></pre>
</div>
</div>
<p>I created the data to demonstrate that this reversal in ranking is <em>possible</em>. This may not happen in real data. However, having groups with different numbers of cases is probably the norm rather than the exception in real data.<sup>5</sup></p>
</section>
</section>
<section id="use-t-statistics-confidence-intervals" class="level2">
<h2 class="anchored" data-anchor-id="use-t-statistics-confidence-intervals">Use <em>t</em> Statistics Confidence Intervals</h2>
<p>Some programs gives confidence intervals of “betas” using <em>t</em> statistics. That is, standardize variables, do regression, and form the confidence intervals, as if the standardized variables were the original data.</p>
<p>Let us compare the bootstrap confidence intervals with the usual OLS confidence intervals based on the <em>t</em>-statistics.</p>
<p>For the output of <code>std_selected_boot()</code>, we can request the <em>t</em>-based confidence intervals by setting <code>type</code> to <code>"lm"</code> when calling <code>confint()</code>, the function commonly used to form confidence intervals:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OLS confidence intervals</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             2.5 % 97.5 %
(Intercept) -0.457 -0.120
x1           0.099  0.293
x2           0.572  0.765
groupGp2     0.190  0.724
groupGp3     0.193  0.634</code></pre>
</div>
</div>
<p>Without setting <code>type</code>, the nonparametric bootstrap confidence intervals are returned (if available):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bootstrap Confidence Intervals</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             2.5 % 97.5 %
(Intercept) -0.423 -0.164
x1           0.101  0.287
x2           0.589  0.739
groupGp2     0.225  0.686
groupGp3     0.200  0.632</code></pre>
</div>
</div>
<p>As shown above, the confidence intervals of <code>x1</code> by the two methods are close to each other. However, the bootstrap confidence interval of <code>x2</code> is narrower than the <em>t</em>-based confidence interval.</p>
<p>We can compare the widths of the confidence intervals by examining their ratios (<code>ratio</code> = <code>CI_Width_t</code> / <code>CI_Width_boot</code>):</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">ci_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span>
<span id="cb31-2">ci_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out_std)</span>
<span id="cb31-3">width_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ci_t[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ci_t[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-4">width_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ci_b[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ci_b[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-5">ci_compare <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CI_Width_t =</span> width_t,</span>
<span id="cb31-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CI_Width_boot =</span> width_b)</span>
<span id="cb31-7">ci_compare<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ratio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ci_compare[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ci_compare[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb31-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(ci_compare, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            CI_Width_t CI_Width_boot ratio
(Intercept)      0.337         0.259 1.303
x1               0.193         0.186 1.038
x2               0.193         0.150 1.289
groupGp2         0.534         0.461 1.159
groupGp3         0.441         0.432 1.021</code></pre>
</div>
</div>
<p>The widths of the confidence intervals are nearly identical for <code>x1</code>. However, for <code>x2</code>, the <em>t</em>-based confidence interval is nearly 28.9% wider than the bootstrap confidence interval.</p>
<p>For <code>groupGp2</code>, even though dummy variable is correctly not standardized, it can still be affected because the outcome variable, <code>y</code>, is standardized. Its <em>t</em>-based confidence interval is also wider than the bootstrap confidence interval by about 15.9%.</p>
</section>
</section>
<section id="final-remarks" class="level1">
<h1>Final Remarks</h1>
<p>What <code>std_selected_boot()</code> does can be implemented in R code by researchers using base R packages only. The function was developed to make it easier for researchers to do standardization right, without adopting the all-or-none approach.</p>
<p>More information on <code>std_selected_boot()</code> can be found from its <a href="https://sfcheung.github.io/stdmod/reference/std_selected.html">help page</a>.</p>
</section>
<section id="other-resources" class="level1">
<h1>Other Resources</h1>
<p>There are other program or function that also correctly skip categorical variables when doing standardization. For example, the linear regression procedure in <a href="https://www.jamovi.org/">jamovi</a> also do not standardized the dummy variables formed from categorical variables when standardized estimates are requested.</p>
<p>For confidence intervals, other methods have also been proposed to take into account the sampling variability of the standard deviations. Examples are the methods proposed by <span class="citation" data-cites="dudgeon_improvements_2017">Dudgeon (2017)</span> and <span class="citation" data-cites="jones_computing_2013">Jones &amp; Waller (2013)</span>, in addition to the one proposed by <span class="citation" data-cites="yuan_biases_2011">Yuan &amp; Chan (2011)</span>.</p>
</section>
<section id="revision-history-and-issues" class="level1">
<h1>Revision History and Issues</h1>
<p>The revision history of this post can be find in the <a href="https://github.com/blogonresearch/blogonresearch.github.io/commits/main/posts/std_dummy/index.qmd">GitHub history of the source file</a>.</p>
<p>For issues on this post, such as corrections and mistakes, please <a href="https://github.com/blogonresearch/blogonresearch.github.io/issues">open an issue</a> for the GitHub repository for this blog. Thanks.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>

<p>:::</p>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-cheung_improving_2022" class="csl-entry">
Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., &amp; Vong, W. N. (2022). Improving an old way to measure moderation effect in standardized units. <em>Health Psychology</em>, <em>41</em>(7), 502–505. <a href="https://doi.org/10.1037/hea0001188">https://doi.org/10.1037/hea0001188</a>
</div>
<div id="ref-dudgeon_improvements_2017" class="csl-entry">
Dudgeon, P. (2017). Some improvements in confidence intervals for standardized regression coefficients. <em>Psychometrika</em>, <em>82</em>(4), 928–951. <a href="https://doi.org/10.1007/s11336-017-9563-z">https://doi.org/10.1007/s11336-017-9563-z</a>
</div>
<div id="ref-hayes_introduction_2022" class="csl-entry">
Hayes, A. F. (2022). <em>Introduction to mediation, moderation, and conditional process analysis: A regression-based approach</em> (Third edition). The Guilford Press.
</div>
<div id="ref-jones_computing_2013" class="csl-entry">
Jones, J. A., &amp; Waller, N. G. (2013). Computing confidence intervals for standardized regression coefficients. <em>Psychological Methods</em>, <em>18</em>(4), 435–453. <a href="https://doi.org/10.1037/a0033269">https://doi.org/10.1037/a0033269</a>
</div>
<div id="ref-yuan_biases_2011" class="csl-entry">
Yuan, K.-H., &amp; Chan, W. (2011). Biases and standard errors of standardized regression coefficients. <em>Psychometrika</em>, <em>76</em>(4), 670–690. <a href="https://doi.org/10.1007/s11336-011-9224-6">https://doi.org/10.1007/s11336-011-9224-6</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><code>x1</code> and <code>x2</code> are intentionally generated from nonnormal distributions, for illustration. Note that OLS (ordinary least squares) regression does <em>not</em> assume that the predictors are multivariate normal. Using nonnormal predictors violate no assumptions of OLS regression.↩︎</p></li>
<li id="fn2"><p>Suppose we only want to standardize <code>x1</code> and <code>y</code>, because <code>x2</code> is on a meaningful unit, we can set <code>to_standardize</code> to <code>~ x1 + y</code>. Order does not matter.↩︎</p></li>
<li id="fn3"><p>Note that there are indeed cases in which they are still unbiased, and cases in which the biases are negligible. See <span class="citation" data-cites="yuan_biases_2011">Yuan &amp; Chan (2011)</span> for a detailed discussion.↩︎</p></li>
<li id="fn4"><p><code>std_selected_boot()</code> allows users to do only mean-centering or scaling by standard deviation. Meaning-centering and than scaling by standard deviation is equivalent to standardization.↩︎</p></li>
<li id="fn5"><p>It can be argued that size differences should be taken into account. They should be, but probably not by standardizing the dummy variables and making the coefficients not interpretable.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>regression</category>
  <category>categorical variables</category>
  <category>stdmod</category>
  <category>standardized</category>
  <category>bootstrapping</category>
  <category>confidence-intervals</category>
  <guid>https://blogonresearch.github.io/posts/std_dummy/</guid>
  <pubDate>Sat, 24 Jun 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Bootstrap Confidence Intervals for Standardized Solution in lavaan</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/</link>
  <description><![CDATA[ 





<p><code>lavaan</code> supports bootstrap confidence intervals for free and user-defined parameters. This is useful especially for parameter estimates that may not be approximately normally distributed unless the sample size is very large.</p>
<p>However, it is known, though not well-known enough in my opinion, that, even if bootstrap confidence intervals are requested, the confidence intervals reported in the standardized solution are not bootstrap confidence intervals as in tools like <code>PROCESS</code> for standardized effects like standardized indirect effects, but are symmetric delta-method confidence intervals based on the bootstrap sampling variance-covariance matrix.</p>
<p>Let’s use a sample dataset for illustration:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the data</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">860541</span>)</span>
<span id="cb1-3">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-4">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n)</span>
<span id="cb1-5">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-6">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-7">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)</span></code></pre></div>
</div>
<p>We specify a simple regression model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lavaan)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This is lavaan 0.6-13
lavaan is FREE software! Please report any bugs.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb4-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m ~ a * x</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">y ~ b * m + cp * x</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ab := a * b</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
<p>… and fit it with bootstrap confidence intervals (2023-01-28: Code and results updated for <code>lavaan</code> 0.6-13, <code>iseed</code> is used instead of <code>set.seed()</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sem</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed.x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb5-2">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boot"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootstrap =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb5-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iseed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8970</span>)</span></code></pre></div>
</div>
<p>Let’s focus on the confidence intervals of the indirect effect:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">est <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameterEstimates</span>(fit)</span>
<span id="cb6-2">std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardizedSolution</span>(fit)</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unstandardized</span></span>
<span id="cb6-4">est[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label   est    se     z pvalue ci.lower ci.upper
7  ab := a*b    ab 0.025 0.015 1.686  0.092    0.001    0.059</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardized</span></span>
<span id="cb8-2">std[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label est.std    se     z pvalue ci.lower ci.upper
7  ab := a*b    ab   0.088 0.049 1.774  0.076   -0.009    0.185</code></pre>
</div>
</div>
<p>They lead to different conclusions.</p>
<p>As shown below, the confidence interval of the unstandardized indirect effect is percentile confidence interval that is asymmetric, as expected:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">est[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci.lower"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci.upper"</span>)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> est[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"est"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ci.lower   ci.upper
7 -0.02364024 0.03392409</code></pre>
</div>
</div>
<p>However, the confidence interval of the standardized indirect effect is symmetric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">std[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci.lower"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ci.upper"</span>)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> std[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"est.std"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ci.lower   ci.upper
7 -0.09699904 0.09699904</code></pre>
</div>
</div>
<p>This behavior has been discussed in the <a href="https://groups.google.com/g/lavaan">Google group for<code>lavaan</code></a> and so is known, but not “well-known” because I met many users who were not aware of this, especially when they use bootstrapping to get the confidence intervals for indirect effects but found that the confidence intervals of unstandardized and standardized indirect effect led to different conclusions, as in the example above.</p>
<p>A solution already exists in <code>lavaan</code>. Users can use <code>bootstrapLavaan()</code> and get the bootstrap confidence intervals for many results, including the output of standardized solution.</p>
<p>We first define a function to extract the standardized indirect effect:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">fct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fit) {</span>
<span id="cb14-2">    lavaan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardizedSolution</span>(fit)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"est.std"</span>]</span>
<span id="cb14-3">  }</span></code></pre></div>
</div>
<p>We then update the fit object to disable standard error because we only need the point estimates and then call <code>bootstrapLavaan()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">fit0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span>(fit, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb15-2">fit_boot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrapLavaan</span>(fit0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> fct, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iseed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8970</span>)</span></code></pre></div>
</div>
<p>The percentile confidence interval can then be formed by <code>quantile()</code>.</p>
<p>(Note that <code>lavaan()</code> does not use <code>quantile()</code> but use the approach by <code>boot.ci()</code>. The resulting interval can be slightly different from that by <code>quantile()</code>.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(fit_boot[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       2.5%       97.5% 
0.004372947 0.196203435 </code></pre>
</div>
</div>
<p>However, this is inconvenient because we need to write custom function, and bootstrapping was done twice unless we store both the unstandardized and standardized solutions in the custom function used when calling <code>bootstrapLavaan()</code>.</p>
<p>I wrote the function <a href="https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html"><code>standardizedSolution_boot_ci()</code></a>, available in the package <a href="https://sfcheung.github.io/semhelpinghands/"><code>semhelpinghands</code></a>, for this particular case that I sometimes encounter:</p>
<ul>
<li><p>A model is already fitted with <code>se = "boot"</code> and so bootstrap confidence intervals are already available for the unstandardized estimates.</p></li>
<li><p>I want to get the bootstrap confidence intervals for the standardized solution <em>without doing the bootstrapping again</em>.</p></li>
</ul>
<p>This would be useful to me because some of my projects involve large samples with missing data. and bootstrapping takes appreciable time even with parallelization.</p>
<p>This is how to use this function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(semhelpinghands)</span>
<span id="cb18-2">std_boot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardizedSolution_boot_ci</span>(fit)</span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -c(9, 10) is used to remove the delta-method CIs from</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the printout</span></span>
<span id="cb18-5">std_boot[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label est.std    se      z pvalue boot.ci.lower boot.ci.upper
1   m  ~   x     a   0.232 0.105  2.213  0.027         0.015         0.425
2   y  ~   m     b   0.379 0.083  4.541  0.000         0.204         0.541
3   y  ~   x    cp   0.103 0.092  1.117  0.264        -0.079         0.281
4   m ~~   m         0.946 0.048 19.527  0.000         0.819         0.999
5   y ~~   y         0.828 0.073 11.403  0.000         0.660         0.940
6   x ~~   x         1.000 0.000     NA     NA            NA            NA
7  ab := a*b    ab   0.088 0.049  1.774  0.076         0.004         0.196</code></pre>
</div>
</div>
<p>The <code>boot.ci</code> intervals are “true” bootstrap confidence intervals, formed from the bootstrap estimates. The bootstrap confidence interval for the standardized indirect effect ([0.004, 0.196]) and that for the unstandardized indirect effect ([0.001, 0.059]) now lead to the same conclusion.</p>
<p><code>standardizedSolution_boot_ci()</code> works like <code>standardizedSolution()</code>, but extracts the stored bootstrap estimates, get the standardized solution from each set of estimates, and use them to form the bootstrap confidence intervals for the standardized solution.</p>
<p>By default, the bootstrap standardized solution is also stored in the attribute <code>boot_est_std</code>. They can be extracted to examine the distribution. For example, the bootstrap standardized indirect effects can be extracted and plotted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">std_boot_est <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(std_boot, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boot_est_std"</span>)</span>
<span id="cb20-2">std_indirect_boot_est <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> std_boot_est[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(std_indirect_boot_est)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqnorm</span>(std_indirect_boot_est)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqline</span>(std_indirect_boot_est)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/index_files/figure-html/unnamed-chunk-14-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This function is simple to use, at least for me. No need to write custom function, and no need to do bootstrapping twice. In most cases, I don’t even need to specify any additional arguments.</p>
<p>More about this function can be found in the <a href="https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html">vignette</a> for <code>standardizedSolution_boot_ci()</code>.</p>
<p>If any bug in <code>standardizedSolution_boot_ci()</code> was found, I would appreciate submitting it as a <a href="https://github.com/sfcheung/semhelpinghands/issues">GitHub issue</a>. {{&lt; emoji ":smile:" &gt;}}</p>

<p>:::</p>


 ]]></description>
  <category>R</category>
  <category>lavaan</category>
  <category>bootstrapping</category>
  <category>confidence-intervals</category>
  <category>semhelpinghands</category>
  <category>standardized</category>
  <guid>https://blogonresearch.github.io/posts/bootstrap_confidence_intervals_for_standardized_solution_in_lavaan/</guid>
  <pubDate>Tue, 27 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Show Options Set by lavaan</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/show_options_set_by_lavaan/</link>
  <description><![CDATA[ 





<p><code>lavaan</code> is a convenient tool for doing structural equation modelling in R <span class="citation" data-cites="lavaan_2012">(Rosseel, 2012)</span>. One of its strength is having “prepackaged” estimators, which are shortcuts to a set of options, such as “ML”, “MLR”, “MLMVS”, and others <span class="citation" data-cites="savalei_computational_2022">(Savalei &amp; Rosseel, 2022)</span>. It also tries to set default values for options based on the model and data.</p>
<p>However, probably due to my not-so-good memory, I sometimes forgot what the settings are for a model. Therefore, in the package <a href="https://sfcheung.github.io/semhelpinghands/"><code>semhelpinghands</code></a>, I wrote the function <a href="https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html"><code>show_more_options()</code></a> to show some of the settings of the output of <code>lavaan()</code> and its wrappers, such as <code>sem()</code> and <code>cfa()</code>.<sup>1</sup></p>
<p>The function <code>show_more_options()</code> is very easy to use … because it accepts only one argument, the output of <code>lavaan()</code>.</p>
<p>This is an example based on the example of <code>lavaan::cfa()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lavaan)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This is lavaan 0.6-13
lavaan is FREE software! Please report any bugs.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">HSmodel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">visual  =~ x1 + x2 + x3</span></span>
<span id="cb3-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">textual =~ x4 + x5 + x6</span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">speed   =~ x7 + x8 + x9</span></span>
<span id="cb3-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-7">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cfa</span>(HSmodel,</span>
<span id="cb3-8">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> HolzingerSwineford1939)</span></code></pre></div>
</div>
<p>To show the major options, just pass the output to <code>show_more_options()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(semhelpinghands)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_more_options</span>(fit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual  
 Estimator(s)                        default ML      
 Standard Error (SE)                 default standard
 Model Test Statistic(s)             default standard
 How Missing Data is Handled         default listwise
 Information Matrix (for SE)         default expected
 Information Matrix (for Model Test) default expected
 Mean Structure                      default No      
 'x' Fixed                           default FALSE   </code></pre>
</div>
</div>
<p>The column <code>Call</code> shows whether the default setting is used for each row, based of the call used when fitting the model. However, it is not always clear to me what the default values are.</p>
<p>The column <code>Actual</code> shows the values extracted by <code>lavaan::lavInspect()</code> or from the <code>Options</code> slot. These are what the default values stand for in the fitted model.</p>
<p>Many of the entries are either (a) already available in the output of <code>summary()</code>, or (b) can be deduced from the output. However, I would like to have a table for quick reference, hence I wrote this function.</p>
<p>Suppose <code>"MLR"</code> is used as the estimator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fit_MLR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cfa</span>(HSmodel,</span>
<span id="cb6-2">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> HolzingerSwineford1939,</span>
<span id="cb6-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimator =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLR"</span>)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_more_options</span>(fit_MLR)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual            
 Estimator(s)                        MLR     ML                
 Standard Error (SE)                 default robust.huber.white
 Model Test Statistic(s)             default yuan.bentler.mplus
 How Missing Data is Handled         default listwise          
 Information Matrix (for SE)         default observed          
 Information Matrix (for Model Test) default observed          
 Mean Structure                      default No                
 'x' Fixed                           default FALSE             </code></pre>
</div>
</div>
<p>The output shows the exact names of the options (e.g., <code>"robust.huber.white"</code> and <code>"yuan.bentler.mplus"</code>). They can complement the more readable output of <code>summary()</code> if we need to manually set these options, or want to know which values these options refer to when consulting the help page.</p>
<p>For example, <code>summary()</code> reports that <code>"Sandwich"</code> is the method used for standard errors, and <code>show_more_options()</code> shows that the exact name in the option is <code>"robust.huber.white"</code>. This is useful because the word <code>"sandwich"</code> does not appear in the help page of <code>lavOptions()</code>, while the word <code>"robust.huber.white"</code> does. Some users may not know what <code>"Sandwich"</code> stands for.</p>
<p>This is a dataset for a path model, with missing data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8745315</span>)</span>
<span id="cb8-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n)</span>
<span id="cb8-4">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb8-5">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb8-6">path_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(x, m, y)</span>
<span id="cb8-7">path_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb8-8">path_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span></code></pre></div>
</div>
<p>Suppose we use only the default options to fit a path model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">path_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m ~ a * x</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">y ~ b * m</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ab := a * b</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-7">fit_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sem</span>(path_model,</span>
<span id="cb9-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> path_data)</span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_more_options</span>(fit_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual  
 Estimator(s)                        default ML      
 Standard Error (SE)                 default standard
 Model Test Statistic(s)             default standard
 How Missing Data is Handled         default listwise
 Information Matrix (for SE)         default expected
 Information Matrix (for Model Test) default expected
 Mean Structure                      default No      
 'x' Fixed                           default TRUE    </code></pre>
</div>
</div>
<p>The output shows that, by default, the mean structure is not modelled, listwise selection is used to handle missing data, and <code>x</code> variables (exogenous covariates, <code>x</code> in this example) are treated as fixed. This can be verified by the parameter estimates, in which the variance of <code>x</code> is a fixed parameter and hence has no standard error and no <em>p</em>-value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parameterEstimates</span>(fit_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  lhs op rhs label   est    se     z pvalue ci.lower ci.upper
1   m  ~   x     a 0.075 0.078 0.966  0.334   -0.077    0.228
2   y  ~   m     b 0.248 0.119 2.081  0.037    0.014    0.482
3   m ~~   m       0.550 0.080 6.856  0.000    0.393    0.708
4   y ~~   y       0.745 0.109 6.856  0.000    0.532    0.958
5   x ~~   x       0.967 0.000    NA     NA    0.967    0.967
6  ab := a*b    ab 0.019 0.021 0.876  0.381   -0.023    0.060</code></pre>
</div>
</div>
<p>Suppose we set missing to <code>"FIML"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">fit_path_fiml <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sem</span>(path_model,</span>
<span id="cb13-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> path_data,</span>
<span id="cb13-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FIML"</span>)</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_more_options</span>(fit_path_fiml)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Options                             Call    Actual  
 Estimator(s)                        default ML      
 Standard Error (SE)                 default standard
 Model Test Statistic(s)             default standard
 How Missing Data is Handled         FIML    ml      
 Information Matrix (for SE)         default observed
 Information Matrix (for Model Test) default observed
 Mean Structure                      default Yes     
 'x' Fixed                           default TRUE    </code></pre>
</div>
</div>
<p><code>x</code> variables are still treated as fixed, but now mean structure is modelled (required for FIML, full information maximum likelihood), even though I did not explicitly ask for it.</p>
<p>Only options I think are likely needed (by me) are included in the output.<sup>2</sup> More may be added in the future. In any case, if other options are needed, they can be retrieved by <code>lavaan::lavInspect()</code> or from the <code>Options</code> slot of the output. In most cases I myself encountered, all I want is a simple function that is easy to remember and no need to set any arguments other than the <code>lavaan</code> output. If I need something else, I will just extract the information myself.</p>
<p>This function was inspired by a script I wrote to enumerate the options set by the prepackaged shortcuts. Interested readers can read <a href="https://groups.google.com/g/lavaan/c/6oLwoboi-vQ/m/IQLAXChPAwAJ">this thread</a> at the <a href="https://groups.google.com/g/lavaan">Google Group for <code>lavaan</code></a> and <a href="https://gist.github.com/sfcheung/baa5e43c32d4763b859f5338a1738d79">this gist</a>, to check how options will be set for different combinations of estimator, data, and some other options.</p>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>

<p>:::</p>


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-lavaan_2012" class="csl-entry">
Rosseel, Y. (2012). <span class="nocase">lavaan</span>: An <span>R</span> package for structural equation modeling. <em>Journal of Statistical Software</em>, <em>48</em>(2), 1–36. <a href="https://doi.org/10.18637/jss.v048.i02">https://doi.org/10.18637/jss.v048.i02</a>
</div>
<div id="ref-savalei_computational_2022" class="csl-entry">
Savalei, V., &amp; Rosseel, Y. (2022). Computational options for standard errors and test statistics with incomplete normal and nonnormal data in <span>SEM</span>. <em>Structural Equation Modeling: A Multidisciplinary Journal</em>, <em>29</em>(2), 163–181. <a href="https://doi.org/10.1080/10705511.2021.1877548">https://doi.org/10.1080/10705511.2021.1877548</a>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>To be precise, any object of the class <code>lavaan</code>.↩︎</p></li>
<li id="fn2"><p>The information matrices are technical but I occasionally need them.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>lavaan</category>
  <category>semhelpinghands</category>
  <guid>https://blogonresearch.github.io/posts/show_options_set_by_lavaan/</guid>
  <pubDate>Sun, 25 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>My Own Style in R</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/my_own_style_in_r/</link>
  <description><![CDATA[ 





<p>Although I have written programs since I were a high school student, when computer monitor could only display one color, I have no formal training in programming, and I rarely worked with others in developing a solution until recently. The problem: I did not write with a consistent and professional style. I am pretty sure that my code will look “ugly” to professional programmers.</p>
<p>That said, I do have a loose style, one that suits my own situation:</p>
<ul>
<li><p>I work on small screen frequently, sometimes even on my mobile phone. I wrote the documentation of some packages on my mobile phone, and even this post was largely drafted on my phone.</p></li>
<li><p>My main tasks are research and teaching, among other tasks. I can easily forget some style rules I set for coding. I need something simple and easy to remember.</p></li>
<li><p>Ideally, code should be easy, or at least not too difficult, to comprehend by future me with minimal comments. What looks <em>nature</em> to me myself is of the top priority.</p></li>
</ul>
<p>So, this is my style, with me as the main user and reader:</p>
<ul>
<li><p>For code, I use a line width of 60 to 70. For documentation, I am more aggressive and use a line width of 40.</p></li>
<li><p>For the same reason, I use two spaces for indentation. A four-space indentation is too “expensive” to me.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">tmpfct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">    x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-3">  }</span></code></pre></div>
</div>
<ul>
<li>I like using double-click to select a name. This does not work if periods are used inside a name. Therefore, I no longer use periods in a name, except for S3 methods. If necessary, I use underscores.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">this_is_long_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<ul>
<li>I found it difficult to remember the case I used for a name. So, I stick to lowercase letters unless I am <em>very</em> certain that I can remember that I used uppercase letters.</li>
</ul>
<p>I don’t like camel case. It is OK for language that is not case sensitive, like Visual Basic and SPSS syntax commands, but is inconvenient for case sensitive languages like R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I don't like camel case.</span></span>
<span id="cb3-2">thisIsNotWhatIDo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I prefer this:</span></span>
<span id="cb3-4">this_is_what_i_do <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<ul>
<li>Long function names are acceptable with me. With autocompletion in many IDEs, it is not important to use short names. Being easy to remember <em>part</em> of a name is important. An abbreviation is not easy to remember unless it is commonly used (e.g., SD).</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is easy to remember</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor_loadings</span>()</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These variants are not</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fload</span>()</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facload</span>()</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facload</span>()</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fl</span>()</span></code></pre></div>
</div>
<ul>
<li>I wrote stuff in Python occasionally. I like the Python style indentation, which is easy to read. So I use that style for my R code too.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do something</span></span>
<span id="cb5-3">  }</span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do something</span></span>
<span id="cb5-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do something else</span></span>
<span id="cb5-8">  }</span></code></pre></div>
</div>
<ul>
<li><p>I never, ever, use any automatic stylers to reformat code. They make changes that are tracked by Git but have nothing to do with the content. I <em>may</em> use them, but only when finalizing the code.</p></li>
<li><p>This is also why I care little about word wrap. Irregular line widths are acceptable for me.</p></li>
<li><p>Extra whitespace are OK with me. Readability is the main goal.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I may do this:</span></span>
<span id="cb6-2">x  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-3">y0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span></code></pre></div>
</div>
<ul>
<li><p>I use double quotes for string literals. I have to use two keys … but the habit is too difficult to break that I don’t bother changing it.</p></li>
<li><p>The last “rule”: I can break any of the rules, as long as the code is readable without the need to know any rules.</p></li>
</ul>
<p>I also have a GitHub repo for my personal style, in case I forgot the rules:</p>
<p><a href="https://github.com/sfcheung/rstylesf" class="uri">https://github.com/sfcheung/rstylesf</a></p>
<p>So, please pardon me if you find my code for packages at odd with professional style. I myself is the main reader and maintainer of the packages. What work for me matters.</p>

<p>:::</p>


 ]]></description>
  <category>R</category>
  <category>code-style</category>
  <guid>https://blogonresearch.github.io/posts/my_own_style_in_r/</guid>
  <pubDate>Fri, 23 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Customize R GUI For Windows</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/</link>
  <description><![CDATA[ 





<p>Many people use RStudio, and some even mistaken RStudio as R. I mainly work on Windows machines and I did try RStudio for a while a few years ago. However, I switched back to default R GUI for Windows that comes with R for Windows and used it along with light-weight code editors, for personal reasons. RStudio is good, but has many features that I don’t need. Although I now use VS Code as my main IDE for R, I still use R GUI for Windows a lot. It is light-weight, came with base installation, and is customizable. Simple but good enough for some tasks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_startup.png" class="img-fluid figure-img"></p>
<figcaption>R Default GUI</figcaption>
</figure>
</div>
<p>The console above is not the default one. I like dark theme and single-document interface (SDI). I keep only a limited numbers of windows on my desktop and I never group windows in the taskbar. SDI is much more efficient for me to locate the window I need.</p>
<p>The configuration can be set in Edit-&gt;Preferences:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_configuration_annotated.png" class="img-fluid figure-img"></p>
<figcaption>Rgui configuration</figcaption>
</figure>
</div>
<p>The configuration is saved in the <code>Rconsole</code> file in the folder <code>etc</code> in R’s installation folder. Whenever I upgrade to a new version of R, I simply copy this file to the same folder in the new installation of R to have my preferred configuration. No need to set the configuration again. (I’ve just found that I haven’t changes this configuration for over five years!)</p>
<p>Another feature I like is customizing the menu bar. I use <code>devtools</code> a lot, and would love to call them from the pulldown menu … well, not really. I rarely use the mouse to access the pulldown menu. I use the keyboard most of the time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_devtools_menu.png" class="img-fluid figure-img"></p>
<figcaption>R GUI pulldown menu</figcaption>
</figure>
</div>
<p>To add a menu, we can use a script and two functions.</p>
<p>The following function add a menu called <code>devtools</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">winMenuAdd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devtools"</span>)</span></code></pre></div>
</div>
<p>After a menu is added, items can be added by <code>utils::winMenuAddItem()</code>. For example, the following call add <code>check</code> to the menu <code>devtools</code>. If selected, the call <code>devtools::check()</code> will be executed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">winMenuAddItem</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devtools"</span>,</span>
<span id="cb2-2">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"check"</span>,</span>
<span id="cb2-3">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devtools::check()"</span>)</span></code></pre></div>
</div>
<p>As the screenshot above showed, most of the items I added to <code>devtools</code> are those functions (menu items) in RStudio (as far as I recalled … as I haven’t used RStudio to develop package for a long time).</p>
<p>Most common tasks that can be done through R code can be converted to a menu item. For example, I don’t like using the pulldown menu to change working directory. I can quickly copy the path to a folder using keyboard only (alt-D and then control-C in Explorer). Therefore, I have the following menu item added to the R GUI:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">winMenuAddItem</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Utils"</span>,</span>
<span id="cb3-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setwd from clipboard"</span>,</span>
<span id="cb3-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setwd(readClipboard());getwd()"</span>)</span></code></pre></div>
</div>
<p><code>setwd(readClipboard())</code> changes the working directory to the folder I copied to clipboard. <code>getwd()</code> is added just to confirm the change.</p>
<p>I sometimes open several instances of R GUI. To differentiate them, I use different color schemes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/rgui_four_instances.png" class="img-fluid figure-img"></p>
<figcaption>Four instances of R GUI</figcaption>
</figure>
</div>
<p>This can be done inside R GUI too:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">winMenuAddItem</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Style"</span>,</span>
<span id="cb4-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lime Green and Light Golden"</span>,</span>
<span id="cb4-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils::loadRconsole('D:/My_Settings/Rconsole_lime_green_and_light_golden')"</span>)</span></code></pre></div>
</div>
<p><code>utils::loadRconsole()</code> is used to load the R GUI configuration stored in a file. This file can be created by saving the settings in the R GUI configuration dialog above to a file. In the above example, the settings are stored in the file <code>Rconsole_lime_green_and_light_golden</code>. I have four such files, storing distinct color schemes.</p>
<p>Like <code>Rconsole</code> for the color scheme and SDI, I would like to have custom menus when I start R GUI. This can be done by adding code like the following to the <code>Rprofile.site</code> file in the <code>etc</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RS_LOCAL_PEER"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> (.Platform<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>GUI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rgui"</span>)) {</span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D:/My_Settings/add_style_menu.R"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) e)</span>
<span id="cb5-3">  }</span></code></pre></div>
</div>
<p>I wrote this a long long time ago and I cannot recall their purposes. I believe <code>Sys.getenv("RS_LOCAL_PEER") == ""</code> is used to check whether a session is launched in RStudio. <code>.Platform$GUI == "Rgui"</code> is used to check whether an R session is launched by the default R GUI. I still occasionally use RStudio and the menus I created should not be added if an R session is launched inside RStudio. I used <code>tryCatch()</code> just in case there are issues that I overlooked.</p>
<p>So, whenever I install a new copy or version of R, I just copy and paste the customized <code>Rconsole</code> and <code>Rprofile.site</code> files to <code>etc</code>. I can then happily have my preferred environment. Having the code for menu groups stored in other files allow me to update them without editing <code>Rprofile.site</code>.</p>
<p>Hope you find these tips useful … if you are R GUI users like me. :)</p>

<p>:::</p>


 ]]></description>
  <category>R</category>
  <category>gui</category>
  <guid>https://blogonresearch.github.io/posts/customizes_r_gui_for_windows/</guid>
  <pubDate>Mon, 19 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>One Function or Many Functions</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/one_function_or_many_functions/</link>
  <description><![CDATA[ 





<p>I am thinking about the differences between R and SPSS in doing analysis: one function for one analysis, and several functions for one analysis.</p>
<p>Though not always the case, in R, it is common to do an analysis using several functions. One of them is the “main” function that do the main analysis. Other functions are used to extract information or compute other statistics.</p>
<p>For example, to do multiple regression, this is what we may do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Test Dataset</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">586045</span>)</span>
<span id="cb1-3">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-4">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-6">dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do regression</span></span>
<span id="cb1-8">lm_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2, dat)</span></code></pre></div>
</div>
<p>The main analysis is done by <code>lm()</code>.</p>
<p>We then use other functions on the output of <code>lm()</code>. For example, we can use <code>summary()</code> to print commonly requested results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ x1 + x2, data = dat)

Residuals:
    Min      1Q  Median      3Q     Max 
-36.807 -10.733   0.153   9.472  37.611 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)   
(Intercept) -20.7634    12.0270  -1.726  0.08746 . 
x1            2.8688     1.6483   1.740  0.08495 . 
x2            2.5771     0.8555   3.012  0.00331 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 15.69 on 97 degrees of freedom
Multiple R-squared:  0.1113,    Adjusted R-squared:  0.09295 
F-statistic: 6.072 on 2 and 97 DF,  p-value: 0.003276</code></pre>
</div>
</div>
<p>Confidence intervals and variance-covariance matrix of the estimates can be obtained by <code>confint()</code> and <code>vcov()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  2.5 %   97.5 %
(Intercept) -44.6335974 3.106785
x1           -0.4025881 6.140222
x2            0.8791251 4.275063</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcov</span>(lm_out)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            (Intercept)            x1           x2
(Intercept)  144.647827 -13.347713331 -7.460851584
x1           -13.347713   2.716868988 -0.005532551
x2            -7.460852  -0.005532551  0.731913160</code></pre>
</div>
</div>
<p>There are many functions for other statistics, such as influential statistics and model comparison.</p>
<p>In SPSS, to do analysis, we usually use a dialog box from the pull down menu, select variables, check some checkboxes, use some buttons to open other dialog boxes and set other options, click OK, and all the requested results are in the output.</p>
<p>I used to think that this approach is due to the graphical user interface (GUI), which is the strength of SPSS. I forgot that (a) the GUI is a “syntax generator,” and (b) the format of SPSS syntax we have nowadays is very similar to that in SPSS before it has a GUI. Actually, when I first learned SPSS in 90’s, I did not even have access to a PC version with text menu. Syntax command was the only way to do analysis in SPSS. For example, <code>REGRESSION</code> is the command, and all the checkboxes and options are values for subcommands, like arguments in R functions.</p>
<p>So, the common way we do analysis in SPSS, with one command for one analysis, is not due to the GUI. It has always been this way, at least in the version I used in early 90’s, before systems like Windows became popular.</p>
<p>So, for an analysis, such as multiple regression, one function, or many functions?</p>
<p>When I write functions or develop packages, I generally adopt the do-one-thing-and-do-it-well principle, though what constitutes “one thing” is not always clear. This principle make it easy for me to write, debug, and maintain a function or package.</p>
<p>However, for users who are used to using GUI, using one function to do many things in an analysis is conceptually similar to using a dialog box, thought without the dialog box. The many-function approach does not fit well with the experience in using a dialog box.</p>
<p>In R, we certainly can write a function that calls other functions, simulating commands like <code>REGRESSION</code> in SPSS.</p>
<p>So, I think this is not a debate of which approach is better. In R, we can do both, and let the users do analysis in whatever approach they like. For development, the do-one-thing-and-do-it-well approach is a better approach. However, for users, especially when developing GUI, the one-function approach may be more convenient to the users. The function in the one-function approach, like <code>REGRESSION</code>, is like a wrapper of a collection of functions: an interface to them.</p>
<p>For example, we can write an R function similar to <code>REGRESSION</code> in SPSS. In SPSS, if all the default options are what we need, this command is sufficient:</p>
<pre><code>REGRESSION
 /DEPENDENT y
 /ENTER x1 x2.</code></pre>
<p>To request confidence intervals (<code>confint()</code> in R) and the variance-covariance matrix of the estimates (<code>vcov()</code> in R), this will do:</p>
<pre><code>REGRESSION
 /STATISTICS DEFAULT BCOV CI(95)
 /DEPENDENT y
 /ENTER x1 x2.</code></pre>
<p>A similar function can be written in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regression</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb10-2">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb10-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ivs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>))</span></code></pre></div>
</div>
<p>We can write it in a more “R-way”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regression</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb11-2">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2)</span></code></pre></div>
</div>
<p>The default printout is something similar to SPSS. It can be a list of tables (data frames) and a print method for printing the output.</p>
<p>Actually, we can still say that we are adopting the do-one-thing-and-do-it-well approach, although the “one thing” is “an interface to a set of functions.”</p>
<p>I am not trying to argue that we should use this or that approach. They are not mutually exclusive. I am just wondering how to make using R by writing scripts more accessible to users who are used to GUI, while still keeping the do-one-thing-and-do-it-well principle. Writing these kinds of wrappers may also make it easier to create GUIs for them. For example, as long as <code>...</code> is not used, a generic function can be developed to check the arguments of a function using its definition and then automatically generate a dialog box for it. For a wrapper with a lot of arguments, a configuration file can be used to customize the dialog box.</p>
<p>P.S.: jamovi is already doing something similar. Behind the dialog boxes are kind of wrapper functions. However, though can be used in console, the modules are, naturally, supposed to be used inside jamovi.</p>

<p>:::</p>


 ]]></description>
  <category>R</category>
  <category>gui</category>
  <guid>https://blogonresearch.github.io/posts/one_function_or_many_functions/</guid>
  <pubDate>Tue, 13 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting Moderation Effects With ggplot2</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/plot_mod/</link>
  <description><![CDATA[ 





<p>There are some R packages that help researchers to plot moderation (interaction) effects: The linear relations between <code>x</code> (independent variable / predictor) and <code>y</code> (dependent variable / outcome variable) for two or more levels of <code>w</code> (moderator). For example, I have been using <a href="https://pbreheny.github.io/visreg/">visreg</a> for multiple regression models fitted by <code>lm()</code> for a long time. It is simple to use and supports both base R graphics and <code>ggplot2</code>. <a href="https://sfcheung.github.io/stdmod/index.html">stdmod</a>, which I maintained, also has the function <a href="https://sfcheung.github.io/stdmod/articles/plotmod.html">plotmod</a> for plotting simple effects in moderated regression. For structural equation modelling, <a href="https://github.com/simsem/semTools/wiki">semTools</a> can be used to plot interaction for latent variables using <a href="https://rdrr.io/cran/semTools/man/plotProbe.html">plotProbe()</a>. <code>plotProbe()</code> can also be used to on observed variables using this <a href="https://groups.google.com/g/lavaan/c/h_LHQUFbx0k/m/jmQwRJEqBAAJ">workaround</a>.</p>
<p>However, there may be case in which all we need is just two or more lines, and all we have are the simple effects: Two or more sets of intercepts of slopes.</p>
<p>This is how to plot the simple effect:</p>
<p>Suppose we want to plot the simple effects of <code>x</code> on <code>y</code> conditional on <code>w</code> (the moderator). From the output of some functions, we have the slopes and intercepts when <code>w</code> is “Low” or “High”:</p>
<p><code>w</code> is “Low”: intercept = 2, slope = 1</p>
<p><code>w</code> is “High”: intercept = 3, slope = 2</p>
<p>Write a simple function to compute the points</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple regression model</span></span>
<span id="cb1-2">xyline <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, a, b) {a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x}</span></code></pre></div>
</div>
<p>Set the range for <code>x</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Range of x</span></span>
<span id="cb2-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p>Compute the predicted values of <code>y</code> at the lower and upper limit of the range of <code>x</code>, for each level of <code>w</code>, when all other predictors of <code>y</code> in the model, if any, are equal to zero:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the two points when moderator = "Low"</span></span>
<span id="cb3-2">dat0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Moderator =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Low"</span>,</span>
<span id="cb3-3">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb3-4">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xyline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the two points when moderator = "High"</span></span>
<span id="cb3-6">dat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Moderator =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"High"</span>,</span>
<span id="cb3-7">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb3-8">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xyline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<p>Combine the datasets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(dat0, dat1)</span>
<span id="cb4-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Moderator  x  y
1       Low  0  2
2       Low 10 12
3      High  0  3
4      High 10 23</code></pre>
</div>
</div>
<p>Draw the lines using <code>ggplot2</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb6-2">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Moderator)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-3">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-4">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Low"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"High"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>))</span>
<span id="cb6-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/plot_mod/index_files/figure-html/plot_original-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This plot can then be modified as necessary:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">p2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent Variable"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dependent Variable"</span>)</span>
<span id="cb7-3">p2</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blogonresearch.github.io/posts/plot_mod/index_files/figure-html/cover-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This solution can be used for multiple regression or structural equation modelling.</p>
<p>Though not as elegant as using packages devoted to plotting moderation effects, this solution may be good enough for some simple scenarios. I believe it can be further improved. However, if we want more, maybe it is better to use packages like <code>semTools</code> and <code>visreg</code>.</p>
<p>P.S.: This post is based on a suggestion I posted to the Google Group for <code>lavaan</code>.</p>

<p>:::</p>


 ]]></description>
  <category>R</category>
  <category>moderation</category>
  <guid>https://blogonresearch.github.io/posts/plot_mod/</guid>
  <pubDate>Sat, 10 Sep 2022 16:00:00 GMT</pubDate>
  <media:content url="https://blogonresearch.github.io/posts/plot_mod/index_files/figure-html/cover-1.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Reviving an Old Blog</title>
  <dc:creator>Shu Fai Cheung</dc:creator>
  <link>https://blogonresearch.github.io/posts/the_first_post/</link>
  <description><![CDATA[ 





<p>This is a “revival” of an old blog of mine on psychological research and methodology (hence the name <em>Blogonresearch</em>). Just anything on research and methodology that are useful to me, and maybe also useful to others.</p>
<p>Edit 2023-01-28: This is actually the “second revival” as I switched from Hugo to Quarto in early 2023.</p>

<p>:::</p>


 ]]></description>
  <category>blog</category>
  <guid>https://blogonresearch.github.io/posts/the_first_post/</guid>
  <pubDate>Sat, 10 Sep 2022 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
