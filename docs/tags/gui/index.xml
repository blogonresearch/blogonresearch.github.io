<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gui on Blogonresearch</title>
    
    
    
    <link>https://blogonresearch.github.io/tags/gui/</link>
    <description>Recent content in gui on Blogonresearch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Sep 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blogonresearch.github.io/tags/gui/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Customize R GUI For Windows</title>
      <link>https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Many people use RStudio, and some even
mistaken RStudio as R. I mainly work
on Windows machines and I did try
RStudio for a while a few years ago.
However, I switched back to default R
GUI for Windows that
comes with R for Windows and used
it along with light-weight code editors,
for personal reasons. RStudio is good,
but has many features that I don&amp;rsquo;t need.
Although I now use VS Code as my main IDE
for R, I still use R GUI for
Windows a lot. It is light-weight,
came with base installation, and
is customizable. Simple but good enough
for some tasks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_startup.png&#34; alt=&#34;R Default GUI&#34;&gt;&lt;/p&gt;
&lt;p&gt;The console above is not the default
one. I like dark theme and
single-document interface (SDI). I keep only
a limited numbers of windows on my
desktop and I never group windows in the
taskbar. SDI is much more efficient for
me to locate the window I need.&lt;/p&gt;
&lt;p&gt;The configuration can be set in
Edit-&amp;gt;Preferences:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_configuration_annotated.png&#34; alt=&#34;Rgui configuration&#34;&gt;&lt;/p&gt;
&lt;p&gt;The configuration is saved in the
&lt;code&gt;Rconsole&lt;/code&gt; file in the folder &lt;code&gt;etc&lt;/code&gt;
in R&amp;rsquo;s installation folder. Whenever
I upgrade to a new version of R, I simply
copy this file to the same folder in the
new installation of R to have my
preferred configuration. No need to set
the configuration again. (I&amp;rsquo;ve just
found that I haven&amp;rsquo;t changes this
configuration for over five years!)&lt;/p&gt;
&lt;p&gt;Another feature I like is customizing
the menu bar. I use &lt;code&gt;devtools&lt;/code&gt; a lot,
and would love to call them from the
pulldown menu &amp;hellip; well, not really.
I rarely use the mouse to access the
pulldown menu. I use the keyboard
most of the time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_devtools_menu.png&#34; alt=&#34;R GUI pulldown menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;To add a menu, we can use a script and two functions.&lt;/p&gt;
&lt;p&gt;The following function add a menu called &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAdd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;devtools&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a menu is added, items can be added by
&lt;code&gt;utils::winMenuAddItem()&lt;/code&gt;. For example, the following
call add &lt;code&gt;check&lt;/code&gt; to the menu &lt;code&gt;devtools&lt;/code&gt;. If selected,
the call &lt;code&gt;devtools::check()&lt;/code&gt; will be executed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAddItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;devtools&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;check&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;devtools::check()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the screenshot above showed, most of
the items I added to &lt;code&gt;devtools&lt;/code&gt; are those
functions (menu items) in RStudio
(as far as I recalled &amp;hellip; as I haven&amp;rsquo;t used
RStudio to develop package for a long
time).&lt;/p&gt;
&lt;p&gt;Most common tasks that can be done through
R code can be converted to a menu item.
For example, I don&amp;rsquo;t like using the pulldown
menu to change working directory. I can
quickly copy the path to a folder using keyboard
only (alt-D and then control-C in
Explorer). Therefore, I have the following
menu item added to the R GUI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAddItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Utils&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setwd from clipboard&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setwd(readClipboard());getwd()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;setwd(readClipboard())&lt;/code&gt; changes the working
directory to the folder I copied to
clipboard. &lt;code&gt;getwd()&lt;/code&gt; is added just to
confirm the change.&lt;/p&gt;
&lt;p&gt;I sometimes open several instances of
R GUI. To differentiate them, I use
different color schemes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-20-customizes-r-gui-for-windows/rgui_four_instances.png&#34; alt=&#34;Four instances of R GUI&#34;&gt;&lt;/p&gt;
&lt;p&gt;This can be done inside R GUI too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;winMenuAddItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Style&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lime Green and Light Golden&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utils::loadRconsole(&amp;#39;D:/My_Settings/Rconsole_lime_green_and_light_golden&amp;#39;)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;utils::loadRconsole()&lt;/code&gt; is used to load
the R GUI configuration stored in a
file. This file can be created by
saving the
settings in the R GUI configuration
dialog above to a file. In the above
example, the settings are stored in
the file &lt;code&gt;Rconsole_lime_green_and_light_golden&lt;/code&gt;.
I have four such files, storing distinct
color schemes.&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;Rconsole&lt;/code&gt; for the color scheme
and SDI, I would like to have custom
menus when I start R GUI. This can be done
by adding code like the following to
the &lt;code&gt;Rprofile.site&lt;/code&gt; file in the &lt;code&gt;etc&lt;/code&gt;
folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RS_LOCAL_PEER&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (.Platform&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;GUI &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rgui&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tryCatch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:/My_Settings/add_style_menu.R&amp;#34;&lt;/span&gt;), error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(e) e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wrote this a long long time ago and I
cannot recall their purposes. I believe
&lt;code&gt;Sys.getenv(&amp;quot;RS_LOCAL_PEER&amp;quot;) == &amp;quot;&amp;quot;&lt;/code&gt; is
used to check whether a session is
launched in RStudio. &lt;code&gt;.Platform$GUI == &amp;quot;Rgui&amp;quot;&lt;/code&gt;
is used to check whether an R session
is launched by the default R GUI. I still
occasionally use RStudio and the menus
I created should not be added if an R
session is launched inside RStudio.
I used &lt;code&gt;tryCatch()&lt;/code&gt; just in case there
are issues that I overlooked.&lt;/p&gt;
&lt;p&gt;So, whenever I install a new copy or version
of R, I just copy and paste the customized
&lt;code&gt;Rconsole&lt;/code&gt; and &lt;code&gt;Rprofile.site&lt;/code&gt; files
to &lt;code&gt;etc&lt;/code&gt;. I can then happily have my
preferred environment. Having the
code for menu groups stored in other
files allow me to update them without
editing &lt;code&gt;Rprofile.site&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hope you find these tips useful &amp;hellip;
if you are R GUI users like me. :)&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>One Function or Many Functions</title>
      <link>https://blogonresearch.github.io/post/2022-09-14-one-function-or-many-functions/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-14-one-function-or-many-functions/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;I am thinking about the differences
between R and SPSS in doing analysis:
one function for one analysis, and
several functions for one analysis.&lt;/p&gt;
&lt;p&gt;Though not always the case, in R, it is
common to do an analysis using several
functions. One of them is the &amp;ldquo;main&amp;rdquo;
function that do the main analysis.
Other functions are used to extract
information or compute other statistics.&lt;/p&gt;
&lt;p&gt;For example, to do multiple regression,
this is what we may do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a Test Dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;586045&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  x2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dat&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;x2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Do regression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt;(y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x2, dat)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main analysis is done by &lt;code&gt;lm()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then use other functions on the
output of &lt;code&gt;lm()&lt;/code&gt;. For example, we can use
&lt;code&gt;summary()&lt;/code&gt; to print commonly requested
results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(lm_out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ x1 + x2, data = dat)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -36.807 -10.733   0.153   9.472  37.611 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)   
## (Intercept) -20.7634    12.0270  -1.726  0.08746 . 
## x1            2.8688     1.6483   1.740  0.08495 . 
## x2            2.5771     0.8555   3.012  0.00331 **
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 15.69 on 97 degrees of freedom
## Multiple R-squared:  0.1113,	Adjusted R-squared:  0.09295 
## F-statistic: 6.072 on 2 and 97 DF,  p-value: 0.003276
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Confidence intervals and variance-covariance
matrix of the estimates can be obtained
by &lt;code&gt;confint()&lt;/code&gt; and &lt;code&gt;vcov()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;confint&lt;/span&gt;(lm_out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##                   2.5 %   97.5 %
## (Intercept) -44.6335974 3.106785
## x1           -0.4025881 6.140222
## x2            0.8791251 4.275063
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vcov&lt;/span&gt;(lm_out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##             (Intercept)            x1           x2
## (Intercept)  144.647827 -13.347713331 -7.460851584
## x1           -13.347713   2.716868988 -0.005532551
## x2            -7.460852  -0.005532551  0.731913160
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are many functions for other statistics,
such as influential statistics and model
comparison.&lt;/p&gt;
&lt;p&gt;In SPSS, to do analysis, we usually use a
dialog box from the pull down menu,
select variables, check some checkboxes,
use some buttons to open other dialog
boxes and set other options, click OK,
and all the requested results are in
the output.&lt;/p&gt;
&lt;p&gt;I used to think that this approach is
due to the graphical user interface (GUI),
which is the strength of SPSS. I forgot
that (a) the GUI is a &amp;ldquo;syntax generator,&amp;rdquo;
and (b) the format of SPSS syntax we have
nowadays is very similar to that in SPSS
before it has a GUI. Actually, when I
first learned SPSS in 90&amp;rsquo;s, I did not even have
access to a PC version with text menu.
Syntax command was the only way to do analysis
in SPSS. For example, &lt;code&gt;REGRESSION&lt;/code&gt; is
the command, and all the checkboxes
and options are values for subcommands,
like arguments in R functions.&lt;/p&gt;
&lt;p&gt;So, the common way we do analysis in
SPSS, with one command for one analysis,
is not due to the GUI. It has always been
this way, at least in the version I used
in early 90&amp;rsquo;s, before systems like Windows
became popular.&lt;/p&gt;
&lt;p&gt;So, for an analysis, such as multiple
regression, one function, or many functions?&lt;/p&gt;
&lt;p&gt;When I write functions or develop packages,
I generally adopt the
do-one-thing-and-do-it-well principle,
though what constitutes &amp;ldquo;one thing&amp;rdquo;
is not always clear. This principle make
it easy for me to write, debug, and
maintain a function or package.&lt;/p&gt;
&lt;p&gt;However, for users who are used to using
GUI, using one function to do many things
in an analysis is conceptually similar
to using a dialog box, thought without
the dialog box.
The many-function approach does not fit
well with the experience in using a dialog box.&lt;/p&gt;
&lt;p&gt;In R, we certainly can write a function
that calls other functions, simulating
commands like &lt;code&gt;REGRESSION&lt;/code&gt; in SPSS.&lt;/p&gt;
&lt;p&gt;So, I think this is not a debate
of which approach is better. In R, we
can do both, and let the users do analysis
in whatever approach they like. For
development, the do-one-thing-and-do-it-well
approach is a better approach. However,
for users, especially when developing
GUI, the one-function approach may be
more convenient to the users. The function
in the one-function approach, like
&lt;code&gt;REGRESSION&lt;/code&gt;, is like a wrapper of
a collection of functions: an interface
to them.&lt;/p&gt;
&lt;p&gt;For example, we can write an R function
similar to &lt;code&gt;REGRESSION&lt;/code&gt; in SPSS. In SPSS,
if all the default options are what we need,
this command is sufficient:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REGRESSION
 /DEPENDENT y
 /ENTER x1 x2.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To request confidence intervals
(&lt;code&gt;confint()&lt;/code&gt; in R) and the variance-covariance
matrix of the estimates (&lt;code&gt;vcov()&lt;/code&gt; in R),
this will do:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REGRESSION
 /STATISTICS DEFAULT BCOV CI(95)
 /DEPENDENT y
 /ENTER x1 x2.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A similar function can be written in R:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;regression&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dat,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           dep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ivs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x2&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can write it in a more &amp;ldquo;R-way&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;regression&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dat,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x2)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default printout is something similar to
SPSS. It can be a list of tables (data frames)
and a print method for printing the output.&lt;/p&gt;
&lt;p&gt;Actually, we can still say
that we are adopting the do-one-thing-and-do-it-well
approach, although the &amp;ldquo;one thing&amp;rdquo; is
&amp;ldquo;an interface to a set of functions.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I am not trying to argue that we should
use this or that approach. They are not
mutually exclusive. I am just
wondering how
to make using R by writing scripts more
accessible to users who are used to GUI,
while still keeping the
do-one-thing-and-do-it-well principle.
Writing these kinds of wrappers may also
make it easier to create GUIs for them.
For example, as long as &lt;code&gt;...&lt;/code&gt; is not
used, a generic function can be developed
to check the arguments of a function
using its definition and then
automatically generate a dialog
box for it. For a wrapper with
a lot of arguments, a configuration
file can be used to customize the
dialog box.&lt;/p&gt;
&lt;p&gt;P.S.: jamovi is already doing something
similar. Behind the dialog boxes are
kind of wrapper functions. However,
though can be used in console, the
modules are, naturally, supposed to be
used inside jamovi.&lt;/p&gt;

        
        </description>
    </item>
    
  </channel>
</rss>