<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>semhelpinghands on Blogonresearch</title>
    
    
    
    <link>https://blogonresearch.github.io/tags/semhelpinghands/</link>
    <description>Recent content in semhelpinghands on Blogonresearch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blogonresearch.github.io/tags/semhelpinghands/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bootstrap Confidence Intervals for Standardized Solution in lavaan</title>
      <link>https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;code&gt;lavaan&lt;/code&gt; supports bootstrap confidence
intervals for free and user-defined
parameters. This is useful especially for
parameter estimates that may not be
approximately normally distributed unless
the sample size is very large.&lt;/p&gt;
&lt;p&gt;However, it is known, though not well-known
enough in my opinion, that, even if bootstrap
confidence intervals are requested, the
confidence intervals reported in the
standardized solution are not bootstrap
confidence intervals as in tools like
&lt;code&gt;PROCESS&lt;/code&gt; for standardized effects like
standardized indirect effects, but are
symmetric delta-method
confidence intervals based on the
bootstrap
sampling variance-covariance matrix.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use a sample dataset for illustration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create the data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;860541&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;^2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;^2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x, m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify a simple regression model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(lavaan)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## This is lavaan 0.6-12
## lavaan is FREE software! Please report any bugs.
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mod &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m ~ a * x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;y ~ b * m + cp * x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab := a * b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; and fit it with bootstrap confidence
intervals:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8970&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sem&lt;/span&gt;(mod, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dat, fixed.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           se &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boot&amp;#34;&lt;/span&gt;, bootstrap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s focus on the confidence intervals of
the indirect effect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parameterEstimates&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standardizedSolution&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Unstandardized&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;est[7, ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   lhs op rhs label   est    se     z pvalue ci.lower ci.upper
## 7  ab := a*b    ab 0.025 0.015 1.686  0.092    0.001    0.059
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Standardized&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std[7, ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   lhs op rhs label est.std    se     z pvalue ci.lower ci.upper
## 7  ab := a*b    ab   0.088 0.049 1.774  0.076   -0.009    0.185
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;They lead to different conclusions.&lt;/p&gt;
&lt;p&gt;As shown below, the confidence interval
of the unstandardized indirect effect
is percentile confidence interval that
is asymmetric, as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;est[7, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.lower&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.upper&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; est[7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;est&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##      ci.lower   ci.upper
## 7 -0.02364024 0.03392409
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, the confidence interval of the
standardized indirect effect is symmetric:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std[7, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.lower&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci.upper&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; std[7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;est.std&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##      ci.lower   ci.upper
## 7 -0.09699904 0.09699904
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This behavior has been discussed
in the &lt;a href=&#34;https://groups.google.com/g/lavaan&#34;&gt;Google group for&lt;code&gt;lavaan&lt;/code&gt;&lt;/a&gt; and
so is known, but not &amp;ldquo;well-known&amp;rdquo; because
I met many users who were not aware of this,
especially when they use bootstrapping to
get the confidence intervals for indirect
effects but found that the confidence
intervals of unstandardized and
standardized indirect effect led to different
conclusions, as in the example above.&lt;/p&gt;
&lt;p&gt;A solution already exists in &lt;code&gt;lavaan&lt;/code&gt;.
Users can use
&lt;code&gt;bootstrapLavaan()&lt;/code&gt; and get the bootstrap
confidence intervals for many results,
including
the output of standardized solution.&lt;/p&gt;
&lt;p&gt;We first define a function to extract
the standardized indirect effect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fct &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(fit) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lavaan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;standardizedSolution&lt;/span&gt;(fit)[7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;est.std&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then update the fit object to disable
standard error because we only need the
point estimates and then call
&lt;code&gt;bootstrapLavaan()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(fit, se &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8970&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_boot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bootstrapLavaan&lt;/span&gt;(fit0, R &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;, FUN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fct)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The percentile confidence interval
can then be formed by &lt;code&gt;quantile()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Note that &lt;code&gt;lavaan()&lt;/code&gt; does not use &lt;code&gt;quantile()&lt;/code&gt; but
use the approach by &lt;code&gt;boot.ci()&lt;/code&gt;. The resulting
interval can be slightly different from that by &lt;code&gt;quantile()&lt;/code&gt;.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(fit_boot[, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;.025&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.975&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##        2.5%       97.5% 
## 0.004372947 0.196203435
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, this is inconvenient because
we need to write
custom function, and
bootstrapping was done twice unless
we store both the unstandardized and
standardized solutions in the custom
function used when calling
&lt;code&gt;bootstrapLavaan()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I wrote the function
&lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html&#34;&gt;&lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt;&lt;/a&gt;, available in
the package &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/&#34;&gt;&lt;code&gt;semhelpinghands&lt;/code&gt;&lt;/a&gt;, for this
particular
case that I sometimes encounter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A model is already fitted with
&lt;code&gt;se = &amp;quot;boot&amp;quot;&lt;/code&gt; and so bootstrap confidence
intervals are already available for the
unstandardized estimates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to get the bootstrap
confidence intervals for the
standardized solution &lt;em&gt;without doing the bootstrapping again&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This would be useful to
me because some of my projects involve large
samples with missing data. and bootstrapping
takes appreciable time even with
parallelization.&lt;/p&gt;
&lt;p&gt;This is how to use this function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(semhelpinghands)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_boot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standardizedSolution_boot_ci&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -c(9, 10) is used to remove the delta-method CIs from&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the printout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_boot[, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   lhs op rhs label est.std    se      z pvalue boot.ci.lower boot.ci.upper
## 1   m  ~   x     a   0.232 0.105  2.213  0.027         0.015         0.425
## 2   y  ~   m     b   0.379 0.083  4.541  0.000         0.204         0.541
## 3   y  ~   x    cp   0.103 0.092  1.117  0.264        -0.079         0.281
## 4   m ~~   m         0.946 0.048 19.527  0.000         0.819         0.999
## 5   y ~~   y         0.828 0.073 11.403  0.000         0.660         0.940
## 6   x ~~   x         1.000 0.000     NA     NA            NA            NA
## 7  ab := a*b    ab   0.088 0.049  1.774  0.076         0.004         0.196
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;boot.ci&lt;/code&gt; intervals are &amp;ldquo;true&amp;rdquo;
bootstrap confidence intervals, formed
from the bootstrap estimates. The
bootstrap confidence interval for
the standardized indirect effect
([0.004, 0.196])
and that for the unstandardized
indirect effect ([0.001, 0.059])
now lead to the same conclusion.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt; works
like &lt;code&gt;standardizedSolution()&lt;/code&gt;,
but extracts the stored bootstrap estimates,
get the standardized solution from each
set of estimates, and use them to form
the bootstrap confidence intervals for
the standardized solution.&lt;/p&gt;
&lt;p&gt;By default, the bootstrap standardized
solution is also stored in the attribute
&lt;code&gt;boot_est_std&lt;/code&gt;. They can be extracted
to examine the distribution. For example,
the bootstrap standardized indirect effects
can be extracted and plotted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_boot_est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(std_boot, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boot_est_std&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std_indirect_boot_est &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; std_boot_est[, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(std_indirect_boot_est)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;qqnorm&lt;/span&gt;(std_indirect_boot_est)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;qqline&lt;/span&gt;(std_indirect_boot_est)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;https://blogonresearch.github.io/post/2022-09-28-bootstrap-confidence-intervals-for-standardized-solution-in-lavaan/index_files/figure-html/unnamed-chunk-14-2.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This function is simple to use, at least for
me. No need to write custom function,
and no need to do bootstrapping twice.
In most cases, I don&amp;rsquo;t even need to
specify any additional arguments.&lt;/p&gt;
&lt;p&gt;More about this function can be found
in the &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html&#34;&gt;vignette&lt;/a&gt; for
&lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If any bug in &lt;code&gt;standardizedSolution_boot_ci()&lt;/code&gt;
was found, I would appreciate submitting
it as a &lt;a href=&#34;https://github.com/sfcheung/semhelpinghands/issues&#34;&gt;GitHub issue&lt;/a&gt;.  😄
&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Show Options Set by lavaan</title>
      <link>https://blogonresearch.github.io/post/2022-09-26-show-options-set-by-lavaan/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blogonresearch.github.io/post/2022-09-26-show-options-set-by-lavaan/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;code&gt;lavaan&lt;/code&gt; is a convenient tool for doing
structural equation modelling in R
(Rosseel, 2012). One
of its strength is having “prepackaged”
estimators, which are shortcuts to a set
of options, such as “ML”, “MLR”, “MLMVS”,
and others (Savalei &amp;amp; Rosseel, 2022).
It also tries to set
default values for options based on the
model and data.&lt;/p&gt;
&lt;p&gt;However, probably due to my not-so-good
memory, I sometimes forgot what the settings
are for a model. Therefore, in the
package &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/&#34;&gt;&lt;code&gt;semhelpinghands&lt;/code&gt;&lt;/a&gt;,
I wrote the function &lt;a href=&#34;https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html&#34;&gt;&lt;code&gt;show_more_options()&lt;/code&gt;&lt;/a&gt;
to show some of the settings of the output of
&lt;code&gt;lavaan()&lt;/code&gt; and its wrappers, such as
&lt;code&gt;sem()&lt;/code&gt; and &lt;code&gt;cfa()&lt;/code&gt;.[1]&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;show_more_options()&lt;/code&gt; is
very easy to use … because it accepts
only one argument, the output of &lt;code&gt;lavaan()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is an example based on the example of
&lt;code&gt;lavaan::cfa()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(lavaan)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## This is lavaan 0.6-12
## lavaan is FREE software! Please report any bugs.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HSmodel &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;visual  =~ x1 + x2 + x3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;textual =~ x4 + x5 + x6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;speed   =~ x7 + x8 + x9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cfa&lt;/span&gt;(HSmodel,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HolzingerSwineford1939)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To show the major options, just pass the output
to &lt;code&gt;show_more_options()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(semhelpinghands)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual  
##  Estimator(s)                        default ML      
##  Standard Error (SE)                 default standard
##  Model Test Statistic(s)             default standard
##  How Missing Data is Handled         default listwise
##  Information Matrix (for SE)         default expected
##  Information Matrix (for Model Test) default expected
##  Mean Structure                      default No      
##  &#39;x&#39; Fixed                           default FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The column &lt;code&gt;Call&lt;/code&gt; shows whether the
default setting is used for each row,
based of the call used when fitting the
model. However, it is not always clear
to me what the default values are.&lt;/p&gt;
&lt;p&gt;The column &lt;code&gt;Actual&lt;/code&gt; shows the values
extracted by &lt;code&gt;lavaan::lavInspect()&lt;/code&gt; or
from the &lt;code&gt;Options&lt;/code&gt; slot. These are what
the default values stand for in the
fitted model.&lt;/p&gt;
&lt;p&gt;Many of the entries are either
(a) already available in the output of
&lt;code&gt;summary()&lt;/code&gt;, or (b) can be deduced from
the output. However, I would like to have
a table for quick reference, hence I
wrote this function.&lt;/p&gt;
&lt;p&gt;Suppose &lt;code&gt;&amp;quot;MLR&amp;quot;&lt;/code&gt; is used as the estimator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_MLR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cfa&lt;/span&gt;(HSmodel,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HolzingerSwineford1939,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               estimator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MLR&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit_MLR)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual            
##  Estimator(s)                        MLR     ML                
##  Standard Error (SE)                 default robust.huber.white
##  Model Test Statistic(s)             default yuan.bentler.mplus
##  How Missing Data is Handled         default listwise          
##  Information Matrix (for SE)         default observed          
##  Information Matrix (for Model Test) default observed          
##  Mean Structure                      default No                
##  &#39;x&#39; Fixed                           default FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shows the exact names of the
options (e.g., &lt;code&gt;&amp;quot;robust.huber.white&amp;quot;&lt;/code&gt;
and &lt;code&gt;&amp;quot;yuan.bentler.mplus&amp;quot;&lt;/code&gt;). They can
complement the more readable output
of &lt;code&gt;summary()&lt;/code&gt; if we need to manually
set these options, or want to know
which values these options refer to when
consulting the help page.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;summary()&lt;/code&gt; reports that
&lt;code&gt;&amp;quot;Sandwich&amp;quot;&lt;/code&gt; is the method used for
standard errors, and &lt;code&gt;show_more_options()&lt;/code&gt;
shows that the exact name in the option
is &lt;code&gt;&amp;quot;robust.huber.white&amp;quot;&lt;/code&gt;. This is useful
because the word &lt;code&gt;&amp;quot;sandwich&amp;quot;&lt;/code&gt; does not
appear in the help page of &lt;code&gt;lavOptions()&lt;/code&gt;,
while the word &lt;code&gt;&amp;quot;robust.huber.white&amp;quot;&lt;/code&gt; does.
Some users may not know what &lt;code&gt;&amp;quot;Sandwich&amp;quot;&lt;/code&gt;
stands for.&lt;/p&gt;
&lt;p&gt;This is a dataset for a path model,
with missing data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8745315&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x, m, y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_data&lt;span style=&#34;color:#a6e22e&#34;&gt;[c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_data&lt;span style=&#34;color:#a6e22e&#34;&gt;[c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suppose we use only the default options
to fit a path model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_model &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m ~ a * x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;y ~ b * m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab := a * b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_path &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sem&lt;/span&gt;(path_model,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit_path)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual  
##  Estimator(s)                        default ML      
##  Standard Error (SE)                 default standard
##  Model Test Statistic(s)             default standard
##  How Missing Data is Handled         default listwise
##  Information Matrix (for SE)         default expected
##  Information Matrix (for Model Test) default expected
##  Mean Structure                      default No      
##  &#39;x&#39; Fixed                           default TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shows that, by default,
the mean structure is not modelled,
listwise selection is used to handle
missing data, and
&lt;code&gt;x&lt;/code&gt; variables (exogenous covariates,
&lt;code&gt;x&lt;/code&gt; in this example)
are treated as fixed. This can be verified
by the parameter estimates, in which
the variance of &lt;code&gt;x&lt;/code&gt; is a fixed
parameter and hence has no standard
error and no &lt;em&gt;p&lt;/em&gt;-value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parameterEstimates&lt;/span&gt;(fit_path)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##   lhs op rhs label   est    se     z pvalue ci.lower ci.upper
## 1   m  ~   x     a 0.075 0.078 0.966  0.334   -0.077    0.228
## 2   y  ~   m     b 0.248 0.119 2.081  0.037    0.014    0.482
## 3   m ~~   m       0.550 0.080 6.856  0.000    0.393    0.708
## 4   y ~~   y       0.745 0.109 6.856  0.000    0.532    0.958
## 5   x ~~   x       0.967 0.000    NA     NA    0.967    0.967
## 6  ab := a*b    ab 0.019 0.021 0.876  0.381   -0.023    0.060
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we set missing to &lt;code&gt;&amp;quot;FIML&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_path_fiml &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sem&lt;/span&gt;(path_model,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; path_data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     missing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FIML&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_more_options&lt;/span&gt;(fit_path_fiml)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  Options                             Call    Actual  
##  Estimator(s)                        default ML      
##  Standard Error (SE)                 default standard
##  Model Test Statistic(s)             default standard
##  How Missing Data is Handled         FIML    ml      
##  Information Matrix (for SE)         default observed
##  Information Matrix (for Model Test) default observed
##  Mean Structure                      default Yes     
##  &#39;x&#39; Fixed                           default TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; variables are still treated as fixed,
but now mean structure is modelled
(required for FIML, full information
maximum likelihood), even though I did
not explicitly ask for it.&lt;/p&gt;
&lt;p&gt;Only options I think are likely needed
(by me) are included
in the output.[2]
More may be added in
the future. In any case, if other options
are needed, they can be
retrieved by &lt;code&gt;lavaan::lavInspect()&lt;/code&gt; or
from the &lt;code&gt;Options&lt;/code&gt; slot of the output.
In most cases I
myself encountered, all I want is a simple
function that is easy to remember and no
need to set any arguments other than
the &lt;code&gt;lavaan&lt;/code&gt; output. If I need something
else, I will just extract the information
myself.&lt;/p&gt;
&lt;p&gt;This function was inspired by a script
I wrote to enumerate the options set by
the prepackaged shortcuts. Interested
readers can read &lt;a href=&#34;https://groups.google.com/g/lavaan/c/6oLwoboi-vQ/m/IQLAXChPAwAJ&#34;&gt;this thread&lt;/a&gt;
at the &lt;a href=&#34;https://groups.google.com/g/lavaan&#34;&gt;Google Group for &lt;code&gt;lavaan&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;https://gist.github.com/sfcheung/baa5e43c32d4763b859f5338a1738d79&#34;&gt;this gist&lt;/a&gt;,
to check how options will be set for
different
combinations of estimator, data, and
some other options.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a href=&#34;#references&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references hanging-indent&#34;&gt;
&lt;div id=&#34;ref-lavaan_2012&#34;&gt;
&lt;p&gt;Rosseel, Y. (2012). lavaan: An R package for structural equation modeling. &lt;em&gt;Journal of Statistical Software&lt;/em&gt;, &lt;em&gt;48&lt;/em&gt;(2), 1–36. &lt;a href=&#34;https://doi.org/10.18637/jss.v048.i02&#34;&gt;https://doi.org/10.18637/jss.v048.i02&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-savalei_computational_2022&#34;&gt;
&lt;p&gt;Savalei, V., &amp;amp; Rosseel, Y. (2022). Computational options for standard errors and test statistics with incomplete normal and nonnormal data in SEM. &lt;em&gt;Structural Equation Modeling: A Multidisciplinary Journal&lt;/em&gt;, &lt;em&gt;29&lt;/em&gt;(2), 163–181. &lt;a href=&#34;https://doi.org/10.1080/10705511.2021.1877548&#34;&gt;https://doi.org/10.1080/10705511.2021.1877548&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To be precise, any object of the class &lt;code&gt;lavaan&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The information matrices are technical but I occasionally need them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

        
        </description>
    </item>
    
  </channel>
</rss>